
DSP_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080061c8  080061c8  000161c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006604  08006604  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006604  08006604  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006604  08006604  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006604  08006604  00016604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  0800660c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  240001f0  080067fc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003e0  080067fc  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dacf  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5a  00000000  00000000  0002dced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003984b  00000000  00000000  00031260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e198  00000000  00000000  0006aaab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017dd98  00000000  00000000  00078c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f69db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004688  00000000  00000000  001f6a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080061b0 	.word	0x080061b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	080061b0 	.word	0x080061b0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800077c:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <SystemInit+0xfc>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a3c      	ldr	r2, [pc, #240]	; (8000874 <SystemInit+0xfc>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <SystemInit+0xfc>)
 800078e:	691b      	ldr	r3, [r3, #16]
 8000790:	4a38      	ldr	r2, [pc, #224]	; (8000874 <SystemInit+0xfc>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <SystemInit+0x100>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 030f 	and.w	r3, r3, #15
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d807      	bhi.n	80007b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <SystemInit+0x100>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 030f 	bic.w	r3, r3, #15
 80007ac:	4a32      	ldr	r2, [pc, #200]	; (8000878 <SystemInit+0x100>)
 80007ae:	f043 0307 	orr.w	r3, r3, #7
 80007b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <SystemInit+0x104>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a30      	ldr	r2, [pc, #192]	; (800087c <SystemInit+0x104>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <SystemInit+0x104>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <SystemInit+0x104>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	492c      	ldr	r1, [pc, #176]	; (800087c <SystemInit+0x104>)
 80007cc:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <SystemInit+0x108>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <SystemInit+0x100>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d007      	beq.n	80007ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <SystemInit+0x100>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f023 030f 	bic.w	r3, r3, #15
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <SystemInit+0x100>)
 80007e8:	f043 0307 	orr.w	r3, r3, #7
 80007ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <SystemInit+0x104>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <SystemInit+0x104>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <SystemInit+0x104>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <SystemInit+0x104>)
 8000802:	4a20      	ldr	r2, [pc, #128]	; (8000884 <SystemInit+0x10c>)
 8000804:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <SystemInit+0x104>)
 8000808:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <SystemInit+0x110>)
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <SystemInit+0x104>)
 800080e:	4a1f      	ldr	r2, [pc, #124]	; (800088c <SystemInit+0x114>)
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <SystemInit+0x104>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <SystemInit+0x104>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <SystemInit+0x114>)
 800081c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <SystemInit+0x104>)
 8000820:	2200      	movs	r2, #0
 8000822:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <SystemInit+0x104>)
 8000826:	4a19      	ldr	r2, [pc, #100]	; (800088c <SystemInit+0x114>)
 8000828:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <SystemInit+0x104>)
 800082c:	2200      	movs	r2, #0
 800082e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <SystemInit+0x104>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <SystemInit+0x104>)
 8000836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800083a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <SystemInit+0x104>)
 800083e:	2200      	movs	r2, #0
 8000840:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <SystemInit+0x118>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <SystemInit+0x118>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <SystemInit+0x11c>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <SystemInit+0x120>)
 8000854:	4013      	ands	r3, r2
 8000856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800085a:	d202      	bcs.n	8000862 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <SystemInit+0x124>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <SystemInit+0x128>)
 8000864:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000868:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	52002000 	.word	0x52002000
 800087c:	58024400 	.word	0x58024400
 8000880:	eaf6ed7f 	.word	0xeaf6ed7f
 8000884:	02020200 	.word	0x02020200
 8000888:	01ff0000 	.word	0x01ff0000
 800088c:	01010280 	.word	0x01010280
 8000890:	580000c0 	.word	0x580000c0
 8000894:	5c001000 	.word	0x5c001000
 8000898:	ffff0000 	.word	0xffff0000
 800089c:	51008108 	.word	0x51008108
 80008a0:	52004000 	.word	0x52004000

080008a4 <DSP_PolynomInit>:

#include "DSP_Polynom.h"


DSP_Return_ten DSP_PolynomInit(DSP_Polynom_tst* Polynom_st)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	Polynom_st->degree = 0;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0 ; i < 10 ; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e00e      	b.n	80008d6 <DSP_PolynomInit+0x32>
	{
		Polynom_st->coef[i] = 0.0;
 80008b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	3304      	adds	r3, #4
 80008c4:	f04f 0200 	mov.w	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
	for (int8_t i = 0 ; i < 10 ; i++)
 80008ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	2b09      	cmp	r3, #9
 80008dc:	ddec      	ble.n	80008b8 <DSP_PolynomInit+0x14>
	}
	return DSP_Ok_en;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DSP_PolynomCreate>:

DSP_Return_ten DSP_PolynomCreate(char* PolynomChar , DSP_Polynom_tst* Polynom_st)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	DSP_Return_ten Return = DSP_Ok_en;
 80008f6:	2300      	movs	r3, #0
 80008f8:	77fb      	strb	r3, [r7, #31]
	char CoefChar[10];

	uint8_t index = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	767b      	strb	r3, [r7, #25]
	uint8_t PolynomCharLength = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	763b      	strb	r3, [r7, #24]

	uint8_t NextCoefIndex = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	77bb      	strb	r3, [r7, #30]

	uint8_t CoefNumber = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	777b      	strb	r3, [r7, #29]

	uint8_t LastCoefGot = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	773b      	strb	r3, [r7, #28]

	for (int8_t i = 0 ; i<10 ; i++)
 800090e:	2300      	movs	r3, #0
 8000910:	76fb      	strb	r3, [r7, #27]
 8000912:	e00c      	b.n	800092e <DSP_PolynomCreate+0x42>
	{
		CoefChar[i] = '\0';
 8000914:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000918:	3320      	adds	r3, #32
 800091a:	443b      	add	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (int8_t i = 0 ; i<10 ; i++)
 8000922:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	3301      	adds	r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	76fb      	strb	r3, [r7, #27]
 800092e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000932:	2b09      	cmp	r3, #9
 8000934:	ddee      	ble.n	8000914 <DSP_PolynomCreate+0x28>
	}

	PolynomCharLength = strlen(PolynomChar);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fcd2 	bl	80002e0 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	763b      	strb	r3, [r7, #24]
	if ((PolynomChar[0] == '[') && (PolynomChar[PolynomCharLength-1] == ']'))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b5b      	cmp	r3, #91	; 0x5b
 8000946:	f040 80e4 	bne.w	8000b12 <DSP_PolynomCreate+0x226>
 800094a:	7e3b      	ldrb	r3, [r7, #24]
 800094c:	3b01      	subs	r3, #1
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b5d      	cmp	r3, #93	; 0x5d
 8000956:	f040 80dc 	bne.w	8000b12 <DSP_PolynomCreate+0x226>
	{
		index = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	767b      	strb	r3, [r7, #25]
		for (int8_t i = index ; i < PolynomCharLength ; i++)
 800095e:	7e7b      	ldrb	r3, [r7, #25]
 8000960:	76bb      	strb	r3, [r7, #26]
 8000962:	e0cf      	b.n	8000b04 <DSP_PolynomCreate+0x218>
		{
			if ((PolynomChar[i] == '0')
 8000964:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b30      	cmp	r3, #48	; 0x30
 8000970:	d05a      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '1')
 8000972:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b31      	cmp	r3, #49	; 0x31
 800097e:	d053      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '2')
 8000980:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4413      	add	r3, r2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b32      	cmp	r3, #50	; 0x32
 800098c:	d04c      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '3')
 800098e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b33      	cmp	r3, #51	; 0x33
 800099a:	d045      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '4')
 800099c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b34      	cmp	r3, #52	; 0x34
 80009a8:	d03e      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '5')
 80009aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b35      	cmp	r3, #53	; 0x35
 80009b6:	d037      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '6')
 80009b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b36      	cmp	r3, #54	; 0x36
 80009c4:	d030      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '7')
 80009c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b37      	cmp	r3, #55	; 0x37
 80009d2:	d029      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '8')
 80009d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b38      	cmp	r3, #56	; 0x38
 80009e0:	d022      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '9')
 80009e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b39      	cmp	r3, #57	; 0x39
 80009ee:	d01b      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '.')
 80009f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b2e      	cmp	r3, #46	; 0x2e
 80009fc:	d014      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == ']')
 80009fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b5d      	cmp	r3, #93	; 0x5d
 8000a0a:	d00d      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == ' ')
 8000a0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b20      	cmp	r3, #32
 8000a18:	d006      	beq.n	8000a28 <DSP_PolynomCreate+0x13c>
					|| (PolynomChar[i] == '-')
 8000a1a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b2d      	cmp	r3, #45	; 0x2d
 8000a26:	d163      	bne.n	8000af0 <DSP_PolynomCreate+0x204>
					)
			{
				if (PolynomChar[i] == ' ')
 8000a28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b20      	cmp	r3, #32
 8000a34:	d12e      	bne.n	8000a94 <DSP_PolynomCreate+0x1a8>
				{
					strncpy(CoefChar,&(PolynomChar[NextCoefIndex]), i - NextCoefIndex);
 8000a36:	7fbb      	ldrb	r3, [r7, #30]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	18d1      	adds	r1, r2, r3
 8000a3c:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8000a40:	7fbb      	ldrb	r3, [r7, #30]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fd46 	bl	80034dc <strncpy>
					//strcat(CoefChar,(const char*)(ZeroChar) );
					CoefNumber ++;
 8000a50:	7f7b      	ldrb	r3, [r7, #29]
 8000a52:	3301      	adds	r3, #1
 8000a54:	777b      	strb	r3, [r7, #29]
					Polynom_st->coef[CoefNumber-1] = atof(CoefChar);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fcfa 	bl	8003454 <atof>
 8000a60:	eeb0 7b40 	vmov.f64	d7, d0
 8000a64:	7f7b      	ldrb	r3, [r7, #29]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	3304      	adds	r3, #4
 8000a74:	edc3 7a00 	vstr	s15, [r3]

					if (i+1 == PolynomCharLength - 1)
 8000a78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	7e3b      	ldrb	r3, [r7, #24]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d102      	bne.n	8000a8c <DSP_PolynomCreate+0x1a0>
					{
						LastCoefGot = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	773b      	strb	r3, [r7, #28]
				if (PolynomChar[i] == ' ')
 8000a8a:	e034      	b.n	8000af6 <DSP_PolynomCreate+0x20a>
					}
					else
					{
						NextCoefIndex = i + 1;
 8000a8c:	7ebb      	ldrb	r3, [r7, #26]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	77bb      	strb	r3, [r7, #30]
				if (PolynomChar[i] == ' ')
 8000a92:	e030      	b.n	8000af6 <DSP_PolynomCreate+0x20a>
					}
				}
				else if ((PolynomChar[i] == ']'))
 8000a94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b5d      	cmp	r3, #93	; 0x5d
 8000aa0:	d129      	bne.n	8000af6 <DSP_PolynomCreate+0x20a>
				{
					if (LastCoefGot == 0)
 8000aa2:	7f3b      	ldrb	r3, [r7, #28]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d126      	bne.n	8000af6 <DSP_PolynomCreate+0x20a>
					{
						strncpy(CoefChar,&(PolynomChar[NextCoefIndex]), i - NextCoefIndex);
 8000aa8:	7fbb      	ldrb	r3, [r7, #30]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	18d1      	adds	r1, r2, r3
 8000aae:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8000ab2:	7fbb      	ldrb	r3, [r7, #30]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 fd0d 	bl	80034dc <strncpy>
						//strcat(CoefChar,(const char*)(ZeroChar) );
						CoefNumber ++;
 8000ac2:	7f7b      	ldrb	r3, [r7, #29]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	777b      	strb	r3, [r7, #29]
						Polynom_st->coef[CoefNumber-1] = atof(CoefChar);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fcc1 	bl	8003454 <atof>
 8000ad2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ad6:	7f7b      	ldrb	r3, [r7, #29]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	edc3 7a00 	vstr	s15, [r3]

						NextCoefIndex = 0xff;
 8000aea:	23ff      	movs	r3, #255	; 0xff
 8000aec:	77bb      	strb	r3, [r7, #30]
				if (PolynomChar[i] == ' ')
 8000aee:	e002      	b.n	8000af6 <DSP_PolynomCreate+0x20a>
				}
			}
			else
			{
				/* wrong input */
				Return = DSP_Error_en;
 8000af0:	2301      	movs	r3, #1
 8000af2:	77fb      	strb	r3, [r7, #31]
 8000af4:	e000      	b.n	8000af8 <DSP_PolynomCreate+0x20c>
				if (PolynomChar[i] == ' ')
 8000af6:	bf00      	nop
		for (int8_t i = index ; i < PolynomCharLength ; i++)
 8000af8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	76bb      	strb	r3, [r7, #26]
 8000b04:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8000b08:	7e3b      	ldrb	r3, [r7, #24]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	f6ff af2a 	blt.w	8000964 <DSP_PolynomCreate+0x78>
 8000b10:	e001      	b.n	8000b16 <DSP_PolynomCreate+0x22a>
		}
	}
	else
	{
		/* Polynom not valid */
		Return = DSP_Error_en;
 8000b12:	2301      	movs	r3, #1
 8000b14:	77fb      	strb	r3, [r7, #31]
	}
	Polynom_st->degree = CoefNumber - 1;
 8000b16:	7f7b      	ldrb	r3, [r7, #29]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	701a      	strb	r2, [r3, #0]

	return Return;
 8000b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <DSP_SumPolynom>:

DSP_Return_ten DSP_SumPolynom(DSP_Polynom_tst Polynom1_st, DSP_Polynom_tst Polynom2_st , DSP_Polynom_tst* PolynomSum_st)
{
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	f107 0c10 	add.w	ip, r7, #16
 8000b36:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DSP_Return_ten Return = DSP_Ok_en;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	71bb      	strb	r3, [r7, #6]

	if (Polynom1_st.degree == Polynom2_st.degree)
 8000b3e:	7c3a      	ldrb	r2, [r7, #16]
 8000b40:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d103      	bne.n	8000b50 <DSP_SumPolynom+0x26>
	{
		PolynomSum_st->degree = Polynom1_st.degree;
 8000b48:	7c3a      	ldrb	r2, [r7, #16]
 8000b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e00c      	b.n	8000b6a <DSP_SumPolynom+0x40>
	}
	else if (Polynom1_st.degree > Polynom2_st.degree)
 8000b50:	7c3a      	ldrb	r2, [r7, #16]
 8000b52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d903      	bls.n	8000b62 <DSP_SumPolynom+0x38>
	{
		PolynomSum_st->degree = Polynom1_st.degree;
 8000b5a:	7c3a      	ldrb	r2, [r7, #16]
 8000b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	e003      	b.n	8000b6a <DSP_SumPolynom+0x40>
	}
	else
	{
		PolynomSum_st->degree = Polynom2_st.degree;
 8000b62:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b68:	701a      	strb	r2, [r3, #0]
	}

	for (int8_t i = 0; i < PolynomSum_st->degree + 1 ; i++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	e01f      	b.n	8000bb0 <DSP_SumPolynom+0x86>
	{
		PolynomSum_st->coef[i] = Polynom1_st.coef[i] + Polynom2_st.coef[i];
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	3310      	adds	r3, #16
 8000b78:	443b      	add	r3, r7
 8000b7a:	3304      	adds	r3, #4
 8000b7c:	ed93 7a00 	vldr	s14, [r3]
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	3310      	adds	r3, #16
 8000b88:	443b      	add	r3, r7
 8000b8a:	3334      	adds	r3, #52	; 0x34
 8000b8c:	edd3 7a00 	vldr	s15, [r3]
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	edc3 7a00 	vstr	s15, [r3]
	for (int8_t i = 0; i < PolynomSum_st->degree + 1 ; i++)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dad8      	bge.n	8000b70 <DSP_SumPolynom+0x46>
	}

	while (PolynomSum_st->coef[PolynomSum_st->degree] == 0.0)
 8000bbe:	e005      	b.n	8000bcc <DSP_SumPolynom+0xa2>
	{
		PolynomSum_st->degree = PolynomSum_st->degree - 1 ;
 8000bc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bca:	701a      	strb	r2, [r3, #0]
	while (PolynomSum_st->coef[PolynomSum_st->degree] == 0.0)
 8000bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be4:	d0ec      	beq.n	8000bc0 <DSP_SumPolynom+0x96>
	}

	return Return;
 8000be6:	79bb      	ldrb	r3, [r7, #6]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	b004      	add	sp, #16
 8000bf4:	4770      	bx	lr

08000bf6 <DSP_MulPolynom>:

DSP_Return_ten DSP_MulPolynom(DSP_Polynom_tst Polynom1_st, DSP_Polynom_tst Polynom2_st, DSP_Polynom_tst* PolynomMul_st)
{
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	f107 0c10 	add.w	ip, r7, #16
 8000c02:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DSP_Return_ten Return = DSP_Ok_en;
 8000c06:	2300      	movs	r3, #0
 8000c08:	717b      	strb	r3, [r7, #5]

//	float PolynomProduct[10][10];

	PolynomMul_st->degree = Polynom1_st.degree + Polynom2_st.degree;
 8000c0a:	7c3a      	ldrb	r2, [r7, #16]
 8000c0c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c10:	4413      	add	r3, r2
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c16:	701a      	strb	r2, [r3, #0]

	for (int8_t i = 0 ; i < Polynom1_st.degree +1 ; i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	e03f      	b.n	8000c9e <DSP_MulPolynom+0xa8>
	{
		// select the line
		for (int8_t j = 0 ; j <Polynom2_st.degree+1 ; j++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71bb      	strb	r3, [r7, #6]
 8000c22:	e02f      	b.n	8000c84 <DSP_MulPolynom+0x8e>
		{
			// select the row
//			PolynomProduct[i][j] = Polynom1_st.coef[i] * Polynom2_st.coef[j];
			PolynomMul_st->coef[i+j] = PolynomMul_st->coef[i+j] + (Polynom1_st.coef[i] * Polynom2_st.coef[j]);
 8000c24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	3304      	adds	r3, #4
 8000c36:	ed93 7a00 	vldr	s14, [r3]
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	3310      	adds	r3, #16
 8000c42:	443b      	add	r3, r7
 8000c44:	3304      	adds	r3, #4
 8000c46:	edd3 6a00 	vldr	s13, [r3]
 8000c4a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	3310      	adds	r3, #16
 8000c52:	443b      	add	r3, r7
 8000c54:	3334      	adds	r3, #52	; 0x34
 8000c56:	edd3 7a00 	vldr	s15, [r3]
 8000c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c66:	4413      	add	r3, r2
 8000c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	3304      	adds	r3, #4
 8000c74:	edc3 7a00 	vstr	s15, [r3]
		for (int8_t j = 0 ; j <Polynom2_st.degree+1 ; j++)
 8000c78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	71bb      	strb	r3, [r7, #6]
 8000c84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dac8      	bge.n	8000c24 <DSP_MulPolynom+0x2e>
	for (int8_t i = 0 ; i < Polynom1_st.degree +1 ; i++)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	3301      	adds	r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	7c3b      	ldrb	r3, [r7, #16]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dab9      	bge.n	8000c1e <DSP_MulPolynom+0x28>
		}
	}

	return Return;
 8000caa:	797b      	ldrb	r3, [r7, #5]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	b004      	add	sp, #16
 8000cb8:	4770      	bx	lr

08000cba <DSP_MulScalarPolynom>:

DSP_Return_ten DSP_MulScalarPolynom(float Scalar, DSP_Polynom_tst Polynom1_st, DSP_Polynom_tst* PolynomMul_st)
{
 8000cba:	b084      	sub	sp, #16
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cc6:	f107 0c18 	add.w	ip, r7, #24
 8000cca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	PolynomMul_st->degree = Polynom1_st.degree;
 8000cce:	7e3a      	ldrb	r2, [r7, #24]
 8000cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd2:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0; i < Polynom1_st.degree + 1 ; i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e019      	b.n	8000d0e <DSP_MulScalarPolynom+0x54>
	{
		PolynomMul_st->coef[i] = Scalar * Polynom1_st.coef[i];
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	443b      	add	r3, r7
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	ed93 7a00 	vldr	s14, [r3]
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	for (int8_t i = 0; i < Polynom1_st.degree + 1 ; i++)
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	7e3b      	ldrb	r3, [r7, #24]
 8000d10:	461a      	mov	r2, r3
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	dadf      	bge.n	8000cda <DSP_MulScalarPolynom+0x20>
	}
	return DSP_Ok_en;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr

08000d2a <DSP_DevideScalarPolynom>:

DSP_Return_ten DSP_DevideScalarPolynom(float Scalar, DSP_Polynom_tst Polynom1_st, DSP_Polynom_tst* PolynomMul_st)
{
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d36:	f107 0c18 	add.w	ip, r7, #24
 8000d3a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	PolynomMul_st->degree = Polynom1_st.degree;
 8000d3e:	7e3a      	ldrb	r2, [r7, #24]
 8000d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d42:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0; i < Polynom1_st.degree + 1 ; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e019      	b.n	8000d7e <DSP_DevideScalarPolynom+0x54>
	{
		PolynomMul_st->coef[i] = (float)( Polynom1_st.coef[i] / Scalar);
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	3318      	adds	r3, #24
 8000d52:	443b      	add	r3, r7
 8000d54:	3304      	adds	r3, #4
 8000d56:	edd3 6a00 	vldr	s13, [r3]
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	edc3 7a00 	vstr	s15, [r3]
	for (int8_t i = 0; i < Polynom1_st.degree + 1 ; i++)
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	7e3b      	ldrb	r3, [r7, #24]
 8000d80:	461a      	mov	r2, r3
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dadf      	bge.n	8000d4a <DSP_DevideScalarPolynom+0x20>
	}
	return DSP_Ok_en;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	b004      	add	sp, #16
 8000d98:	4770      	bx	lr

08000d9a <DSP_PowPolynom>:

DSP_Return_ten DSP_PowPolynom(DSP_Polynom_tst Polynom_st, uint8_t pow , DSP_Polynom_tst* PolynomResult_st)
{
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	b0a5      	sub	sp, #148	; 0x94
 8000da0:	af16      	add	r7, sp, #88	; 0x58
 8000da2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DSP_Return_ten Return = DSP_Ok_en;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	DSP_Polynom_tst PolynomZero;

	if (pow != 0)
 8000db0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d049      	beq.n	8000e4c <DSP_PowPolynom+0xb2>
	{

		PolynomResult_st->degree = 0;
 8000db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
		PolynomResult_st->coef[0] = 1.0;
 8000dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000dc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000dc8:	605a      	str	r2, [r3, #4]

		for (int8_t i = 0; i < pow ; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000dd0:	e035      	b.n	8000e3e <DSP_PowPolynom+0xa4>
		{
			DSP_PolynomInit(&PolynomZero);
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd65 	bl	80008a4 <DSP_PolynomInit>
			DSP_MulPolynom(*PolynomResult_st, Polynom_st, &PolynomZero);
 8000dda:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	9314      	str	r3, [sp, #80]	; 0x50
 8000de2:	ac08      	add	r4, sp, #32
 8000de4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8000de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000df8:	466d      	mov	r5, sp
 8000dfa:	f106 0410 	add.w	r4, r6, #16
 8000dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e06:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e0e:	f7ff fef2 	bl	8000bf6 <DSP_MulPolynom>
			DSP_CpyPolynom(PolynomResult_st, PolynomZero);
 8000e12:	466d      	mov	r5, sp
 8000e14:	f107 0410 	add.w	r4, r7, #16
 8000e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	602b      	str	r3, [r5, #0]
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e28:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000e2c:	f000 f820 	bl	8000e70 <DSP_CpyPolynom>
		for (int8_t i = 0; i < pow ; i++)
 8000e30:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	3301      	adds	r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000e3e:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8000e42:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dbc3      	blt.n	8000dd2 <DSP_PowPolynom+0x38>
 8000e4a:	e008      	b.n	8000e5e <DSP_PowPolynom+0xc4>
		}
	}
	else
	{
		PolynomResult_st->degree = 0;
 8000e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
		PolynomResult_st->coef[0] = 1.0;
 8000e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e5c:	605a      	str	r2, [r3, #4]
	}

	return Return;
 8000e5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	373c      	adds	r7, #60	; 0x3c
 8000e66:	46bd      	mov	sp, r7
 8000e68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000e6c:	b004      	add	sp, #16
 8000e6e:	4770      	bx	lr

08000e70 <DSP_CpyPolynom>:

DSP_Return_ten DSP_CpyPolynom(DSP_Polynom_tst* Polynom1_st , DSP_Polynom_tst Polynom2_st)
{
 8000e70:	b084      	sub	sp, #16
 8000e72:	b480      	push	{r7}
 8000e74:	b085      	sub	sp, #20
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	f107 001c 	add.w	r0, r7, #28
 8000e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Polynom1_st->degree = Polynom2_st.degree;
 8000e82:	7f3a      	ldrb	r2, [r7, #28]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0; i < Polynom2_st.degree + 1 ; i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e013      	b.n	8000eb6 <DSP_CpyPolynom+0x46>
	{
		Polynom1_st->coef[i] = Polynom2_st.coef[i];
 8000e8e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	3218      	adds	r2, #24
 8000e9a:	443a      	add	r2, r7
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	601a      	str	r2, [r3, #0]
	for (int8_t i = 0; i < Polynom2_st.degree + 1 ; i++)
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7f3b      	ldrb	r3, [r7, #28]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dae5      	bge.n	8000e8e <DSP_CpyPolynom+0x1e>
	}
	return DSP_Ok_en;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	b004      	add	sp, #16
 8000ed0:	4770      	bx	lr

08000ed2 <DSP_CreateTransferFunction>:
 */

#include "DSP_TransferFunction.h"

DSP_Return_ten DSP_CreateTransferFunction(char* Numerator,char* denominator, DSP_TF_tst* Tf)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
	DSP_Return_ten Return;

	Return = DSP_PolynomCreate(Numerator, &Tf->num);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff fd02 	bl	80008ec <DSP_PolynomCreate>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	75fb      	strb	r3, [r7, #23]
	Return = DSP_PolynomCreate(denominator, &Tf->denom);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3330      	adds	r3, #48	; 0x30
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	68b8      	ldr	r0, [r7, #8]
 8000ef4:	f7ff fcfa 	bl	80008ec <DSP_PolynomCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	75fb      	strb	r3, [r7, #23]

	return Return;
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <DSP_C2D>:

DSP_Return_ten DSP_C2D(DSP_TF_tst ContTF, DSP_TF_tst* DiscTF, DSP_ZAlgorithm_ten Algo)
{
 8000f08:	b084      	sub	sp, #16
 8000f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0c:	b0fb      	sub	sp, #492	; 0x1ec
 8000f0e:	af16      	add	r7, sp, #88	; 0x58
 8000f10:	f507 74d4 	add.w	r4, r7, #424	; 0x1a8
 8000f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DSP_Return_ten Return = DSP_Ok_en;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d

	DSP_Polynom_tst TustinNum;
	DSP_Polynom_tst TustinDenom;

	TustinNum.degree = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
	TustinNum.coef[0] = 2 / Ts;
 8000f24:	4b68      	ldr	r3, [pc, #416]	; (80010c8 <DSP_C2D+0x1c0>)
 8000f26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	TustinNum.coef[1] = -2/Ts;
 8000f2a:	4b68      	ldr	r3, [pc, #416]	; (80010cc <DSP_C2D+0x1c4>)
 8000f2c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

	TustinDenom.degree = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
	TustinDenom.coef[0] = 1;
 8000f36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	TustinDenom.coef[1] = 1;
 8000f3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	DSP_Polynom_tst InterPolynom6;




	switch (Algo)
 8000f46:	f897 3260 	ldrb.w	r3, [r7, #608]	; 0x260
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <DSP_C2D+0x4a>
 8000f4e:	2b01      	cmp	r3, #1

	}break;
	case DSP_ZoH:
	{
		/* Under construction */
	}break;
 8000f50:	e254      	b.n	80013fc <DSP_C2D+0x4f4>
		DiscTF->num.degree = ContTF.num.degree;
 8000f52:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 8000f56:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8000f5a:	701a      	strb	r2, [r3, #0]
		for (int8_t i = 0 ; i < ContTF.num.degree + 1 ; i++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8000f62:	e0a4      	b.n	80010ae <DSP_C2D+0x1a6>
			DSP_PolynomInit(&InterPolynom1);
 8000f64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fc9b 	bl	80008a4 <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom2);
 8000f6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fc96 	bl	80008a4 <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom3);
 8000f78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fc91 	bl	80008a4 <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom4);
 8000f82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fc8c 	bl	80008a4 <DSP_PolynomInit>
			DSP_PowPolynom(TustinNum, ContTF.num.degree - i, &InterPolynom1);
 8000f8c:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 8000f90:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8000f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8000f9e:	9308      	str	r3, [sp, #32]
 8000fa0:	466d      	mov	r5, sp
 8000fa2:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000fb2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8000fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb8:	f7ff feef 	bl	8000d9a <DSP_PowPolynom>
			DSP_PowPolynom(TustinDenom, i, &InterPolynom2);
 8000fbc:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000fc0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8000fc6:	9308      	str	r3, [sp, #32]
 8000fc8:	466d      	mov	r5, sp
 8000fca:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8000fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fd6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000fda:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe0:	f7ff fedb 	bl	8000d9a <DSP_PowPolynom>
			DSP_MulPolynom(InterPolynom1, InterPolynom2, &InterPolynom3);
 8000fe4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe8:	9314      	str	r3, [sp, #80]	; 0x50
 8000fea:	ad08      	add	r5, sp, #32
 8000fec:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8000ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ffc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001000:	466d      	mov	r5, sp
 8001002:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8001006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800100e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001012:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	f7ff fded 	bl	8000bf6 <DSP_MulPolynom>
			DSP_MulScalarPolynom(ContTF.num.coef[ContTF.num.degree - i], InterPolynom3, &InterPolynom4);
 800101c:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8001020:	461a      	mov	r2, r3
 8001022:	f997 318f 	ldrsb.w	r3, [r7, #399]	; 0x18f
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800102e:	f107 0208 	add.w	r2, r7, #8
 8001032:	4413      	add	r3, r2
 8001034:	3304      	adds	r3, #4
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800103e:	9308      	str	r3, [sp, #32]
 8001040:	466d      	mov	r5, sp
 8001042:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800104e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001052:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	f7ff fe2d 	bl	8000cba <DSP_MulScalarPolynom>
			DSP_SumPolynom(InterPolynom4, DiscTF->num , &DiscTF->num);
 8001060:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001064:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8001068:	f5a2 7692 	sub.w	r6, r2, #292	; 0x124
 800106c:	9314      	str	r3, [sp, #80]	; 0x50
 800106e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001072:	ac08      	add	r4, sp, #32
 8001074:	461d      	mov	r5, r3
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001086:	466d      	mov	r5, sp
 8001088:	f106 0410 	add.w	r4, r6, #16
 800108c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001090:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001094:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001098:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800109c:	f7ff fd45 	bl	8000b2a <DSP_SumPolynom>
		for (int8_t i = 0 ; i < ContTF.num.degree + 1 ; i++)
 80010a0:	f997 318f 	ldrsb.w	r3, [r7, #399]	; 0x18f
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	3301      	adds	r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 80010ae:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 80010b2:	461a      	mov	r2, r3
 80010b4:	f997 318f 	ldrsb.w	r3, [r7, #399]	; 0x18f
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f6bf af53 	bge.w	8000f64 <DSP_C2D+0x5c>
		for (int8_t i = 0 ; i < ContTF.denom.degree + 1 ; i++)
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 80010c4:	e0ac      	b.n	8001220 <DSP_C2D+0x318>
 80010c6:	bf00      	nop
 80010c8:	43480000 	.word	0x43480000
 80010cc:	c3480000 	.word	0xc3480000
			DSP_PolynomInit(&InterPolynom1);
 80010d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fbe5 	bl	80008a4 <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom2);
 80010da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fbe0 	bl	80008a4 <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom3);
 80010e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fbdb 	bl	80008a4 <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom4);
 80010ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fbd6 	bl	80008a4 <DSP_PolynomInit>
			DSP_PowPolynom(TustinNum, ContTF.denom.degree - i, &InterPolynom1);
 80010f8:	f897 21d8 	ldrb.w	r2, [r7, #472]	; 0x1d8
 80010fc:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8001108:	9209      	str	r2, [sp, #36]	; 0x24
 800110a:	9308      	str	r3, [sp, #32]
 800110c:	466d      	mov	r5, sp
 800110e:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8001112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001116:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800111a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800111e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001124:	f7ff fe39 	bl	8000d9a <DSP_PowPolynom>
			DSP_PowPolynom(TustinDenom, i, &InterPolynom2);
 8001128:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 800112c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001130:	9209      	str	r2, [sp, #36]	; 0x24
 8001132:	9308      	str	r3, [sp, #32]
 8001134:	466d      	mov	r5, sp
 8001136:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 800113a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001142:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001146:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800114a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114c:	f7ff fe25 	bl	8000d9a <DSP_PowPolynom>
			DSP_MulPolynom(InterPolynom1, InterPolynom2, &InterPolynom3);
 8001150:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001154:	9314      	str	r3, [sp, #80]	; 0x50
 8001156:	ad08      	add	r5, sp, #32
 8001158:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 800115c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001168:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800116c:	466d      	mov	r5, sp
 800116e:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8001172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001176:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800117a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800117e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001184:	f7ff fd37 	bl	8000bf6 <DSP_MulPolynom>
			DSP_MulScalarPolynom(ContTF.denom.coef[ContTF.denom.degree - i], InterPolynom3, &InterPolynom4);
 8001188:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 800118c:	461a      	mov	r2, r3
 800118e:	f997 318e 	ldrsb.w	r3, [r7, #398]	; 0x18e
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	330c      	adds	r3, #12
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800119c:	f107 0208 	add.w	r2, r7, #8
 80011a0:	4413      	add	r3, r2
 80011a2:	3304      	adds	r3, #4
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011ac:	9308      	str	r3, [sp, #32]
 80011ae:	466d      	mov	r5, sp
 80011b0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80011b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	f7ff fd76 	bl	8000cba <DSP_MulScalarPolynom>
			DSP_SumPolynom(InterPolynom4, DiscTF->denom , &DiscTF->denom);
 80011ce:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80011d2:	3330      	adds	r3, #48	; 0x30
 80011d4:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80011d8:	f5a2 7692 	sub.w	r6, r2, #292	; 0x124
 80011dc:	9314      	str	r3, [sp, #80]	; 0x50
 80011de:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80011e2:	ad08      	add	r5, sp, #32
 80011e4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80011e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011f8:	466d      	mov	r5, sp
 80011fa:	f106 0410 	add.w	r4, r6, #16
 80011fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001202:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001206:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800120a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800120e:	f7ff fc8c 	bl	8000b2a <DSP_SumPolynom>
		for (int8_t i = 0 ; i < ContTF.denom.degree + 1 ; i++)
 8001212:	f997 318e 	ldrsb.w	r3, [r7, #398]	; 0x18e
 8001216:	b2db      	uxtb	r3, r3
 8001218:	3301      	adds	r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8001220:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8001224:	461a      	mov	r2, r3
 8001226:	f997 318e 	ldrsb.w	r3, [r7, #398]	; 0x18e
 800122a:	429a      	cmp	r2, r3
 800122c:	f6bf af50 	bge.w	80010d0 <DSP_C2D+0x1c8>
		DSP_PolynomInit(&InterPolynom5);
 8001230:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fb35 	bl	80008a4 <DSP_PolynomInit>
		DSP_PolynomInit(&InterPolynom6);
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fb30 	bl	80008a4 <DSP_PolynomInit>
		if (ContTF.num.degree > ContTF.denom.degree)
 8001244:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 8001248:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 800124c:	429a      	cmp	r2, r3
 800124e:	d94f      	bls.n	80012f0 <DSP_C2D+0x3e8>
			DSP_PowPolynom(TustinDenom, ContTF.num.degree-ContTF.denom.degree, &InterPolynom5);
 8001250:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 8001254:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001260:	9209      	str	r2, [sp, #36]	; 0x24
 8001262:	9308      	str	r3, [sp, #32]
 8001264:	466d      	mov	r5, sp
 8001266:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 800126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001272:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001276:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800127a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127c:	f7ff fd8d 	bl	8000d9a <DSP_PowPolynom>
			DSP_MulPolynom(DiscTF->denom, InterPolynom5, &InterPolynom6);
 8001280:	f8d7 625c 	ldr.w	r6, [r7, #604]	; 0x25c
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	9314      	str	r3, [sp, #80]	; 0x50
 800128a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800128e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001292:	ac08      	add	r4, sp, #32
 8001294:	461d      	mov	r5, r3
 8001296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012a6:	466d      	mov	r5, sp
 80012a8:	f106 0440 	add.w	r4, r6, #64	; 0x40
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80012b8:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80012bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012be:	f7ff fc9a 	bl	8000bf6 <DSP_MulPolynom>
			DSP_CpyPolynom(&DiscTF->denom, InterPolynom6);
 80012c2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80012c6:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 80012ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012ce:	f5a3 76c2 	sub.w	r6, r3, #388	; 0x184
 80012d2:	466d      	mov	r5, sp
 80012d4:	f106 040c 	add.w	r4, r6, #12
 80012d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	602b      	str	r3, [r5, #0]
 80012e4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80012e8:	4660      	mov	r0, ip
 80012ea:	f7ff fdc1 	bl	8000e70 <DSP_CpyPolynom>
 80012ee:	e052      	b.n	8001396 <DSP_C2D+0x48e>
		else if (ContTF.num.degree < ContTF.denom.degree)
 80012f0:	f897 21a8 	ldrb.w	r2, [r7, #424]	; 0x1a8
 80012f4:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d24c      	bcs.n	8001396 <DSP_C2D+0x48e>
			DSP_PowPolynom(TustinDenom, ContTF.denom.degree-ContTF.num.degree, &InterPolynom5);
 80012fc:	f897 21d8 	ldrb.w	r2, [r7, #472]	; 0x1d8
 8001300:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800130c:	9209      	str	r2, [sp, #36]	; 0x24
 800130e:	9308      	str	r3, [sp, #32]
 8001310:	466d      	mov	r5, sp
 8001312:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800131e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001322:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001328:	f7ff fd37 	bl	8000d9a <DSP_PowPolynom>
			DSP_MulPolynom(DiscTF->num, InterPolynom5, &InterPolynom6);
 800132c:	f8d7 625c 	ldr.w	r6, [r7, #604]	; 0x25c
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	9314      	str	r3, [sp, #80]	; 0x50
 8001336:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800133a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800133e:	ac08      	add	r4, sp, #32
 8001340:	461d      	mov	r5, r3
 8001342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800134e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001352:	466d      	mov	r5, sp
 8001354:	f106 0410 	add.w	r4, r6, #16
 8001358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800135c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001360:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001364:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001368:	f7ff fc45 	bl	8000bf6 <DSP_MulPolynom>
			DSP_CpyPolynom(&DiscTF->num, InterPolynom6);
 800136c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001376:	f5a3 76c2 	sub.w	r6, r3, #388	; 0x184
 800137a:	466d      	mov	r5, sp
 800137c:	f106 040c 	add.w	r4, r6, #12
 8001380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	602b      	str	r3, [r5, #0]
 800138c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fd6d 	bl	8000e70 <DSP_CpyPolynom>
		DSP_DevideScalarPolynom(DiscTF->denom.coef[0], DiscTF->num, &DiscTF->num);
 8001396:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800139a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800139e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80013a2:	f8d7 625c 	ldr.w	r6, [r7, #604]	; 0x25c
 80013a6:	9308      	str	r3, [sp, #32]
 80013a8:	466d      	mov	r5, sp
 80013aa:	f106 0410 	add.w	r4, r6, #16
 80013ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	f7ff fcb2 	bl	8000d2a <DSP_DevideScalarPolynom>
		DSP_DevideScalarPolynom(DiscTF->denom.coef[0], DiscTF->denom, &DiscTF->denom);
 80013c6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80013ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80013ce:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80013d2:	3330      	adds	r3, #48	; 0x30
 80013d4:	f8d7 625c 	ldr.w	r6, [r7, #604]	; 0x25c
 80013d8:	9308      	str	r3, [sp, #32]
 80013da:	466d      	mov	r5, sp
 80013dc:	f106 0440 	add.w	r4, r6, #64	; 0x40
 80013e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013ec:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80013f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	f7ff fc98 	bl	8000d2a <DSP_DevideScalarPolynom>
	}break;
 80013fa:	bf00      	nop
	default:
	{

	}
	}
	return Return;
 80013fc:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d

}
 8001400:	4618      	mov	r0, r3
 8001402:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8001406:	46bd      	mov	sp, r7
 8001408:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800140c:	b004      	add	sp, #16
 800140e:	4770      	bx	lr

08001410 <DSP_vGenerateSignal>:



void DSP_vGenerateSignal(DSP_TF_tst* tf)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	if (tf->num.degree > tf->denom.degree)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001422:	429a      	cmp	r2, r3
 8001424:	d905      	bls.n	8001432 <DSP_vGenerateSignal+0x22>
	{
		tf->k = tf->num.degree;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001430:	e013      	b.n	800145a <DSP_vGenerateSignal+0x4a>
	}
	else if (tf->num.degree < tf->denom.degree)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800143c:	429a      	cmp	r2, r3
 800143e:	d206      	bcs.n	800144e <DSP_vGenerateSignal+0x3e>
	{
		tf->k = tf->denom.degree;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800144c:	e005      	b.n	800145a <DSP_vGenerateSignal+0x4a>
	}
	else
	{
		tf->k = tf->denom.degree;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}

	tf->U[tf->k] = 10;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	3322      	adds	r3, #34	; 0x22
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <DSP_vGenerateSignal+0x6c>)
 800146c:	601a      	str	r2, [r3, #0]
	//HAL_TIM_Base_Start_IT(&htim6);
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	41200000 	.word	0x41200000

08001480 <DSP_fRecurringEquationRoutine>:

float DSP_fRecurringEquationRoutine(DSP_TF_tst* tf)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	float output = 0.0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]

	tf->Y[tf->k] = tf->num.coef[0] * tf->U[tf->k];
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed93 7a01 	vldr	s14, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	3322      	adds	r3, #34	; 0x22
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3304      	adds	r3, #4
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	3318      	adds	r3, #24
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3304      	adds	r3, #4
 80014bc:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 1; i < tf->k + 1  ; i++)
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e047      	b.n	8001556 <DSP_fRecurringEquationRoutine+0xd6>
	{
		tf->Y[tf->k] += tf->num.coef[i] * tf->U[tf->k-i] - tf->denom.coef[i] * tf->Y[tf->k-i] ;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	3318      	adds	r3, #24
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	3304      	adds	r3, #4
 80014e4:	edd3 6a00 	vldr	s13, [r3]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80014ee:	461a      	mov	r2, r3
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	3322      	adds	r3, #34	; 0x22
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3304      	adds	r3, #4
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	330c      	adds	r3, #12
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3304      	adds	r3, #4
 8001512:	ed93 6a00 	vldr	s12, [r3]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800151c:	461a      	mov	r2, r3
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	3318      	adds	r3, #24
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3304      	adds	r3, #4
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001534:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800153e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	3318      	adds	r3, #24
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3304      	adds	r3, #4
 800154c:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 1; i < tf->k + 1  ; i++)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	3301      	adds	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	429a      	cmp	r2, r3
 8001560:	d9b1      	bls.n	80014c6 <DSP_fRecurringEquationRoutine+0x46>
	}

	output = tf->Y[tf->k];
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	3318      	adds	r3, #24
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3304      	adds	r3, #4
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60bb      	str	r3, [r7, #8]

	for (int8_t j = tf->k-1 ; j >= 0 ; j--)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800157c:	3b01      	subs	r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	73bb      	strb	r3, [r7, #14]
 8001582:	e03a      	b.n	80015fa <DSP_fRecurringEquationRoutine+0x17a>
	{
		tf->Y[tf->k-j-1] = tf->Y[tf->k-j];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800158a:	461a      	mov	r2, r3
 800158c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001590:	1ad2      	subs	r2, r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001598:	4619      	mov	r1, r3
 800159a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800159e:	1acb      	subs	r3, r1, r3
 80015a0:	3b01      	subs	r3, #1
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	3218      	adds	r2, #24
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	440a      	add	r2, r1
 80015aa:	3204      	adds	r2, #4
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	3318      	adds	r3, #24
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3304      	adds	r3, #4
 80015b8:	601a      	str	r2, [r3, #0]
		tf->U[tf->k-1-j] = tf->U[tf->k-j];
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80015c0:	461a      	mov	r2, r3
 80015c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80015ce:	1e59      	subs	r1, r3, #1
 80015d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015d4:	1acb      	subs	r3, r1, r3
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	3222      	adds	r2, #34	; 0x22
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	440a      	add	r2, r1
 80015de:	3204      	adds	r2, #4
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	3322      	adds	r3, #34	; 0x22
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3304      	adds	r3, #4
 80015ec:	601a      	str	r2, [r3, #0]
	for (int8_t j = tf->k-1 ; j >= 0 ; j--)
 80015ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	73bb      	strb	r3, [r7, #14]
 80015fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dac0      	bge.n	8001584 <DSP_fRecurringEquationRoutine+0x104>
	}

	return output;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	ee07 3a90 	vmov	s15, r3
}
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b0ad      	sub	sp, #180	; 0xb4
 800161c:	af2c      	add	r7, sp, #176	; 0xb0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f000 fa55 	bl	8001acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 f833 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM6_Init();
 8001626:	f000 f89b 	bl	8001760 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Return = DSP_CreateTransferFunction(polynom1, polynom2, &DSP_ContinuousTF_st);
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <main+0x5c>)
 800162c:	4912      	ldr	r1, [pc, #72]	; (8001678 <main+0x60>)
 800162e:	4813      	ldr	r0, [pc, #76]	; (800167c <main+0x64>)
 8001630:	f7ff fc4f 	bl	8000ed2 <DSP_CreateTransferFunction>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <main+0x68>)
 800163a:	701a      	strb	r2, [r3, #0]
  Return = DSP_C2D(DSP_ContinuousTF_st, &DSP_DiscreteTF_st, DSP_Tustin);
 800163c:	4c0d      	ldr	r4, [pc, #52]	; (8001674 <main+0x5c>)
 800163e:	2300      	movs	r3, #0
 8001640:	932a      	str	r3, [sp, #168]	; 0xa8
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <main+0x6c>)
 8001644:	9329      	str	r3, [sp, #164]	; 0xa4
 8001646:	4668      	mov	r0, sp
 8001648:	f104 0310 	add.w	r3, r4, #16
 800164c:	22a4      	movs	r2, #164	; 0xa4
 800164e:	4619      	mov	r1, r3
 8001650:	f001 ff2e 	bl	80034b0 <memcpy>
 8001654:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001658:	f7ff fc56 	bl	8000f08 <DSP_C2D>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <main+0x68>)
 8001662:	701a      	strb	r2, [r3, #0]
  DSP_vGenerateSignal(&DSP_DiscreteTF_st);
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <main+0x6c>)
 8001666:	f7ff fed3 	bl	8001410 <DSP_vGenerateSignal>

  HAL_TIM_Base_Start_IT(&htim6);
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <main+0x70>)
 800166c:	f001 fbec 	bl	8002e48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x58>
 8001672:	bf00      	nop
 8001674:	24000258 	.word	0x24000258
 8001678:	2400000c 	.word	0x2400000c
 800167c:	24000008 	.word	0x24000008
 8001680:	240003c4 	.word	0x240003c4
 8001684:	2400030c 	.word	0x2400030c
 8001688:	2400020c 	.word	0x2400020c

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b09c      	sub	sp, #112	; 0x70
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	224c      	movs	r2, #76	; 0x4c
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f001 ff16 	bl	80034cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2220      	movs	r2, #32
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 ff10 	bl	80034cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80016ac:	2004      	movs	r0, #4
 80016ae:	f000 fbbb 	bl	8001e28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <SystemClock_Config+0xcc>)
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	4a27      	ldr	r2, [pc, #156]	; (8001758 <SystemClock_Config+0xcc>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <SystemClock_Config+0xcc>)
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <SystemClock_Config+0xd0>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <SystemClock_Config+0xd0>)
 80016d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <SystemClock_Config+0xd0>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016e8:	bf00      	nop
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <SystemClock_Config+0xd0>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f6:	d1f8      	bne.n	80016ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f8:	2302      	movs	r3, #2
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001700:	2340      	movs	r3, #64	; 0x40
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fbe5 	bl	8001edc <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001718:	f000 f86c 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	233f      	movs	r3, #63	; 0x3f
 800171e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fff9 	bl	8002738 <HAL_RCC_ClockConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800174c:	f000 f852 	bl	80017f4 <Error_Handler>
  }
}
 8001750:	bf00      	nop
 8001752:	3770      	adds	r7, #112	; 0x70
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	58000400 	.word	0x58000400
 800175c:	58024800 	.word	0x58024800

08001760 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_TIM6_Init+0x64>)
 8001772:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <MX_TIM6_Init+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_TIM6_Init+0x64>)
 8001778:	2209      	movs	r2, #9
 800177a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_TIM6_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_TIM6_Init+0x64>)
 8001784:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001788:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_TIM6_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <MX_TIM6_Init+0x64>)
 8001792:	f001 fb01 	bl	8002d98 <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800179c:	f000 f82a 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_TIM6_Init+0x64>)
 80017ae:	f001 fda5 	bl	80032fc <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80017b8:	f000 f81c 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2400020c 	.word	0x2400020c
 80017c8:	40001000 	.word	0x40001000

080017cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	output = DSP_fRecurringEquationRoutine(&DSP_DiscreteTF_st);
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017d6:	f7ff fe53 	bl	8001480 <DSP_fRecurringEquationRoutine>
 80017da:	eef0 7a40 	vmov.f32	s15, s0
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2400030c 	.word	0x2400030c
 80017f0:	240003c0 	.word	0x240003c0

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_MspInit+0x30>)
 8001808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x30>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x30>)
 8001818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58024400 	.word	0x58024400

08001834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_TIM_Base_MspInit+0x48>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d116      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_TIM_Base_MspInit+0x4c>)
 8001848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184c:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <HAL_TIM_Base_MspInit+0x4c>)
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_TIM_Base_MspInit+0x4c>)
 8001858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2036      	movs	r0, #54	; 0x36
 800186a:	f000 faa8 	bl	8001dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800186e:	2036      	movs	r0, #54	; 0x36
 8001870:	f000 fabf 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40001000 	.word	0x40001000
 8001880:	58024400 	.word	0x58024400

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 f96e 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TIM6_DAC_IRQHandler+0x10>)
 80018de:	f001 fb2b 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2400020c 	.word	0x2400020c

080018ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_kill>:

int _kill(int pid, int sig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001906:	f001 fda9 	bl	800345c <__errno>
 800190a:	4603      	mov	r3, r0
 800190c:	2216      	movs	r2, #22
 800190e:	601a      	str	r2, [r3, #0]
	return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_exit>:

void _exit (int status)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffe7 	bl	80018fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800192e:	e7fe      	b.n	800192e <_exit+0x12>

08001930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e00a      	b.n	8001958 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001942:	f3af 8000 	nop.w
 8001946:	4601      	mov	r1, r0
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	b2ca      	uxtb	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf0      	blt.n	8001942 <_read+0x12>
	}

return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e009      	b.n	8001990 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf1      	blt.n	800197c <_write+0x12>
	}
	return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_close>:

int _close(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ca:	605a      	str	r2, [r3, #4]
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_isatty>:

int _isatty(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f001 fd0e 	bl	800345c <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	24080000 	.word	0x24080000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	240003c8 	.word	0x240003c8
 8001a74:	240003e0 	.word	0x240003e0

08001a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a7c:	f7fe fe7c 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a82:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a98:	4c0a      	ldr	r4, [pc, #40]	; (8001ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f001 fcdf 	bl	8003468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aaa:	f7ff fdb5 	bl	8001618 <main>
  bx  lr
 8001aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ab4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ab8:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8001abc:	0800660c 	.word	0x0800660c
  ldr r2, =_sbss
 8001ac0:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8001ac4:	240003e0 	.word	0x240003e0

08001ac8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC3_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f000 f968 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ad8:	f000 ffe4 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_Init+0x68>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	4913      	ldr	r1, [pc, #76]	; (8001b38 <HAL_Init+0x6c>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_Init+0x68>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_Init+0x6c>)
 8001b00:	5cd3      	ldrb	r3, [r2, r3]
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <HAL_Init+0x70>)
 8001b0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_Init+0x74>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b16:	200f      	movs	r0, #15
 8001b18:	f000 f814 	bl	8001b44 <HAL_InitTick>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e002      	b.n	8001b2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b26:	f7ff fe6b 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	58024400 	.word	0x58024400
 8001b38:	080061c8 	.word	0x080061c8
 8001b3c:	24000004 	.word	0x24000004
 8001b40:	24000000 	.word	0x24000000

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_InitTick+0x60>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e021      	b.n	8001b9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_InitTick+0x64>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_InitTick+0x60>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f94d 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f917 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_InitTick+0x68>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	24000018 	.word	0x24000018
 8001ba8:	24000000 	.word	0x24000000
 8001bac:	24000014 	.word	0x24000014

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	24000018 	.word	0x24000018
 8001bd4:	240003cc 	.word	0x240003cc

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	240003cc 	.word	0x240003cc

08001bf0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetREVID+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	5c001000 	.word	0x5c001000

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <__NVIC_SetPriorityGrouping+0x40>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x40>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00
 8001c4c:	05fa0000 	.word	0x05fa0000

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff29 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff40 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff90 	bl	8001cfc <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5f 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff33 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa4 	bl	8001d64 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	d00a      	beq.n	8001e52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e040      	b.n	8001ed0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e03e      	b.n	8001ed0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e5a:	491f      	ldr	r1, [pc, #124]	; (8001ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e62:	f7ff feb9 	bl	8001bd8 <HAL_GetTick>
 8001e66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e68:	e009      	b.n	8001e7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e6a:	f7ff feb5 	bl	8001bd8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e78:	d901      	bls.n	8001e7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e028      	b.n	8001ed0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b1e      	cmp	r3, #30
 8001e90:	d008      	beq.n	8001ea4 <HAL_PWREx_ConfigSupply+0x7c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b2e      	cmp	r3, #46	; 0x2e
 8001e96:	d005      	beq.n	8001ea4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b1d      	cmp	r3, #29
 8001e9c:	d002      	beq.n	8001ea4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ea2:	d114      	bne.n	8001ece <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ea4:	f7ff fe98 	bl	8001bd8 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001eaa:	e009      	b.n	8001ec0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001eac:	f7ff fe94 	bl	8001bd8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eba:	d901      	bls.n	8001ec0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e007      	b.n	8001ed0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d1ee      	bne.n	8001eac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	58024800 	.word	0x58024800

08001edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	; 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f000 bc1d 	b.w	800272a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8087 	beq.w	800200c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efe:	4b99      	ldr	r3, [pc, #612]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f08:	4b96      	ldr	r3, [pc, #600]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	2b10      	cmp	r3, #16
 8001f12:	d007      	beq.n	8001f24 <HAL_RCC_OscConfig+0x48>
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	2b18      	cmp	r3, #24
 8001f18:	d110      	bne.n	8001f3c <HAL_RCC_OscConfig+0x60>
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d10b      	bne.n	8001f3c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	4b8f      	ldr	r3, [pc, #572]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d06c      	beq.n	800200a <HAL_RCC_OscConfig+0x12e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d168      	bne.n	800200a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e3f6      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_OscConfig+0x78>
 8001f46:	4b87      	ldr	r3, [pc, #540]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a86      	ldr	r2, [pc, #536]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e02e      	b.n	8001fb2 <HAL_RCC_OscConfig+0xd6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x9a>
 8001f5c:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a80      	ldr	r2, [pc, #512]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b7e      	ldr	r3, [pc, #504]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a7d      	ldr	r2, [pc, #500]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	e01d      	b.n	8001fb2 <HAL_RCC_OscConfig+0xd6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0xbe>
 8001f80:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a77      	ldr	r2, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b75      	ldr	r3, [pc, #468]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a74      	ldr	r2, [pc, #464]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCC_OscConfig+0xd6>
 8001f9a:	4b72      	ldr	r3, [pc, #456]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a71      	ldr	r2, [pc, #452]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d013      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff fe0d 	bl	8001bd8 <HAL_GetTick>
 8001fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fe09 	bl	8001bd8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e3aa      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fd4:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0xe6>
 8001fe0:	e014      	b.n	800200c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe2:	f7ff fdf9 	bl	8001bd8 <HAL_GetTick>
 8001fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fea:	f7ff fdf5 	bl	8001bd8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b64      	cmp	r3, #100	; 0x64
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e396      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x10e>
 8002008:	e000      	b.n	800200c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80cb 	beq.w	80021b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b52      	ldr	r3, [pc, #328]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002022:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_RCC_OscConfig+0x164>
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	2b18      	cmp	r3, #24
 8002034:	d156      	bne.n	80020e4 <HAL_RCC_OscConfig+0x208>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d151      	bne.n	80020e4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002040:	4b48      	ldr	r3, [pc, #288]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x17c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e368      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002058:	4b42      	ldr	r3, [pc, #264]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 0219 	bic.w	r2, r3, #25
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	493f      	ldr	r1, [pc, #252]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800206a:	f7ff fdb5 	bl	8001bd8 <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff fdb1 	bl	8001bd8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e352      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002084:	4b37      	ldr	r3, [pc, #220]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	f7ff fdae 	bl	8001bf0 <HAL_GetREVID>
 8002094:	4603      	mov	r3, r0
 8002096:	f241 0203 	movw	r2, #4099	; 0x1003
 800209a:	4293      	cmp	r3, r2
 800209c:	d817      	bhi.n	80020ce <HAL_RCC_OscConfig+0x1f2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1dc>
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80020ae:	4a2d      	ldr	r2, [pc, #180]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b6:	e07b      	b.n	80021b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	031b      	lsls	r3, r3, #12
 80020c6:	4927      	ldr	r1, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020cc:	e070      	b.n	80021b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	061b      	lsls	r3, r3, #24
 80020dc:	4921      	ldr	r1, [pc, #132]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e2:	e065      	b.n	80021b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d048      	beq.n	800217e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 0219 	bic.w	r2, r3, #25
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	491a      	ldr	r1, [pc, #104]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff fd6b 	bl	8001bd8 <HAL_GetTick>
 8002102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002106:	f7ff fd67 	bl	8001bd8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e308      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	f7ff fd64 	bl	8001bf0 <HAL_GetREVID>
 8002128:	4603      	mov	r3, r0
 800212a:	f241 0203 	movw	r2, #4099	; 0x1003
 800212e:	4293      	cmp	r3, r2
 8002130:	d81a      	bhi.n	8002168 <HAL_RCC_OscConfig+0x28c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d108      	bne.n	800214c <HAL_RCC_OscConfig+0x270>
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	6053      	str	r3, [r2, #4]
 800214a:	e031      	b.n	80021b0 <HAL_RCC_OscConfig+0x2d4>
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	031b      	lsls	r3, r3, #12
 800215a:	4902      	ldr	r1, [pc, #8]	; (8002164 <HAL_RCC_OscConfig+0x288>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
 8002160:	e026      	b.n	80021b0 <HAL_RCC_OscConfig+0x2d4>
 8002162:	bf00      	nop
 8002164:	58024400 	.word	0x58024400
 8002168:	4b9a      	ldr	r3, [pc, #616]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	4997      	ldr	r1, [pc, #604]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e018      	b.n	80021b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b95      	ldr	r3, [pc, #596]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a94      	ldr	r2, [pc, #592]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff fd25 	bl	8001bd8 <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff fd21 	bl	8001bd8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e2c2      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021a4:	4b8b      	ldr	r3, [pc, #556]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a9 	beq.w	8002310 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021be:	4b85      	ldr	r3, [pc, #532]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021c8:	4b82      	ldr	r3, [pc, #520]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d007      	beq.n	80021e4 <HAL_RCC_OscConfig+0x308>
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b18      	cmp	r3, #24
 80021d8:	d13a      	bne.n	8002250 <HAL_RCC_OscConfig+0x374>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d135      	bne.n	8002250 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021e4:	4b7b      	ldr	r3, [pc, #492]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x320>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e296      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021fc:	f7ff fcf8 	bl	8001bf0 <HAL_GetREVID>
 8002200:	4603      	mov	r3, r0
 8002202:	f241 0203 	movw	r2, #4099	; 0x1003
 8002206:	4293      	cmp	r3, r2
 8002208:	d817      	bhi.n	800223a <HAL_RCC_OscConfig+0x35e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	2b20      	cmp	r3, #32
 8002210:	d108      	bne.n	8002224 <HAL_RCC_OscConfig+0x348>
 8002212:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800221a:	4a6e      	ldr	r2, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800221c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002220:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002222:	e075      	b.n	8002310 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002224:	4b6b      	ldr	r3, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	069b      	lsls	r3, r3, #26
 8002232:	4968      	ldr	r1, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002238:	e06a      	b.n	8002310 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800223a:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	061b      	lsls	r3, r3, #24
 8002248:	4962      	ldr	r1, [pc, #392]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800224a:	4313      	orrs	r3, r2
 800224c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800224e:	e05f      	b.n	8002310 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d042      	beq.n	80022de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002258:	4b5e      	ldr	r3, [pc, #376]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a5d      	ldr	r2, [pc, #372]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800225e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff fcb8 	bl	8001bd8 <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800226c:	f7ff fcb4 	bl	8001bd8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e255      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800227e:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800228a:	f7ff fcb1 	bl	8001bf0 <HAL_GetREVID>
 800228e:	4603      	mov	r3, r0
 8002290:	f241 0203 	movw	r2, #4099	; 0x1003
 8002294:	4293      	cmp	r3, r2
 8002296:	d817      	bhi.n	80022c8 <HAL_RCC_OscConfig+0x3ec>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	2b20      	cmp	r3, #32
 800229e:	d108      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3d6>
 80022a0:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022a8:	4a4a      	ldr	r2, [pc, #296]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80022aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022ae:	6053      	str	r3, [r2, #4]
 80022b0:	e02e      	b.n	8002310 <HAL_RCC_OscConfig+0x434>
 80022b2:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	069b      	lsls	r3, r3, #26
 80022c0:	4944      	ldr	r1, [pc, #272]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
 80022c6:	e023      	b.n	8002310 <HAL_RCC_OscConfig+0x434>
 80022c8:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	493f      	ldr	r1, [pc, #252]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	60cb      	str	r3, [r1, #12]
 80022dc:	e018      	b.n	8002310 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a3c      	ldr	r2, [pc, #240]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80022e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7ff fc75 	bl	8001bd8 <HAL_GetTick>
 80022ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022f2:	f7ff fc71 	bl	8001bd8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e212      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002304:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d036      	beq.n	800238a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d019      	beq.n	8002358 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002330:	f7ff fc52 	bl	8001bd8 <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff fc4e 	bl	8001bd8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1ef      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800234c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x45c>
 8002356:	e018      	b.n	800238a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800235a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7ff fc38 	bl	8001bd8 <HAL_GetTick>
 8002368:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff fc34 	bl	8001bd8 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1d5      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d039      	beq.n	800240a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80023a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023aa:	f7ff fc15 	bl	8001bd8 <HAL_GetTick>
 80023ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023b2:	f7ff fc11 	bl	8001bd8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1b2      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_OscConfig+0x4f8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4d6>
 80023d0:	e01b      	b.n	800240a <HAL_RCC_OscConfig+0x52e>
 80023d2:	bf00      	nop
 80023d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023d8:	4b9b      	ldr	r3, [pc, #620]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a9a      	ldr	r2, [pc, #616]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80023de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023e4:	f7ff fbf8 	bl	8001bd8 <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023ec:	f7ff fbf4 	bl	8001bd8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e195      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023fe:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8081 	beq.w	800251a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002418:	4b8c      	ldr	r3, [pc, #560]	; (800264c <HAL_RCC_OscConfig+0x770>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a8b      	ldr	r2, [pc, #556]	; (800264c <HAL_RCC_OscConfig+0x770>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002424:	f7ff fbd8 	bl	8001bd8 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7ff fbd4 	bl	8001bd8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e175      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800243e:	4b83      	ldr	r3, [pc, #524]	; (800264c <HAL_RCC_OscConfig+0x770>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x584>
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a7c      	ldr	r2, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	e02d      	b.n	80024bc <HAL_RCC_OscConfig+0x5e0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x5a6>
 8002468:	4b77      	ldr	r3, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a76      	ldr	r2, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	4b74      	ldr	r3, [pc, #464]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a73      	ldr	r2, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	e01c      	b.n	80024bc <HAL_RCC_OscConfig+0x5e0>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c8>
 800248a:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a6b      	ldr	r2, [pc, #428]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0x5e0>
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	4a67      	ldr	r2, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6713      	str	r3, [r2, #112]	; 0x70
 80024b0:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	4a64      	ldr	r2, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7ff fb88 	bl	8001bd8 <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7ff fb84 	bl	8001bd8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e123      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e2:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0ee      	beq.n	80024cc <HAL_RCC_OscConfig+0x5f0>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff fb72 	bl	8001bd8 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7ff fb6e 	bl	8001bd8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e10d      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ee      	bne.n	80024f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8102 	beq.w	8002728 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002524:	4b48      	ldr	r3, [pc, #288]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800252c:	2b18      	cmp	r3, #24
 800252e:	f000 80bd 	beq.w	80026ac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2b02      	cmp	r3, #2
 8002538:	f040 809e 	bne.w	8002678 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a41      	ldr	r2, [pc, #260]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7ff fb46 	bl	8001bd8 <HAL_GetTick>
 800254c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7ff fb42 	bl	8001bd8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0e3      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256e:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_OscConfig+0x774>)
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	430a      	orrs	r2, r1
 8002582:	4931      	ldr	r1, [pc, #196]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002584:	4313      	orrs	r3, r2
 8002586:	628b      	str	r3, [r1, #40]	; 0x28
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	3b01      	subs	r3, #1
 800258e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	3b01      	subs	r3, #1
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	b29b      	uxth	r3, r3
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	3b01      	subs	r3, #1
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	3b01      	subs	r3, #1
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025b8:	4923      	ldr	r1, [pc, #140]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	4a21      	ldr	r2, [pc, #132]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_OscConfig+0x778>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025d6:	00d2      	lsls	r2, r2, #3
 80025d8:	491b      	ldr	r1, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	f023 020c 	bic.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4917      	ldr	r1, [pc, #92]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	f023 0202 	bic.w	r2, r3, #2
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	4912      	ldr	r1, [pc, #72]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002618:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_RCC_OscConfig+0x76c>)
 8002638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7ff facb 	bl	8001bd8 <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002644:	e011      	b.n	800266a <HAL_RCC_OscConfig+0x78e>
 8002646:	bf00      	nop
 8002648:	58024400 	.word	0x58024400
 800264c:	58024800 	.word	0x58024800
 8002650:	fffffc0c 	.word	0xfffffc0c
 8002654:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002658:	f7ff fabe 	bl	8001bd8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e05f      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_RCC_OscConfig+0x858>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x77c>
 8002676:	e057      	b.n	8002728 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_RCC_OscConfig+0x858>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <HAL_RCC_OscConfig+0x858>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff faa8 	bl	8001bd8 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7ff faa4 	bl	8001bd8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e045      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_OscConfig+0x858>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x7b0>
 80026aa:	e03d      	b.n	8002728 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCC_OscConfig+0x858>)
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_OscConfig+0x858>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d031      	beq.n	8002724 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0203 	and.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d12a      	bne.n	8002724 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d122      	bne.n	8002724 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d11a      	bne.n	8002724 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	0a5b      	lsrs	r3, r3, #9
 80026f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d111      	bne.n	8002724 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d108      	bne.n	8002724 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0e1b      	lsrs	r3, r3, #24
 8002716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3730      	adds	r7, #48	; 0x30
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400

08002738 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e19c      	b.n	8002a86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b8a      	ldr	r3, [pc, #552]	; (8002978 <HAL_RCC_ClockConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d910      	bls.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b87      	ldr	r3, [pc, #540]	; (8002978 <HAL_RCC_ClockConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 020f 	bic.w	r2, r3, #15
 8002762:	4985      	ldr	r1, [pc, #532]	; (8002978 <HAL_RCC_ClockConfig+0x240>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b83      	ldr	r3, [pc, #524]	; (8002978 <HAL_RCC_ClockConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e184      	b.n	8002a86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d010      	beq.n	80027aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	4b7b      	ldr	r3, [pc, #492]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002794:	429a      	cmp	r2, r3
 8002796:	d908      	bls.n	80027aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002798:	4b78      	ldr	r3, [pc, #480]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4975      	ldr	r1, [pc, #468]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	4b70      	ldr	r3, [pc, #448]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d908      	bls.n	80027d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027c6:	4b6d      	ldr	r3, [pc, #436]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	496a      	ldr	r1, [pc, #424]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699a      	ldr	r2, [r3, #24]
 80027e8:	4b64      	ldr	r3, [pc, #400]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d908      	bls.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027f4:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	495e      	ldr	r1, [pc, #376]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002802:	4313      	orrs	r3, r2
 8002804:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800281e:	429a      	cmp	r2, r3
 8002820:	d908      	bls.n	8002834 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002822:	4b56      	ldr	r3, [pc, #344]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	4953      	ldr	r1, [pc, #332]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002830:	4313      	orrs	r3, r2
 8002832:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d010      	beq.n	8002862 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	4b4d      	ldr	r3, [pc, #308]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	429a      	cmp	r2, r3
 800284e:	d908      	bls.n	8002862 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f023 020f 	bic.w	r2, r3, #15
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4947      	ldr	r1, [pc, #284]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 800285e:	4313      	orrs	r3, r2
 8002860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d055      	beq.n	800291a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800286e:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4940      	ldr	r1, [pc, #256]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 800287c:	4313      	orrs	r3, r2
 800287e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d107      	bne.n	8002898 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002888:	4b3c      	ldr	r3, [pc, #240]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d121      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0f6      	b.n	8002a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d115      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0ea      	b.n	8002a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0de      	b.n	8002a86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0d6      	b.n	8002a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f023 0207 	bic.w	r2, r3, #7
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4925      	ldr	r1, [pc, #148]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7ff f975 	bl	8001bd8 <HAL_GetTick>
 80028ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7ff f971 	bl	8001bd8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e0be      	b.n	8002a86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	429a      	cmp	r2, r3
 8002918:	d1eb      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	429a      	cmp	r2, r3
 8002934:	d208      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f023 020f 	bic.w	r2, r3, #15
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_RCC_ClockConfig+0x244>)
 8002944:	4313      	orrs	r3, r2
 8002946:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_ClockConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d214      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_RCC_ClockConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 020f 	bic.w	r2, r3, #15
 800295e:	4906      	ldr	r1, [pc, #24]	; (8002978 <HAL_RCC_ClockConfig+0x240>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <HAL_RCC_ClockConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e086      	b.n	8002a86 <HAL_RCC_ClockConfig+0x34e>
 8002978:	52002000 	.word	0x52002000
 800297c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002998:	429a      	cmp	r2, r3
 800299a:	d208      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800299c:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	4939      	ldr	r1, [pc, #228]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d208      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	492e      	ldr	r1, [pc, #184]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d010      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d208      	bcs.n	8002a0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4922      	ldr	r1, [pc, #136]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d208      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4917      	ldr	r1, [pc, #92]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a38:	f000 f834 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	4912      	ldr	r1, [pc, #72]	; (8002a94 <HAL_RCC_ClockConfig+0x35c>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x358>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <HAL_RCC_ClockConfig+0x35c>)
 8002a60:	5cd3      	ldrb	r3, [r2, r3]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_RCC_ClockConfig+0x360>)
 8002a6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x364>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x368>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f862 	bl	8001b44 <HAL_InitTick>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	58024400 	.word	0x58024400
 8002a94:	080061c8 	.word	0x080061c8
 8002a98:	24000004 	.word	0x24000004
 8002a9c:	24000000 	.word	0x24000000
 8002aa0:	24000014 	.word	0x24000014

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aaa:	4bb3      	ldr	r3, [pc, #716]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab2:	2b18      	cmp	r3, #24
 8002ab4:	f200 8155 	bhi.w	8002d62 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002b25 	.word	0x08002b25
 8002ac4:	08002d63 	.word	0x08002d63
 8002ac8:	08002d63 	.word	0x08002d63
 8002acc:	08002d63 	.word	0x08002d63
 8002ad0:	08002d63 	.word	0x08002d63
 8002ad4:	08002d63 	.word	0x08002d63
 8002ad8:	08002d63 	.word	0x08002d63
 8002adc:	08002d63 	.word	0x08002d63
 8002ae0:	08002b4b 	.word	0x08002b4b
 8002ae4:	08002d63 	.word	0x08002d63
 8002ae8:	08002d63 	.word	0x08002d63
 8002aec:	08002d63 	.word	0x08002d63
 8002af0:	08002d63 	.word	0x08002d63
 8002af4:	08002d63 	.word	0x08002d63
 8002af8:	08002d63 	.word	0x08002d63
 8002afc:	08002d63 	.word	0x08002d63
 8002b00:	08002b51 	.word	0x08002b51
 8002b04:	08002d63 	.word	0x08002d63
 8002b08:	08002d63 	.word	0x08002d63
 8002b0c:	08002d63 	.word	0x08002d63
 8002b10:	08002d63 	.word	0x08002d63
 8002b14:	08002d63 	.word	0x08002d63
 8002b18:	08002d63 	.word	0x08002d63
 8002b1c:	08002d63 	.word	0x08002d63
 8002b20:	08002b57 	.word	0x08002b57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b24:	4b94      	ldr	r3, [pc, #592]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b30:	4b91      	ldr	r3, [pc, #580]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	4a90      	ldr	r2, [pc, #576]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002b42:	e111      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b44:	4b8d      	ldr	r3, [pc, #564]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b46:	61bb      	str	r3, [r7, #24]
    break;
 8002b48:	e10e      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b4a:	4b8d      	ldr	r3, [pc, #564]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b4c:	61bb      	str	r3, [r7, #24]
    break;
 8002b4e:	e10b      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002b50:	4b8c      	ldr	r3, [pc, #560]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b52:	61bb      	str	r3, [r7, #24]
    break;
 8002b54:	e108      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b56:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b60:	4b85      	ldr	r3, [pc, #532]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b6c:	4b82      	ldr	r3, [pc, #520]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b76:	4b80      	ldr	r3, [pc, #512]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	08db      	lsrs	r3, r3, #3
 8002b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80e1 	beq.w	8002d5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	f000 8083 	beq.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x204>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	f200 80a1 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x248>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x114>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d056      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002bb6:	e099      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bb8:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02d      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bc4:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	4a6b      	ldr	r2, [pc, #428]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bee:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002c1e:	e087      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c32:	4b51      	ldr	r3, [pc, #324]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c62:	e065      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002d90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c76:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ca6:	e043      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002d94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cba:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cea:	e021      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002d90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	0a5b      	lsrs	r3, r3, #9
 8002d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d54:	ee17 3a90 	vmov	r3, s15
 8002d58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002d5a:	e005      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
    break;
 8002d60:	e002      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d64:	61bb      	str	r3, [r7, #24]
    break;
 8002d66:	bf00      	nop
  }

  return sysclockfreq;
 8002d68:	69bb      	ldr	r3, [r7, #24]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	03d09000 	.word	0x03d09000
 8002d80:	003d0900 	.word	0x003d0900
 8002d84:	017d7840 	.word	0x017d7840
 8002d88:	46000000 	.word	0x46000000
 8002d8c:	4c742400 	.word	0x4c742400
 8002d90:	4a742400 	.word	0x4a742400
 8002d94:	4bbebc20 	.word	0x4bbebc20

08002d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e049      	b.n	8002e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fd38 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f000 f9f6 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d001      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e054      	b.n	8002f0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d022      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8a:	d01d      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d018      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d013      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_TIM_Base_Start_IT+0xe0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_TIM_Base_Start_IT+0xe4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_TIM_Base_Start_IT+0xe8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d115      	bne.n	8002ef4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_TIM_Base_Start_IT+0xec>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d015      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0xbe>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d011      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef2:	e008      	b.n	8002f06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e000      	b.n	8002f08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800
 8002f24:	40000c00 	.word	0x40000c00
 8002f28:	40010400 	.word	0x40010400
 8002f2c:	40001800 	.word	0x40001800
 8002f30:	40014000 	.word	0x40014000
 8002f34:	00010007 	.word	0x00010007

08002f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d122      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d11b      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0202 	mvn.w	r2, #2
 8002f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f905 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8f7 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f908 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0204 	mvn.w	r2, #4
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8db 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8cd 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f8de 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b08      	cmp	r3, #8
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0208 	mvn.w	r2, #8
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8b1 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8a3 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8b4 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b10      	cmp	r3, #16
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0210 	mvn.w	r2, #16
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2208      	movs	r2, #8
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f887 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f879 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f88a 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0201 	mvn.w	r2, #1
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe fb88 	bl	80017cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f9a2 	bl	800342c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f6:	d10e      	bne.n	8003116 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d107      	bne.n	8003116 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f995 	bl	8003440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d10e      	bne.n	8003142 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d107      	bne.n	8003142 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800313a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f838 	bl	80031b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b20      	cmp	r3, #32
 800314e:	d10e      	bne.n	800316e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b20      	cmp	r3, #32
 800315c:	d107      	bne.n	800316e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 0220 	mvn.w	r2, #32
 8003166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f955 	bl	8003418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a40      	ldr	r2, [pc, #256]	; (80032dc <TIM_Base_SetConfig+0x114>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d00f      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <TIM_Base_SetConfig+0x118>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <TIM_Base_SetConfig+0x11c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <TIM_Base_SetConfig+0x120>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3a      	ldr	r2, [pc, #232]	; (80032ec <TIM_Base_SetConfig+0x124>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d108      	bne.n	800321a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <TIM_Base_SetConfig+0x114>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01f      	beq.n	8003262 <TIM_Base_SetConfig+0x9a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d01b      	beq.n	8003262 <TIM_Base_SetConfig+0x9a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <TIM_Base_SetConfig+0x118>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d017      	beq.n	8003262 <TIM_Base_SetConfig+0x9a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <TIM_Base_SetConfig+0x11c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <TIM_Base_SetConfig+0x9a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <TIM_Base_SetConfig+0x120>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00f      	beq.n	8003262 <TIM_Base_SetConfig+0x9a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a29      	ldr	r2, [pc, #164]	; (80032ec <TIM_Base_SetConfig+0x124>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00b      	beq.n	8003262 <TIM_Base_SetConfig+0x9a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a28      	ldr	r2, [pc, #160]	; (80032f0 <TIM_Base_SetConfig+0x128>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d007      	beq.n	8003262 <TIM_Base_SetConfig+0x9a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <TIM_Base_SetConfig+0x12c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_Base_SetConfig+0x9a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <TIM_Base_SetConfig+0x130>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d108      	bne.n	8003274 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <TIM_Base_SetConfig+0x114>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00f      	beq.n	80032c0 <TIM_Base_SetConfig+0xf8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <TIM_Base_SetConfig+0x124>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00b      	beq.n	80032c0 <TIM_Base_SetConfig+0xf8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <TIM_Base_SetConfig+0x128>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <TIM_Base_SetConfig+0xf8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <TIM_Base_SetConfig+0x12c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0xf8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <TIM_Base_SetConfig+0x130>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	615a      	str	r2, [r3, #20]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40014400 	.word	0x40014400
 80032f8:	40014800 	.word	0x40014800

080032fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003310:	2302      	movs	r3, #2
 8003312:	e06d      	b.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a30      	ldr	r2, [pc, #192]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800334e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d022      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d01d      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d018      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1a      	ldr	r2, [pc, #104]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00e      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a15      	ldr	r2, [pc, #84]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a16      	ldr	r2, [pc, #88]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a15      	ldr	r2, [pc, #84]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10c      	bne.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40010000 	.word	0x40010000
 8003400:	40010400 	.word	0x40010400
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40000c00 	.word	0x40000c00
 8003410:	40001800 	.word	0x40001800
 8003414:	40014000 	.word	0x40014000

08003418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <atof>:
 8003454:	2100      	movs	r1, #0
 8003456:	f000 be25 	b.w	80040a4 <strtod>
	...

0800345c <__errno>:
 800345c:	4b01      	ldr	r3, [pc, #4]	; (8003464 <__errno+0x8>)
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2400001c 	.word	0x2400001c

08003468 <__libc_init_array>:
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	4d0d      	ldr	r5, [pc, #52]	; (80034a0 <__libc_init_array+0x38>)
 800346c:	4c0d      	ldr	r4, [pc, #52]	; (80034a4 <__libc_init_array+0x3c>)
 800346e:	1b64      	subs	r4, r4, r5
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	2600      	movs	r6, #0
 8003474:	42a6      	cmp	r6, r4
 8003476:	d109      	bne.n	800348c <__libc_init_array+0x24>
 8003478:	4d0b      	ldr	r5, [pc, #44]	; (80034a8 <__libc_init_array+0x40>)
 800347a:	4c0c      	ldr	r4, [pc, #48]	; (80034ac <__libc_init_array+0x44>)
 800347c:	f002 fe98 	bl	80061b0 <_init>
 8003480:	1b64      	subs	r4, r4, r5
 8003482:	10a4      	asrs	r4, r4, #2
 8003484:	2600      	movs	r6, #0
 8003486:	42a6      	cmp	r6, r4
 8003488:	d105      	bne.n	8003496 <__libc_init_array+0x2e>
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003490:	4798      	blx	r3
 8003492:	3601      	adds	r6, #1
 8003494:	e7ee      	b.n	8003474 <__libc_init_array+0xc>
 8003496:	f855 3b04 	ldr.w	r3, [r5], #4
 800349a:	4798      	blx	r3
 800349c:	3601      	adds	r6, #1
 800349e:	e7f2      	b.n	8003486 <__libc_init_array+0x1e>
 80034a0:	08006604 	.word	0x08006604
 80034a4:	08006604 	.word	0x08006604
 80034a8:	08006604 	.word	0x08006604
 80034ac:	08006608 	.word	0x08006608

080034b0 <memcpy>:
 80034b0:	440a      	add	r2, r1
 80034b2:	4291      	cmp	r1, r2
 80034b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034b8:	d100      	bne.n	80034bc <memcpy+0xc>
 80034ba:	4770      	bx	lr
 80034bc:	b510      	push	{r4, lr}
 80034be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034c6:	4291      	cmp	r1, r2
 80034c8:	d1f9      	bne.n	80034be <memcpy+0xe>
 80034ca:	bd10      	pop	{r4, pc}

080034cc <memset>:
 80034cc:	4402      	add	r2, r0
 80034ce:	4603      	mov	r3, r0
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d100      	bne.n	80034d6 <memset+0xa>
 80034d4:	4770      	bx	lr
 80034d6:	f803 1b01 	strb.w	r1, [r3], #1
 80034da:	e7f9      	b.n	80034d0 <memset+0x4>

080034dc <strncpy>:
 80034dc:	b510      	push	{r4, lr}
 80034de:	3901      	subs	r1, #1
 80034e0:	4603      	mov	r3, r0
 80034e2:	b132      	cbz	r2, 80034f2 <strncpy+0x16>
 80034e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80034e8:	f803 4b01 	strb.w	r4, [r3], #1
 80034ec:	3a01      	subs	r2, #1
 80034ee:	2c00      	cmp	r4, #0
 80034f0:	d1f7      	bne.n	80034e2 <strncpy+0x6>
 80034f2:	441a      	add	r2, r3
 80034f4:	2100      	movs	r1, #0
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d100      	bne.n	80034fc <strncpy+0x20>
 80034fa:	bd10      	pop	{r4, pc}
 80034fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003500:	e7f9      	b.n	80034f6 <strncpy+0x1a>

08003502 <sulp>:
 8003502:	b570      	push	{r4, r5, r6, lr}
 8003504:	4604      	mov	r4, r0
 8003506:	460d      	mov	r5, r1
 8003508:	4616      	mov	r6, r2
 800350a:	ec45 4b10 	vmov	d0, r4, r5
 800350e:	f001 fcc9 	bl	8004ea4 <__ulp>
 8003512:	b17e      	cbz	r6, 8003534 <sulp+0x32>
 8003514:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003518:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800351c:	2b00      	cmp	r3, #0
 800351e:	dd09      	ble.n	8003534 <sulp+0x32>
 8003520:	051b      	lsls	r3, r3, #20
 8003522:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8003526:	2000      	movs	r0, #0
 8003528:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800352c:	ec41 0b17 	vmov	d7, r0, r1
 8003530:	ee20 0b07 	vmul.f64	d0, d0, d7
 8003534:	bd70      	pop	{r4, r5, r6, pc}
	...

08003538 <_strtod_l>:
 8003538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353c:	ed2d 8b0e 	vpush	{d8-d14}
 8003540:	b097      	sub	sp, #92	; 0x5c
 8003542:	461f      	mov	r7, r3
 8003544:	2300      	movs	r3, #0
 8003546:	9312      	str	r3, [sp, #72]	; 0x48
 8003548:	4ba1      	ldr	r3, [pc, #644]	; (80037d0 <_strtod_l+0x298>)
 800354a:	920d      	str	r2, [sp, #52]	; 0x34
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	9307      	str	r3, [sp, #28]
 8003550:	4604      	mov	r4, r0
 8003552:	4618      	mov	r0, r3
 8003554:	468b      	mov	fp, r1
 8003556:	f7fc fec3 	bl	80002e0 <strlen>
 800355a:	f04f 0800 	mov.w	r8, #0
 800355e:	4605      	mov	r5, r0
 8003560:	f04f 0900 	mov.w	r9, #0
 8003564:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8003568:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800356a:	7813      	ldrb	r3, [r2, #0]
 800356c:	2b2b      	cmp	r3, #43	; 0x2b
 800356e:	d04d      	beq.n	800360c <_strtod_l+0xd4>
 8003570:	d83a      	bhi.n	80035e8 <_strtod_l+0xb0>
 8003572:	2b0d      	cmp	r3, #13
 8003574:	d833      	bhi.n	80035de <_strtod_l+0xa6>
 8003576:	2b08      	cmp	r3, #8
 8003578:	d833      	bhi.n	80035e2 <_strtod_l+0xaa>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03d      	beq.n	80035fa <_strtod_l+0xc2>
 800357e:	2300      	movs	r3, #0
 8003580:	9308      	str	r3, [sp, #32]
 8003582:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003584:	7833      	ldrb	r3, [r6, #0]
 8003586:	2b30      	cmp	r3, #48	; 0x30
 8003588:	f040 80b0 	bne.w	80036ec <_strtod_l+0x1b4>
 800358c:	7873      	ldrb	r3, [r6, #1]
 800358e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003592:	2b58      	cmp	r3, #88	; 0x58
 8003594:	d167      	bne.n	8003666 <_strtod_l+0x12e>
 8003596:	9b08      	ldr	r3, [sp, #32]
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	ab12      	add	r3, sp, #72	; 0x48
 800359c:	9702      	str	r7, [sp, #8]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4a8c      	ldr	r2, [pc, #560]	; (80037d4 <_strtod_l+0x29c>)
 80035a2:	ab13      	add	r3, sp, #76	; 0x4c
 80035a4:	a911      	add	r1, sp, #68	; 0x44
 80035a6:	4620      	mov	r0, r4
 80035a8:	f000 fdf0 	bl	800418c <__gethex>
 80035ac:	f010 0507 	ands.w	r5, r0, #7
 80035b0:	4607      	mov	r7, r0
 80035b2:	d005      	beq.n	80035c0 <_strtod_l+0x88>
 80035b4:	2d06      	cmp	r5, #6
 80035b6:	d12b      	bne.n	8003610 <_strtod_l+0xd8>
 80035b8:	3601      	adds	r6, #1
 80035ba:	2300      	movs	r3, #0
 80035bc:	9611      	str	r6, [sp, #68]	; 0x44
 80035be:	9308      	str	r3, [sp, #32]
 80035c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 854e 	bne.w	8004064 <_strtod_l+0xb2c>
 80035c8:	9b08      	ldr	r3, [sp, #32]
 80035ca:	b1e3      	cbz	r3, 8003606 <_strtod_l+0xce>
 80035cc:	ec49 8b17 	vmov	d7, r8, r9
 80035d0:	eeb1 0b47 	vneg.f64	d0, d7
 80035d4:	b017      	add	sp, #92	; 0x5c
 80035d6:	ecbd 8b0e 	vpop	{d8-d14}
 80035da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d1cd      	bne.n	800357e <_strtod_l+0x46>
 80035e2:	3201      	adds	r2, #1
 80035e4:	9211      	str	r2, [sp, #68]	; 0x44
 80035e6:	e7bf      	b.n	8003568 <_strtod_l+0x30>
 80035e8:	2b2d      	cmp	r3, #45	; 0x2d
 80035ea:	d1c8      	bne.n	800357e <_strtod_l+0x46>
 80035ec:	2301      	movs	r3, #1
 80035ee:	9308      	str	r3, [sp, #32]
 80035f0:	1c53      	adds	r3, r2, #1
 80035f2:	9311      	str	r3, [sp, #68]	; 0x44
 80035f4:	7853      	ldrb	r3, [r2, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1c3      	bne.n	8003582 <_strtod_l+0x4a>
 80035fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 852d 	bne.w	8004060 <_strtod_l+0xb28>
 8003606:	ec49 8b10 	vmov	d0, r8, r9
 800360a:	e7e3      	b.n	80035d4 <_strtod_l+0x9c>
 800360c:	2300      	movs	r3, #0
 800360e:	e7ee      	b.n	80035ee <_strtod_l+0xb6>
 8003610:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003612:	b13a      	cbz	r2, 8003624 <_strtod_l+0xec>
 8003614:	2135      	movs	r1, #53	; 0x35
 8003616:	a814      	add	r0, sp, #80	; 0x50
 8003618:	f001 fd4c 	bl	80050b4 <__copybits>
 800361c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800361e:	4620      	mov	r0, r4
 8003620:	f001 f90e 	bl	8004840 <_Bfree>
 8003624:	3d01      	subs	r5, #1
 8003626:	2d04      	cmp	r5, #4
 8003628:	d806      	bhi.n	8003638 <_strtod_l+0x100>
 800362a:	e8df f005 	tbb	[pc, r5]
 800362e:	030a      	.short	0x030a
 8003630:	1714      	.short	0x1714
 8003632:	0a          	.byte	0x0a
 8003633:	00          	.byte	0x00
 8003634:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8003638:	073f      	lsls	r7, r7, #28
 800363a:	d5c1      	bpl.n	80035c0 <_strtod_l+0x88>
 800363c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003640:	e7be      	b.n	80035c0 <_strtod_l+0x88>
 8003642:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8003646:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003648:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800364c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003650:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003654:	e7f0      	b.n	8003638 <_strtod_l+0x100>
 8003656:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80037d8 <_strtod_l+0x2a0>
 800365a:	e7ed      	b.n	8003638 <_strtod_l+0x100>
 800365c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003660:	f04f 38ff 	mov.w	r8, #4294967295
 8003664:	e7e8      	b.n	8003638 <_strtod_l+0x100>
 8003666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	9211      	str	r2, [sp, #68]	; 0x44
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	2b30      	cmp	r3, #48	; 0x30
 8003670:	d0f9      	beq.n	8003666 <_strtod_l+0x12e>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0a4      	beq.n	80035c0 <_strtod_l+0x88>
 8003676:	2301      	movs	r3, #1
 8003678:	f04f 0a00 	mov.w	sl, #0
 800367c:	9304      	str	r3, [sp, #16]
 800367e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003680:	930a      	str	r3, [sp, #40]	; 0x28
 8003682:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003686:	f8cd a018 	str.w	sl, [sp, #24]
 800368a:	220a      	movs	r2, #10
 800368c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800368e:	7807      	ldrb	r7, [r0, #0]
 8003690:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003694:	b2d9      	uxtb	r1, r3
 8003696:	2909      	cmp	r1, #9
 8003698:	d92a      	bls.n	80036f0 <_strtod_l+0x1b8>
 800369a:	9907      	ldr	r1, [sp, #28]
 800369c:	462a      	mov	r2, r5
 800369e:	f001 fe0f 	bl	80052c0 <strncmp>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d033      	beq.n	800370e <_strtod_l+0x1d6>
 80036a6:	2000      	movs	r0, #0
 80036a8:	9b06      	ldr	r3, [sp, #24]
 80036aa:	463a      	mov	r2, r7
 80036ac:	4601      	mov	r1, r0
 80036ae:	4607      	mov	r7, r0
 80036b0:	2a65      	cmp	r2, #101	; 0x65
 80036b2:	d001      	beq.n	80036b8 <_strtod_l+0x180>
 80036b4:	2a45      	cmp	r2, #69	; 0x45
 80036b6:	d117      	bne.n	80036e8 <_strtod_l+0x1b0>
 80036b8:	b91b      	cbnz	r3, 80036c2 <_strtod_l+0x18a>
 80036ba:	9b04      	ldr	r3, [sp, #16]
 80036bc:	4303      	orrs	r3, r0
 80036be:	d09c      	beq.n	80035fa <_strtod_l+0xc2>
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80036c6:	f10b 0201 	add.w	r2, fp, #1
 80036ca:	9211      	str	r2, [sp, #68]	; 0x44
 80036cc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80036d0:	2a2b      	cmp	r2, #43	; 0x2b
 80036d2:	d071      	beq.n	80037b8 <_strtod_l+0x280>
 80036d4:	2a2d      	cmp	r2, #45	; 0x2d
 80036d6:	d077      	beq.n	80037c8 <_strtod_l+0x290>
 80036d8:	f04f 0e00 	mov.w	lr, #0
 80036dc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80036e0:	2d09      	cmp	r5, #9
 80036e2:	d97f      	bls.n	80037e4 <_strtod_l+0x2ac>
 80036e4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80036e8:	2500      	movs	r5, #0
 80036ea:	e09b      	b.n	8003824 <_strtod_l+0x2ec>
 80036ec:	2300      	movs	r3, #0
 80036ee:	e7c3      	b.n	8003678 <_strtod_l+0x140>
 80036f0:	9906      	ldr	r1, [sp, #24]
 80036f2:	2908      	cmp	r1, #8
 80036f4:	bfdd      	ittte	le
 80036f6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80036f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80036fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80036fe:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8003702:	9b06      	ldr	r3, [sp, #24]
 8003704:	3001      	adds	r0, #1
 8003706:	3301      	adds	r3, #1
 8003708:	9306      	str	r3, [sp, #24]
 800370a:	9011      	str	r0, [sp, #68]	; 0x44
 800370c:	e7be      	b.n	800368c <_strtod_l+0x154>
 800370e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003710:	195a      	adds	r2, r3, r5
 8003712:	9211      	str	r2, [sp, #68]	; 0x44
 8003714:	5d5a      	ldrb	r2, [r3, r5]
 8003716:	9b06      	ldr	r3, [sp, #24]
 8003718:	b3a3      	cbz	r3, 8003784 <_strtod_l+0x24c>
 800371a:	4607      	mov	r7, r0
 800371c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003720:	2909      	cmp	r1, #9
 8003722:	d912      	bls.n	800374a <_strtod_l+0x212>
 8003724:	2101      	movs	r1, #1
 8003726:	e7c3      	b.n	80036b0 <_strtod_l+0x178>
 8003728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	9211      	str	r2, [sp, #68]	; 0x44
 800372e:	785a      	ldrb	r2, [r3, #1]
 8003730:	3001      	adds	r0, #1
 8003732:	2a30      	cmp	r2, #48	; 0x30
 8003734:	d0f8      	beq.n	8003728 <_strtod_l+0x1f0>
 8003736:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800373a:	2b08      	cmp	r3, #8
 800373c:	f200 8497 	bhi.w	800406e <_strtod_l+0xb36>
 8003740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003742:	930a      	str	r3, [sp, #40]	; 0x28
 8003744:	4607      	mov	r7, r0
 8003746:	2000      	movs	r0, #0
 8003748:	4603      	mov	r3, r0
 800374a:	3a30      	subs	r2, #48	; 0x30
 800374c:	f100 0101 	add.w	r1, r0, #1
 8003750:	d012      	beq.n	8003778 <_strtod_l+0x240>
 8003752:	440f      	add	r7, r1
 8003754:	eb00 0c03 	add.w	ip, r0, r3
 8003758:	4619      	mov	r1, r3
 800375a:	250a      	movs	r5, #10
 800375c:	4561      	cmp	r1, ip
 800375e:	d113      	bne.n	8003788 <_strtod_l+0x250>
 8003760:	1819      	adds	r1, r3, r0
 8003762:	2908      	cmp	r1, #8
 8003764:	f103 0301 	add.w	r3, r3, #1
 8003768:	4403      	add	r3, r0
 800376a:	dc1c      	bgt.n	80037a6 <_strtod_l+0x26e>
 800376c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800376e:	210a      	movs	r1, #10
 8003770:	fb01 2200 	mla	r2, r1, r0, r2
 8003774:	9209      	str	r2, [sp, #36]	; 0x24
 8003776:	2100      	movs	r1, #0
 8003778:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800377a:	1c50      	adds	r0, r2, #1
 800377c:	9011      	str	r0, [sp, #68]	; 0x44
 800377e:	7852      	ldrb	r2, [r2, #1]
 8003780:	4608      	mov	r0, r1
 8003782:	e7cb      	b.n	800371c <_strtod_l+0x1e4>
 8003784:	9806      	ldr	r0, [sp, #24]
 8003786:	e7d4      	b.n	8003732 <_strtod_l+0x1fa>
 8003788:	2908      	cmp	r1, #8
 800378a:	dc04      	bgt.n	8003796 <_strtod_l+0x25e>
 800378c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800378e:	436e      	muls	r6, r5
 8003790:	9609      	str	r6, [sp, #36]	; 0x24
 8003792:	3101      	adds	r1, #1
 8003794:	e7e2      	b.n	800375c <_strtod_l+0x224>
 8003796:	f101 0e01 	add.w	lr, r1, #1
 800379a:	f1be 0f10 	cmp.w	lr, #16
 800379e:	bfd8      	it	le
 80037a0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80037a4:	e7f5      	b.n	8003792 <_strtod_l+0x25a>
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	bfdc      	itt	le
 80037aa:	210a      	movle	r1, #10
 80037ac:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80037b0:	e7e1      	b.n	8003776 <_strtod_l+0x23e>
 80037b2:	2700      	movs	r7, #0
 80037b4:	2101      	movs	r1, #1
 80037b6:	e780      	b.n	80036ba <_strtod_l+0x182>
 80037b8:	f04f 0e00 	mov.w	lr, #0
 80037bc:	f10b 0202 	add.w	r2, fp, #2
 80037c0:	9211      	str	r2, [sp, #68]	; 0x44
 80037c2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80037c6:	e789      	b.n	80036dc <_strtod_l+0x1a4>
 80037c8:	f04f 0e01 	mov.w	lr, #1
 80037cc:	e7f6      	b.n	80037bc <_strtod_l+0x284>
 80037ce:	bf00      	nop
 80037d0:	080062b0 	.word	0x080062b0
 80037d4:	080061e8 	.word	0x080061e8
 80037d8:	7ff00000 	.word	0x7ff00000
 80037dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80037de:	1c55      	adds	r5, r2, #1
 80037e0:	9511      	str	r5, [sp, #68]	; 0x44
 80037e2:	7852      	ldrb	r2, [r2, #1]
 80037e4:	2a30      	cmp	r2, #48	; 0x30
 80037e6:	d0f9      	beq.n	80037dc <_strtod_l+0x2a4>
 80037e8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80037ec:	2d08      	cmp	r5, #8
 80037ee:	f63f af7b 	bhi.w	80036e8 <_strtod_l+0x1b0>
 80037f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80037f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80037f8:	9207      	str	r2, [sp, #28]
 80037fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80037fc:	1c55      	adds	r5, r2, #1
 80037fe:	9511      	str	r5, [sp, #68]	; 0x44
 8003800:	7852      	ldrb	r2, [r2, #1]
 8003802:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8003806:	2e09      	cmp	r6, #9
 8003808:	d937      	bls.n	800387a <_strtod_l+0x342>
 800380a:	9e07      	ldr	r6, [sp, #28]
 800380c:	1bad      	subs	r5, r5, r6
 800380e:	2d08      	cmp	r5, #8
 8003810:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003814:	dc02      	bgt.n	800381c <_strtod_l+0x2e4>
 8003816:	4565      	cmp	r5, ip
 8003818:	bfa8      	it	ge
 800381a:	4665      	movge	r5, ip
 800381c:	f1be 0f00 	cmp.w	lr, #0
 8003820:	d000      	beq.n	8003824 <_strtod_l+0x2ec>
 8003822:	426d      	negs	r5, r5
 8003824:	2b00      	cmp	r3, #0
 8003826:	d14d      	bne.n	80038c4 <_strtod_l+0x38c>
 8003828:	9b04      	ldr	r3, [sp, #16]
 800382a:	4303      	orrs	r3, r0
 800382c:	f47f aec8 	bne.w	80035c0 <_strtod_l+0x88>
 8003830:	2900      	cmp	r1, #0
 8003832:	f47f aee2 	bne.w	80035fa <_strtod_l+0xc2>
 8003836:	2a69      	cmp	r2, #105	; 0x69
 8003838:	d027      	beq.n	800388a <_strtod_l+0x352>
 800383a:	dc24      	bgt.n	8003886 <_strtod_l+0x34e>
 800383c:	2a49      	cmp	r2, #73	; 0x49
 800383e:	d024      	beq.n	800388a <_strtod_l+0x352>
 8003840:	2a4e      	cmp	r2, #78	; 0x4e
 8003842:	f47f aeda 	bne.w	80035fa <_strtod_l+0xc2>
 8003846:	4996      	ldr	r1, [pc, #600]	; (8003aa0 <_strtod_l+0x568>)
 8003848:	a811      	add	r0, sp, #68	; 0x44
 800384a:	f000 fef7 	bl	800463c <__match>
 800384e:	2800      	cmp	r0, #0
 8003850:	f43f aed3 	beq.w	80035fa <_strtod_l+0xc2>
 8003854:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b28      	cmp	r3, #40	; 0x28
 800385a:	d12d      	bne.n	80038b8 <_strtod_l+0x380>
 800385c:	4991      	ldr	r1, [pc, #580]	; (8003aa4 <_strtod_l+0x56c>)
 800385e:	aa14      	add	r2, sp, #80	; 0x50
 8003860:	a811      	add	r0, sp, #68	; 0x44
 8003862:	f000 feff 	bl	8004664 <__hexnan>
 8003866:	2805      	cmp	r0, #5
 8003868:	d126      	bne.n	80038b8 <_strtod_l+0x380>
 800386a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800386c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003870:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003874:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003878:	e6a2      	b.n	80035c0 <_strtod_l+0x88>
 800387a:	250a      	movs	r5, #10
 800387c:	fb05 250c 	mla	r5, r5, ip, r2
 8003880:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8003884:	e7b9      	b.n	80037fa <_strtod_l+0x2c2>
 8003886:	2a6e      	cmp	r2, #110	; 0x6e
 8003888:	e7db      	b.n	8003842 <_strtod_l+0x30a>
 800388a:	4987      	ldr	r1, [pc, #540]	; (8003aa8 <_strtod_l+0x570>)
 800388c:	a811      	add	r0, sp, #68	; 0x44
 800388e:	f000 fed5 	bl	800463c <__match>
 8003892:	2800      	cmp	r0, #0
 8003894:	f43f aeb1 	beq.w	80035fa <_strtod_l+0xc2>
 8003898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800389a:	4984      	ldr	r1, [pc, #528]	; (8003aac <_strtod_l+0x574>)
 800389c:	3b01      	subs	r3, #1
 800389e:	a811      	add	r0, sp, #68	; 0x44
 80038a0:	9311      	str	r3, [sp, #68]	; 0x44
 80038a2:	f000 fecb 	bl	800463c <__match>
 80038a6:	b910      	cbnz	r0, 80038ae <_strtod_l+0x376>
 80038a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038aa:	3301      	adds	r3, #1
 80038ac:	9311      	str	r3, [sp, #68]	; 0x44
 80038ae:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8003ac0 <_strtod_l+0x588>
 80038b2:	f04f 0800 	mov.w	r8, #0
 80038b6:	e683      	b.n	80035c0 <_strtod_l+0x88>
 80038b8:	487d      	ldr	r0, [pc, #500]	; (8003ab0 <_strtod_l+0x578>)
 80038ba:	f001 fce9 	bl	8005290 <nan>
 80038be:	ec59 8b10 	vmov	r8, r9, d0
 80038c2:	e67d      	b.n	80035c0 <_strtod_l+0x88>
 80038c4:	1bea      	subs	r2, r5, r7
 80038c6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80038ca:	9207      	str	r2, [sp, #28]
 80038cc:	9a06      	ldr	r2, [sp, #24]
 80038ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80038d2:	2a00      	cmp	r2, #0
 80038d4:	bf08      	it	eq
 80038d6:	461a      	moveq	r2, r3
 80038d8:	2b10      	cmp	r3, #16
 80038da:	9206      	str	r2, [sp, #24]
 80038dc:	461a      	mov	r2, r3
 80038de:	bfa8      	it	ge
 80038e0:	2210      	movge	r2, #16
 80038e2:	2b09      	cmp	r3, #9
 80038e4:	ec59 8b17 	vmov	r8, r9, d7
 80038e8:	dd0c      	ble.n	8003904 <_strtod_l+0x3cc>
 80038ea:	4972      	ldr	r1, [pc, #456]	; (8003ab4 <_strtod_l+0x57c>)
 80038ec:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80038f0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80038f4:	ee06 aa90 	vmov	s13, sl
 80038f8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80038fc:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003900:	ec59 8b16 	vmov	r8, r9, d6
 8003904:	2b0f      	cmp	r3, #15
 8003906:	dc36      	bgt.n	8003976 <_strtod_l+0x43e>
 8003908:	9907      	ldr	r1, [sp, #28]
 800390a:	2900      	cmp	r1, #0
 800390c:	f43f ae58 	beq.w	80035c0 <_strtod_l+0x88>
 8003910:	dd23      	ble.n	800395a <_strtod_l+0x422>
 8003912:	2916      	cmp	r1, #22
 8003914:	dc0b      	bgt.n	800392e <_strtod_l+0x3f6>
 8003916:	4b67      	ldr	r3, [pc, #412]	; (8003ab4 <_strtod_l+0x57c>)
 8003918:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800391c:	ed93 7b00 	vldr	d7, [r3]
 8003920:	ec49 8b16 	vmov	d6, r8, r9
 8003924:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003928:	ec59 8b17 	vmov	r8, r9, d7
 800392c:	e648      	b.n	80035c0 <_strtod_l+0x88>
 800392e:	9807      	ldr	r0, [sp, #28]
 8003930:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8003934:	4281      	cmp	r1, r0
 8003936:	db1e      	blt.n	8003976 <_strtod_l+0x43e>
 8003938:	4a5e      	ldr	r2, [pc, #376]	; (8003ab4 <_strtod_l+0x57c>)
 800393a:	f1c3 030f 	rsb	r3, r3, #15
 800393e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8003942:	ed91 7b00 	vldr	d7, [r1]
 8003946:	ec49 8b16 	vmov	d6, r8, r9
 800394a:	1ac3      	subs	r3, r0, r3
 800394c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003950:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003954:	ed92 6b00 	vldr	d6, [r2]
 8003958:	e7e4      	b.n	8003924 <_strtod_l+0x3ec>
 800395a:	9907      	ldr	r1, [sp, #28]
 800395c:	3116      	adds	r1, #22
 800395e:	db0a      	blt.n	8003976 <_strtod_l+0x43e>
 8003960:	4b54      	ldr	r3, [pc, #336]	; (8003ab4 <_strtod_l+0x57c>)
 8003962:	1b7d      	subs	r5, r7, r5
 8003964:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003968:	ed95 7b00 	vldr	d7, [r5]
 800396c:	ec49 8b16 	vmov	d6, r8, r9
 8003970:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003974:	e7d8      	b.n	8003928 <_strtod_l+0x3f0>
 8003976:	9907      	ldr	r1, [sp, #28]
 8003978:	1a9a      	subs	r2, r3, r2
 800397a:	440a      	add	r2, r1
 800397c:	2a00      	cmp	r2, #0
 800397e:	dd6f      	ble.n	8003a60 <_strtod_l+0x528>
 8003980:	f012 000f 	ands.w	r0, r2, #15
 8003984:	d00a      	beq.n	800399c <_strtod_l+0x464>
 8003986:	494b      	ldr	r1, [pc, #300]	; (8003ab4 <_strtod_l+0x57c>)
 8003988:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800398c:	ed91 7b00 	vldr	d7, [r1]
 8003990:	ec49 8b16 	vmov	d6, r8, r9
 8003994:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003998:	ec59 8b17 	vmov	r8, r9, d7
 800399c:	f032 020f 	bics.w	r2, r2, #15
 80039a0:	d04f      	beq.n	8003a42 <_strtod_l+0x50a>
 80039a2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80039a6:	dd22      	ble.n	80039ee <_strtod_l+0x4b6>
 80039a8:	2500      	movs	r5, #0
 80039aa:	462e      	mov	r6, r5
 80039ac:	9506      	str	r5, [sp, #24]
 80039ae:	462f      	mov	r7, r5
 80039b0:	2322      	movs	r3, #34	; 0x22
 80039b2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8003ac0 <_strtod_l+0x588>
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	f04f 0800 	mov.w	r8, #0
 80039bc:	9b06      	ldr	r3, [sp, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f43f adfe 	beq.w	80035c0 <_strtod_l+0x88>
 80039c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80039c6:	4620      	mov	r0, r4
 80039c8:	f000 ff3a 	bl	8004840 <_Bfree>
 80039cc:	4639      	mov	r1, r7
 80039ce:	4620      	mov	r0, r4
 80039d0:	f000 ff36 	bl	8004840 <_Bfree>
 80039d4:	4631      	mov	r1, r6
 80039d6:	4620      	mov	r0, r4
 80039d8:	f000 ff32 	bl	8004840 <_Bfree>
 80039dc:	9906      	ldr	r1, [sp, #24]
 80039de:	4620      	mov	r0, r4
 80039e0:	f000 ff2e 	bl	8004840 <_Bfree>
 80039e4:	4629      	mov	r1, r5
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 ff2a 	bl	8004840 <_Bfree>
 80039ec:	e5e8      	b.n	80035c0 <_strtod_l+0x88>
 80039ee:	2000      	movs	r0, #0
 80039f0:	ec49 8b17 	vmov	d7, r8, r9
 80039f4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8003ab8 <_strtod_l+0x580>
 80039f8:	1112      	asrs	r2, r2, #4
 80039fa:	4601      	mov	r1, r0
 80039fc:	2a01      	cmp	r2, #1
 80039fe:	dc23      	bgt.n	8003a48 <_strtod_l+0x510>
 8003a00:	b108      	cbz	r0, 8003a06 <_strtod_l+0x4ce>
 8003a02:	ec59 8b17 	vmov	r8, r9, d7
 8003a06:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <_strtod_l+0x580>)
 8003a08:	482c      	ldr	r0, [pc, #176]	; (8003abc <_strtod_l+0x584>)
 8003a0a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003a0e:	ed92 7b00 	vldr	d7, [r2]
 8003a12:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003a16:	ec49 8b16 	vmov	d6, r8, r9
 8003a1a:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <_strtod_l+0x588>)
 8003a1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a20:	ee17 1a90 	vmov	r1, s15
 8003a24:	400a      	ands	r2, r1
 8003a26:	4282      	cmp	r2, r0
 8003a28:	ec59 8b17 	vmov	r8, r9, d7
 8003a2c:	d8bc      	bhi.n	80039a8 <_strtod_l+0x470>
 8003a2e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8003a32:	4282      	cmp	r2, r0
 8003a34:	bf86      	itte	hi
 8003a36:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8003ac4 <_strtod_l+0x58c>
 8003a3a:	f04f 38ff 	movhi.w	r8, #4294967295
 8003a3e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8003a42:	2200      	movs	r2, #0
 8003a44:	9204      	str	r2, [sp, #16]
 8003a46:	e078      	b.n	8003b3a <_strtod_l+0x602>
 8003a48:	07d6      	lsls	r6, r2, #31
 8003a4a:	d504      	bpl.n	8003a56 <_strtod_l+0x51e>
 8003a4c:	ed9c 6b00 	vldr	d6, [ip]
 8003a50:	2001      	movs	r0, #1
 8003a52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a56:	3101      	adds	r1, #1
 8003a58:	1052      	asrs	r2, r2, #1
 8003a5a:	f10c 0c08 	add.w	ip, ip, #8
 8003a5e:	e7cd      	b.n	80039fc <_strtod_l+0x4c4>
 8003a60:	d0ef      	beq.n	8003a42 <_strtod_l+0x50a>
 8003a62:	4252      	negs	r2, r2
 8003a64:	f012 000f 	ands.w	r0, r2, #15
 8003a68:	d00a      	beq.n	8003a80 <_strtod_l+0x548>
 8003a6a:	4912      	ldr	r1, [pc, #72]	; (8003ab4 <_strtod_l+0x57c>)
 8003a6c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8003a70:	ed91 7b00 	vldr	d7, [r1]
 8003a74:	ec49 8b16 	vmov	d6, r8, r9
 8003a78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003a7c:	ec59 8b17 	vmov	r8, r9, d7
 8003a80:	1112      	asrs	r2, r2, #4
 8003a82:	d0de      	beq.n	8003a42 <_strtod_l+0x50a>
 8003a84:	2a1f      	cmp	r2, #31
 8003a86:	dd1f      	ble.n	8003ac8 <_strtod_l+0x590>
 8003a88:	2500      	movs	r5, #0
 8003a8a:	462e      	mov	r6, r5
 8003a8c:	9506      	str	r5, [sp, #24]
 8003a8e:	462f      	mov	r7, r5
 8003a90:	2322      	movs	r3, #34	; 0x22
 8003a92:	f04f 0800 	mov.w	r8, #0
 8003a96:	f04f 0900 	mov.w	r9, #0
 8003a9a:	6023      	str	r3, [r4, #0]
 8003a9c:	e78e      	b.n	80039bc <_strtod_l+0x484>
 8003a9e:	bf00      	nop
 8003aa0:	080061e5 	.word	0x080061e5
 8003aa4:	080061fc 	.word	0x080061fc
 8003aa8:	080061dc 	.word	0x080061dc
 8003aac:	080061df 	.word	0x080061df
 8003ab0:	0800646f 	.word	0x0800646f
 8003ab4:	08006360 	.word	0x08006360
 8003ab8:	08006338 	.word	0x08006338
 8003abc:	7ca00000 	.word	0x7ca00000
 8003ac0:	7ff00000 	.word	0x7ff00000
 8003ac4:	7fefffff 	.word	0x7fefffff
 8003ac8:	f012 0110 	ands.w	r1, r2, #16
 8003acc:	bf18      	it	ne
 8003ace:	216a      	movne	r1, #106	; 0x6a
 8003ad0:	9104      	str	r1, [sp, #16]
 8003ad2:	ec49 8b17 	vmov	d7, r8, r9
 8003ad6:	49be      	ldr	r1, [pc, #760]	; (8003dd0 <_strtod_l+0x898>)
 8003ad8:	2000      	movs	r0, #0
 8003ada:	07d6      	lsls	r6, r2, #31
 8003adc:	d504      	bpl.n	8003ae8 <_strtod_l+0x5b0>
 8003ade:	ed91 6b00 	vldr	d6, [r1]
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003ae8:	1052      	asrs	r2, r2, #1
 8003aea:	f101 0108 	add.w	r1, r1, #8
 8003aee:	d1f4      	bne.n	8003ada <_strtod_l+0x5a2>
 8003af0:	b108      	cbz	r0, 8003af6 <_strtod_l+0x5be>
 8003af2:	ec59 8b17 	vmov	r8, r9, d7
 8003af6:	9a04      	ldr	r2, [sp, #16]
 8003af8:	b1c2      	cbz	r2, 8003b2c <_strtod_l+0x5f4>
 8003afa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8003afe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8003b02:	2a00      	cmp	r2, #0
 8003b04:	4648      	mov	r0, r9
 8003b06:	dd11      	ble.n	8003b2c <_strtod_l+0x5f4>
 8003b08:	2a1f      	cmp	r2, #31
 8003b0a:	f340 812e 	ble.w	8003d6a <_strtod_l+0x832>
 8003b0e:	2a34      	cmp	r2, #52	; 0x34
 8003b10:	bfde      	ittt	le
 8003b12:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8003b16:	f04f 32ff 	movle.w	r2, #4294967295
 8003b1a:	fa02 f101 	lslle.w	r1, r2, r1
 8003b1e:	f04f 0800 	mov.w	r8, #0
 8003b22:	bfcc      	ite	gt
 8003b24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003b28:	ea01 0900 	andle.w	r9, r1, r0
 8003b2c:	ec49 8b17 	vmov	d7, r8, r9
 8003b30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d0a6      	beq.n	8003a88 <_strtod_l+0x550>
 8003b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b3c:	9200      	str	r2, [sp, #0]
 8003b3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b40:	9a06      	ldr	r2, [sp, #24]
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 fee4 	bl	8004910 <__s2b>
 8003b48:	9006      	str	r0, [sp, #24]
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	f43f af2c 	beq.w	80039a8 <_strtod_l+0x470>
 8003b50:	9b07      	ldr	r3, [sp, #28]
 8003b52:	1b7d      	subs	r5, r7, r5
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bfb4      	ite	lt
 8003b58:	462b      	movlt	r3, r5
 8003b5a:	2300      	movge	r3, #0
 8003b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b5e:	9b07      	ldr	r3, [sp, #28]
 8003b60:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8003db0 <_strtod_l+0x878>
 8003b64:	ed9f ab94 	vldr	d10, [pc, #592]	; 8003db8 <_strtod_l+0x880>
 8003b68:	ed9f bb95 	vldr	d11, [pc, #596]	; 8003dc0 <_strtod_l+0x888>
 8003b6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003b70:	2500      	movs	r5, #0
 8003b72:	930c      	str	r3, [sp, #48]	; 0x30
 8003b74:	462e      	mov	r6, r5
 8003b76:	9b06      	ldr	r3, [sp, #24]
 8003b78:	4620      	mov	r0, r4
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	f000 fe20 	bl	80047c0 <_Balloc>
 8003b80:	4607      	mov	r7, r0
 8003b82:	2800      	cmp	r0, #0
 8003b84:	f43f af14 	beq.w	80039b0 <_strtod_l+0x478>
 8003b88:	9b06      	ldr	r3, [sp, #24]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	3202      	adds	r2, #2
 8003b8e:	f103 010c 	add.w	r1, r3, #12
 8003b92:	0092      	lsls	r2, r2, #2
 8003b94:	300c      	adds	r0, #12
 8003b96:	f7ff fc8b 	bl	80034b0 <memcpy>
 8003b9a:	ec49 8b10 	vmov	d0, r8, r9
 8003b9e:	aa14      	add	r2, sp, #80	; 0x50
 8003ba0:	a913      	add	r1, sp, #76	; 0x4c
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f001 f9fa 	bl	8004f9c <__d2b>
 8003ba8:	ec49 8b18 	vmov	d8, r8, r9
 8003bac:	9012      	str	r0, [sp, #72]	; 0x48
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	f43f aefe 	beq.w	80039b0 <_strtod_l+0x478>
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f000 ff44 	bl	8004a44 <__i2b>
 8003bbc:	4606      	mov	r6, r0
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	f43f aef6 	beq.w	80039b0 <_strtod_l+0x478>
 8003bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003bc6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bfab      	itete	ge
 8003bcc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8003bce:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8003bd0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8003bd4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8003bd8:	bfac      	ite	ge
 8003bda:	eb03 0b02 	addge.w	fp, r3, r2
 8003bde:	eba2 0a03 	sublt.w	sl, r2, r3
 8003be2:	9a04      	ldr	r2, [sp, #16]
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	440b      	add	r3, r1
 8003be8:	4a7a      	ldr	r2, [pc, #488]	; (8003dd4 <_strtod_l+0x89c>)
 8003bea:	3b01      	subs	r3, #1
 8003bec:	4293      	cmp	r3, r2
 8003bee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8003bf2:	f280 80cd 	bge.w	8003d90 <_strtod_l+0x858>
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	2a1f      	cmp	r2, #31
 8003bfa:	eba1 0102 	sub.w	r1, r1, r2
 8003bfe:	f04f 0001 	mov.w	r0, #1
 8003c02:	f300 80b9 	bgt.w	8003d78 <_strtod_l+0x840>
 8003c06:	fa00 f302 	lsl.w	r3, r0, r2
 8003c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c10:	eb0b 0301 	add.w	r3, fp, r1
 8003c14:	9a04      	ldr	r2, [sp, #16]
 8003c16:	459b      	cmp	fp, r3
 8003c18:	448a      	add	sl, r1
 8003c1a:	4492      	add	sl, r2
 8003c1c:	465a      	mov	r2, fp
 8003c1e:	bfa8      	it	ge
 8003c20:	461a      	movge	r2, r3
 8003c22:	4552      	cmp	r2, sl
 8003c24:	bfa8      	it	ge
 8003c26:	4652      	movge	r2, sl
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	bfc2      	ittt	gt
 8003c2c:	1a9b      	subgt	r3, r3, r2
 8003c2e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8003c32:	ebab 0b02 	subgt.w	fp, fp, r2
 8003c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	dd18      	ble.n	8003c6e <_strtod_l+0x736>
 8003c3c:	4631      	mov	r1, r6
 8003c3e:	4620      	mov	r0, r4
 8003c40:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c42:	f000 ffbf 	bl	8004bc4 <__pow5mult>
 8003c46:	4606      	mov	r6, r0
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f43f aeb1 	beq.w	80039b0 <_strtod_l+0x478>
 8003c4e:	4601      	mov	r1, r0
 8003c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003c52:	4620      	mov	r0, r4
 8003c54:	f000 ff0c 	bl	8004a70 <__multiply>
 8003c58:	900e      	str	r0, [sp, #56]	; 0x38
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	f43f aea8 	beq.w	80039b0 <_strtod_l+0x478>
 8003c60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003c62:	4620      	mov	r0, r4
 8003c64:	f000 fdec 	bl	8004840 <_Bfree>
 8003c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c6c:	9212      	str	r2, [sp, #72]	; 0x48
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f300 8093 	bgt.w	8003d9a <_strtod_l+0x862>
 8003c74:	9b07      	ldr	r3, [sp, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dd08      	ble.n	8003c8c <_strtod_l+0x754>
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f000 ffa0 	bl	8004bc4 <__pow5mult>
 8003c84:	4607      	mov	r7, r0
 8003c86:	2800      	cmp	r0, #0
 8003c88:	f43f ae92 	beq.w	80039b0 <_strtod_l+0x478>
 8003c8c:	f1ba 0f00 	cmp.w	sl, #0
 8003c90:	dd08      	ble.n	8003ca4 <_strtod_l+0x76c>
 8003c92:	4639      	mov	r1, r7
 8003c94:	4652      	mov	r2, sl
 8003c96:	4620      	mov	r0, r4
 8003c98:	f000 ffee 	bl	8004c78 <__lshift>
 8003c9c:	4607      	mov	r7, r0
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	f43f ae86 	beq.w	80039b0 <_strtod_l+0x478>
 8003ca4:	f1bb 0f00 	cmp.w	fp, #0
 8003ca8:	dd08      	ble.n	8003cbc <_strtod_l+0x784>
 8003caa:	4631      	mov	r1, r6
 8003cac:	465a      	mov	r2, fp
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f000 ffe2 	bl	8004c78 <__lshift>
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	f43f ae7a 	beq.w	80039b0 <_strtod_l+0x478>
 8003cbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003cbe:	463a      	mov	r2, r7
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f001 f865 	bl	8004d90 <__mdiff>
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	f43f ae71 	beq.w	80039b0 <_strtod_l+0x478>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8003cd4:	60c3      	str	r3, [r0, #12]
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	f001 f83e 	bl	8004d58 <__mcmp>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	da7d      	bge.n	8003ddc <_strtod_l+0x8a4>
 8003ce0:	ea5a 0308 	orrs.w	r3, sl, r8
 8003ce4:	f040 80a3 	bne.w	8003e2e <_strtod_l+0x8f6>
 8003ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f040 809e 	bne.w	8003e2e <_strtod_l+0x8f6>
 8003cf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cf6:	0d1b      	lsrs	r3, r3, #20
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003cfe:	f240 8096 	bls.w	8003e2e <_strtod_l+0x8f6>
 8003d02:	696b      	ldr	r3, [r5, #20]
 8003d04:	b91b      	cbnz	r3, 8003d0e <_strtod_l+0x7d6>
 8003d06:	692b      	ldr	r3, [r5, #16]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	f340 8090 	ble.w	8003e2e <_strtod_l+0x8f6>
 8003d0e:	4629      	mov	r1, r5
 8003d10:	2201      	movs	r2, #1
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 ffb0 	bl	8004c78 <__lshift>
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	f001 f81c 	bl	8004d58 <__mcmp>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	f340 8084 	ble.w	8003e2e <_strtod_l+0x8f6>
 8003d26:	9904      	ldr	r1, [sp, #16]
 8003d28:	4a2b      	ldr	r2, [pc, #172]	; (8003dd8 <_strtod_l+0x8a0>)
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	2900      	cmp	r1, #0
 8003d2e:	f000 809d 	beq.w	8003e6c <_strtod_l+0x934>
 8003d32:	ea02 0109 	and.w	r1, r2, r9
 8003d36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003d3a:	f300 8097 	bgt.w	8003e6c <_strtod_l+0x934>
 8003d3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003d42:	f77f aea5 	ble.w	8003a90 <_strtod_l+0x558>
 8003d46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8003dc8 <_strtod_l+0x890>
 8003d4a:	ec49 8b16 	vmov	d6, r8, r9
 8003d4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d52:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003d56:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	bf08      	it	eq
 8003d5e:	2322      	moveq	r3, #34	; 0x22
 8003d60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003d64:	bf08      	it	eq
 8003d66:	6023      	streq	r3, [r4, #0]
 8003d68:	e62c      	b.n	80039c4 <_strtod_l+0x48c>
 8003d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	ea02 0808 	and.w	r8, r2, r8
 8003d76:	e6d9      	b.n	8003b2c <_strtod_l+0x5f4>
 8003d78:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8003d7c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8003d80:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8003d84:	33e2      	adds	r3, #226	; 0xe2
 8003d86:	fa00 f303 	lsl.w	r3, r0, r3
 8003d8a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8003d8e:	e73f      	b.n	8003c10 <_strtod_l+0x6d8>
 8003d90:	2200      	movs	r2, #0
 8003d92:	2301      	movs	r3, #1
 8003d94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003d98:	e73a      	b.n	8003c10 <_strtod_l+0x6d8>
 8003d9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f000 ff6a 	bl	8004c78 <__lshift>
 8003da4:	9012      	str	r0, [sp, #72]	; 0x48
 8003da6:	2800      	cmp	r0, #0
 8003da8:	f47f af64 	bne.w	8003c74 <_strtod_l+0x73c>
 8003dac:	e600      	b.n	80039b0 <_strtod_l+0x478>
 8003dae:	bf00      	nop
 8003db0:	94a03595 	.word	0x94a03595
 8003db4:	3fcfffff 	.word	0x3fcfffff
 8003db8:	94a03595 	.word	0x94a03595
 8003dbc:	3fdfffff 	.word	0x3fdfffff
 8003dc0:	35afe535 	.word	0x35afe535
 8003dc4:	3fe00000 	.word	0x3fe00000
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	39500000 	.word	0x39500000
 8003dd0:	08006210 	.word	0x08006210
 8003dd4:	fffffc02 	.word	0xfffffc02
 8003dd8:	7ff00000 	.word	0x7ff00000
 8003ddc:	46cb      	mov	fp, r9
 8003dde:	d15f      	bne.n	8003ea0 <_strtod_l+0x968>
 8003de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003de4:	f1ba 0f00 	cmp.w	sl, #0
 8003de8:	d02a      	beq.n	8003e40 <_strtod_l+0x908>
 8003dea:	4aa7      	ldr	r2, [pc, #668]	; (8004088 <_strtod_l+0xb50>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d12b      	bne.n	8003e48 <_strtod_l+0x910>
 8003df0:	9b04      	ldr	r3, [sp, #16]
 8003df2:	4642      	mov	r2, r8
 8003df4:	b1fb      	cbz	r3, 8003e36 <_strtod_l+0x8fe>
 8003df6:	4ba5      	ldr	r3, [pc, #660]	; (800408c <_strtod_l+0xb54>)
 8003df8:	ea09 0303 	and.w	r3, r9, r3
 8003dfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003e00:	f04f 31ff 	mov.w	r1, #4294967295
 8003e04:	d81a      	bhi.n	8003e3c <_strtod_l+0x904>
 8003e06:	0d1b      	lsrs	r3, r3, #20
 8003e08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d119      	bne.n	8003e48 <_strtod_l+0x910>
 8003e14:	4b9e      	ldr	r3, [pc, #632]	; (8004090 <_strtod_l+0xb58>)
 8003e16:	459b      	cmp	fp, r3
 8003e18:	d102      	bne.n	8003e20 <_strtod_l+0x8e8>
 8003e1a:	3201      	adds	r2, #1
 8003e1c:	f43f adc8 	beq.w	80039b0 <_strtod_l+0x478>
 8003e20:	4b9a      	ldr	r3, [pc, #616]	; (800408c <_strtod_l+0xb54>)
 8003e22:	ea0b 0303 	and.w	r3, fp, r3
 8003e26:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8003e2a:	f04f 0800 	mov.w	r8, #0
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d188      	bne.n	8003d46 <_strtod_l+0x80e>
 8003e34:	e5c6      	b.n	80039c4 <_strtod_l+0x48c>
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3a:	e7e9      	b.n	8003e10 <_strtod_l+0x8d8>
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e7e7      	b.n	8003e10 <_strtod_l+0x8d8>
 8003e40:	ea53 0308 	orrs.w	r3, r3, r8
 8003e44:	f43f af6f 	beq.w	8003d26 <_strtod_l+0x7ee>
 8003e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e4a:	b1cb      	cbz	r3, 8003e80 <_strtod_l+0x948>
 8003e4c:	ea13 0f0b 	tst.w	r3, fp
 8003e50:	d0ed      	beq.n	8003e2e <_strtod_l+0x8f6>
 8003e52:	9a04      	ldr	r2, [sp, #16]
 8003e54:	4640      	mov	r0, r8
 8003e56:	4649      	mov	r1, r9
 8003e58:	f1ba 0f00 	cmp.w	sl, #0
 8003e5c:	d014      	beq.n	8003e88 <_strtod_l+0x950>
 8003e5e:	f7ff fb50 	bl	8003502 <sulp>
 8003e62:	ee38 7b00 	vadd.f64	d7, d8, d0
 8003e66:	ec59 8b17 	vmov	r8, r9, d7
 8003e6a:	e7e0      	b.n	8003e2e <_strtod_l+0x8f6>
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003e72:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8003e76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8003e7a:	f04f 38ff 	mov.w	r8, #4294967295
 8003e7e:	e7d6      	b.n	8003e2e <_strtod_l+0x8f6>
 8003e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e82:	ea13 0f08 	tst.w	r3, r8
 8003e86:	e7e3      	b.n	8003e50 <_strtod_l+0x918>
 8003e88:	f7ff fb3b 	bl	8003502 <sulp>
 8003e8c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8003e90:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8003e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e98:	ec59 8b10 	vmov	r8, r9, d0
 8003e9c:	d1c7      	bne.n	8003e2e <_strtod_l+0x8f6>
 8003e9e:	e5f7      	b.n	8003a90 <_strtod_l+0x558>
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f001 f8d6 	bl	8005054 <__ratio>
 8003ea8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8003eac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	d865      	bhi.n	8003f82 <_strtod_l+0xa4a>
 8003eb6:	f1ba 0f00 	cmp.w	sl, #0
 8003eba:	d042      	beq.n	8003f42 <_strtod_l+0xa0a>
 8003ebc:	4b75      	ldr	r3, [pc, #468]	; (8004094 <_strtod_l+0xb5c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8003ec4:	4871      	ldr	r0, [pc, #452]	; (800408c <_strtod_l+0xb54>)
 8003ec6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80040a0 <_strtod_l+0xb68>
 8003eca:	ea0b 0100 	and.w	r1, fp, r0
 8003ece:	4561      	cmp	r1, ip
 8003ed0:	f040 808e 	bne.w	8003ff0 <_strtod_l+0xab8>
 8003ed4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8003ed8:	ec49 8b10 	vmov	d0, r8, r9
 8003edc:	ec43 2b1c 	vmov	d12, r2, r3
 8003ee0:	910a      	str	r1, [sp, #40]	; 0x28
 8003ee2:	f000 ffdf 	bl	8004ea4 <__ulp>
 8003ee6:	ec49 8b1e 	vmov	d14, r8, r9
 8003eea:	4868      	ldr	r0, [pc, #416]	; (800408c <_strtod_l+0xb54>)
 8003eec:	eeac eb00 	vfma.f64	d14, d12, d0
 8003ef0:	ee1e 3a90 	vmov	r3, s29
 8003ef4:	4a68      	ldr	r2, [pc, #416]	; (8004098 <_strtod_l+0xb60>)
 8003ef6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ef8:	4018      	ands	r0, r3
 8003efa:	4290      	cmp	r0, r2
 8003efc:	ec59 8b1e 	vmov	r8, r9, d14
 8003f00:	d94e      	bls.n	8003fa0 <_strtod_l+0xa68>
 8003f02:	ee18 3a90 	vmov	r3, s17
 8003f06:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d104      	bne.n	8003f18 <_strtod_l+0x9e0>
 8003f0e:	ee18 3a10 	vmov	r3, s16
 8003f12:	3301      	adds	r3, #1
 8003f14:	f43f ad4c 	beq.w	80039b0 <_strtod_l+0x478>
 8003f18:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8004090 <_strtod_l+0xb58>
 8003f1c:	f04f 38ff 	mov.w	r8, #4294967295
 8003f20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003f22:	4620      	mov	r0, r4
 8003f24:	f000 fc8c 	bl	8004840 <_Bfree>
 8003f28:	4639      	mov	r1, r7
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 fc88 	bl	8004840 <_Bfree>
 8003f30:	4631      	mov	r1, r6
 8003f32:	4620      	mov	r0, r4
 8003f34:	f000 fc84 	bl	8004840 <_Bfree>
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 fc80 	bl	8004840 <_Bfree>
 8003f40:	e619      	b.n	8003b76 <_strtod_l+0x63e>
 8003f42:	f1b8 0f00 	cmp.w	r8, #0
 8003f46:	d112      	bne.n	8003f6e <_strtod_l+0xa36>
 8003f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f4c:	b9b3      	cbnz	r3, 8003f7c <_strtod_l+0xa44>
 8003f4e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8003f52:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8003f5e:	bf58      	it	pl
 8003f60:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8003f64:	eeb1 7b4d 	vneg.f64	d7, d13
 8003f68:	ec53 2b17 	vmov	r2, r3, d7
 8003f6c:	e7aa      	b.n	8003ec4 <_strtod_l+0x98c>
 8003f6e:	f1b8 0f01 	cmp.w	r8, #1
 8003f72:	d103      	bne.n	8003f7c <_strtod_l+0xa44>
 8003f74:	f1b9 0f00 	cmp.w	r9, #0
 8003f78:	f43f ad8a 	beq.w	8003a90 <_strtod_l+0x558>
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <_strtod_l+0xb64>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	e79e      	b.n	8003ec0 <_strtod_l+0x988>
 8003f82:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8003f86:	ee20 db0d 	vmul.f64	d13, d0, d13
 8003f8a:	f1ba 0f00 	cmp.w	sl, #0
 8003f8e:	d104      	bne.n	8003f9a <_strtod_l+0xa62>
 8003f90:	eeb1 7b4d 	vneg.f64	d7, d13
 8003f94:	ec53 2b17 	vmov	r2, r3, d7
 8003f98:	e794      	b.n	8003ec4 <_strtod_l+0x98c>
 8003f9a:	eeb0 7b4d 	vmov.f64	d7, d13
 8003f9e:	e7f9      	b.n	8003f94 <_strtod_l+0xa5c>
 8003fa0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8003fa4:	9b04      	ldr	r3, [sp, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ba      	bne.n	8003f20 <_strtod_l+0x9e8>
 8003faa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003fae:	0d1b      	lsrs	r3, r3, #20
 8003fb0:	051b      	lsls	r3, r3, #20
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	d1b4      	bne.n	8003f20 <_strtod_l+0x9e8>
 8003fb6:	ec51 0b1d 	vmov	r0, r1, d13
 8003fba:	f7fc fba5 	bl	8000708 <__aeabi_d2lz>
 8003fbe:	f7fc fb75 	bl	80006ac <__aeabi_l2d>
 8003fc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003fc6:	ec41 0b17 	vmov	d7, r0, r1
 8003fca:	ea43 0308 	orr.w	r3, r3, r8
 8003fce:	ea53 030a 	orrs.w	r3, r3, sl
 8003fd2:	ee3d db47 	vsub.f64	d13, d13, d7
 8003fd6:	d03c      	beq.n	8004052 <_strtod_l+0xb1a>
 8003fd8:	eeb4 dbca 	vcmpe.f64	d13, d10
 8003fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe0:	f53f acf0 	bmi.w	80039c4 <_strtod_l+0x48c>
 8003fe4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8003fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fec:	dd98      	ble.n	8003f20 <_strtod_l+0x9e8>
 8003fee:	e4e9      	b.n	80039c4 <_strtod_l+0x48c>
 8003ff0:	9804      	ldr	r0, [sp, #16]
 8003ff2:	b1f0      	cbz	r0, 8004032 <_strtod_l+0xafa>
 8003ff4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8003ff8:	d81b      	bhi.n	8004032 <_strtod_l+0xafa>
 8003ffa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8004080 <_strtod_l+0xb48>
 8003ffe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	d811      	bhi.n	800402c <_strtod_l+0xaf4>
 8004008:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800400c:	ee1d 3a10 	vmov	r3, s26
 8004010:	2b01      	cmp	r3, #1
 8004012:	bf38      	it	cc
 8004014:	2301      	movcc	r3, #1
 8004016:	ee0d 3a10 	vmov	s26, r3
 800401a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800401e:	f1ba 0f00 	cmp.w	sl, #0
 8004022:	d113      	bne.n	800404c <_strtod_l+0xb14>
 8004024:	eeb1 7b4d 	vneg.f64	d7, d13
 8004028:	ec53 2b17 	vmov	r2, r3, d7
 800402c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8004030:	1a43      	subs	r3, r0, r1
 8004032:	eeb0 0b48 	vmov.f64	d0, d8
 8004036:	ec43 2b1c 	vmov	d12, r2, r3
 800403a:	910a      	str	r1, [sp, #40]	; 0x28
 800403c:	f000 ff32 	bl	8004ea4 <__ulp>
 8004040:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004042:	eeac 8b00 	vfma.f64	d8, d12, d0
 8004046:	ec59 8b18 	vmov	r8, r9, d8
 800404a:	e7ab      	b.n	8003fa4 <_strtod_l+0xa6c>
 800404c:	eeb0 7b4d 	vmov.f64	d7, d13
 8004050:	e7ea      	b.n	8004028 <_strtod_l+0xaf0>
 8004052:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8004056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405a:	f57f af61 	bpl.w	8003f20 <_strtod_l+0x9e8>
 800405e:	e4b1      	b.n	80039c4 <_strtod_l+0x48c>
 8004060:	2300      	movs	r3, #0
 8004062:	9308      	str	r3, [sp, #32]
 8004064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	f7ff baad 	b.w	80035c8 <_strtod_l+0x90>
 800406e:	2a65      	cmp	r2, #101	; 0x65
 8004070:	f43f ab9f 	beq.w	80037b2 <_strtod_l+0x27a>
 8004074:	2a45      	cmp	r2, #69	; 0x45
 8004076:	f43f ab9c 	beq.w	80037b2 <_strtod_l+0x27a>
 800407a:	2101      	movs	r1, #1
 800407c:	f7ff bbd4 	b.w	8003828 <_strtod_l+0x2f0>
 8004080:	ffc00000 	.word	0xffc00000
 8004084:	41dfffff 	.word	0x41dfffff
 8004088:	000fffff 	.word	0x000fffff
 800408c:	7ff00000 	.word	0x7ff00000
 8004090:	7fefffff 	.word	0x7fefffff
 8004094:	3ff00000 	.word	0x3ff00000
 8004098:	7c9fffff 	.word	0x7c9fffff
 800409c:	bff00000 	.word	0xbff00000
 80040a0:	7fe00000 	.word	0x7fe00000

080040a4 <strtod>:
 80040a4:	460a      	mov	r2, r1
 80040a6:	4601      	mov	r1, r0
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <strtod+0x10>)
 80040aa:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <strtod+0x14>)
 80040ac:	6800      	ldr	r0, [r0, #0]
 80040ae:	f7ff ba43 	b.w	8003538 <_strtod_l>
 80040b2:	bf00      	nop
 80040b4:	2400001c 	.word	0x2400001c
 80040b8:	24000084 	.word	0x24000084

080040bc <rshift>:
 80040bc:	6903      	ldr	r3, [r0, #16]
 80040be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80040c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80040ca:	f100 0414 	add.w	r4, r0, #20
 80040ce:	dd45      	ble.n	800415c <rshift+0xa0>
 80040d0:	f011 011f 	ands.w	r1, r1, #31
 80040d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80040d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80040dc:	d10c      	bne.n	80040f8 <rshift+0x3c>
 80040de:	f100 0710 	add.w	r7, r0, #16
 80040e2:	4629      	mov	r1, r5
 80040e4:	42b1      	cmp	r1, r6
 80040e6:	d334      	bcc.n	8004152 <rshift+0x96>
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	1eea      	subs	r2, r5, #3
 80040ee:	4296      	cmp	r6, r2
 80040f0:	bf38      	it	cc
 80040f2:	2300      	movcc	r3, #0
 80040f4:	4423      	add	r3, r4
 80040f6:	e015      	b.n	8004124 <rshift+0x68>
 80040f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80040fc:	f1c1 0820 	rsb	r8, r1, #32
 8004100:	40cf      	lsrs	r7, r1
 8004102:	f105 0e04 	add.w	lr, r5, #4
 8004106:	46a1      	mov	r9, r4
 8004108:	4576      	cmp	r6, lr
 800410a:	46f4      	mov	ip, lr
 800410c:	d815      	bhi.n	800413a <rshift+0x7e>
 800410e:	1a9a      	subs	r2, r3, r2
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	3a04      	subs	r2, #4
 8004114:	3501      	adds	r5, #1
 8004116:	42ae      	cmp	r6, r5
 8004118:	bf38      	it	cc
 800411a:	2200      	movcc	r2, #0
 800411c:	18a3      	adds	r3, r4, r2
 800411e:	50a7      	str	r7, [r4, r2]
 8004120:	b107      	cbz	r7, 8004124 <rshift+0x68>
 8004122:	3304      	adds	r3, #4
 8004124:	1b1a      	subs	r2, r3, r4
 8004126:	42a3      	cmp	r3, r4
 8004128:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800412c:	bf08      	it	eq
 800412e:	2300      	moveq	r3, #0
 8004130:	6102      	str	r2, [r0, #16]
 8004132:	bf08      	it	eq
 8004134:	6143      	streq	r3, [r0, #20]
 8004136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800413a:	f8dc c000 	ldr.w	ip, [ip]
 800413e:	fa0c fc08 	lsl.w	ip, ip, r8
 8004142:	ea4c 0707 	orr.w	r7, ip, r7
 8004146:	f849 7b04 	str.w	r7, [r9], #4
 800414a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800414e:	40cf      	lsrs	r7, r1
 8004150:	e7da      	b.n	8004108 <rshift+0x4c>
 8004152:	f851 cb04 	ldr.w	ip, [r1], #4
 8004156:	f847 cf04 	str.w	ip, [r7, #4]!
 800415a:	e7c3      	b.n	80040e4 <rshift+0x28>
 800415c:	4623      	mov	r3, r4
 800415e:	e7e1      	b.n	8004124 <rshift+0x68>

08004160 <__hexdig_fun>:
 8004160:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004164:	2b09      	cmp	r3, #9
 8004166:	d802      	bhi.n	800416e <__hexdig_fun+0xe>
 8004168:	3820      	subs	r0, #32
 800416a:	b2c0      	uxtb	r0, r0
 800416c:	4770      	bx	lr
 800416e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004172:	2b05      	cmp	r3, #5
 8004174:	d801      	bhi.n	800417a <__hexdig_fun+0x1a>
 8004176:	3847      	subs	r0, #71	; 0x47
 8004178:	e7f7      	b.n	800416a <__hexdig_fun+0xa>
 800417a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800417e:	2b05      	cmp	r3, #5
 8004180:	d801      	bhi.n	8004186 <__hexdig_fun+0x26>
 8004182:	3827      	subs	r0, #39	; 0x27
 8004184:	e7f1      	b.n	800416a <__hexdig_fun+0xa>
 8004186:	2000      	movs	r0, #0
 8004188:	4770      	bx	lr
	...

0800418c <__gethex>:
 800418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004190:	ed2d 8b02 	vpush	{d8}
 8004194:	b089      	sub	sp, #36	; 0x24
 8004196:	ee08 0a10 	vmov	s16, r0
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	4bb4      	ldr	r3, [pc, #720]	; (8004470 <__gethex+0x2e4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	4618      	mov	r0, r3
 80041a4:	468b      	mov	fp, r1
 80041a6:	4690      	mov	r8, r2
 80041a8:	f7fc f89a 	bl	80002e0 <strlen>
 80041ac:	9b01      	ldr	r3, [sp, #4]
 80041ae:	f8db 2000 	ldr.w	r2, [fp]
 80041b2:	4403      	add	r3, r0
 80041b4:	4682      	mov	sl, r0
 80041b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80041ba:	9305      	str	r3, [sp, #20]
 80041bc:	1c93      	adds	r3, r2, #2
 80041be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80041c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80041c6:	32fe      	adds	r2, #254	; 0xfe
 80041c8:	18d1      	adds	r1, r2, r3
 80041ca:	461f      	mov	r7, r3
 80041cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80041d0:	9100      	str	r1, [sp, #0]
 80041d2:	2830      	cmp	r0, #48	; 0x30
 80041d4:	d0f8      	beq.n	80041c8 <__gethex+0x3c>
 80041d6:	f7ff ffc3 	bl	8004160 <__hexdig_fun>
 80041da:	4604      	mov	r4, r0
 80041dc:	2800      	cmp	r0, #0
 80041de:	d13a      	bne.n	8004256 <__gethex+0xca>
 80041e0:	9901      	ldr	r1, [sp, #4]
 80041e2:	4652      	mov	r2, sl
 80041e4:	4638      	mov	r0, r7
 80041e6:	f001 f86b 	bl	80052c0 <strncmp>
 80041ea:	4605      	mov	r5, r0
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d168      	bne.n	80042c2 <__gethex+0x136>
 80041f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80041f4:	eb07 060a 	add.w	r6, r7, sl
 80041f8:	f7ff ffb2 	bl	8004160 <__hexdig_fun>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	d062      	beq.n	80042c6 <__gethex+0x13a>
 8004200:	4633      	mov	r3, r6
 8004202:	7818      	ldrb	r0, [r3, #0]
 8004204:	2830      	cmp	r0, #48	; 0x30
 8004206:	461f      	mov	r7, r3
 8004208:	f103 0301 	add.w	r3, r3, #1
 800420c:	d0f9      	beq.n	8004202 <__gethex+0x76>
 800420e:	f7ff ffa7 	bl	8004160 <__hexdig_fun>
 8004212:	2301      	movs	r3, #1
 8004214:	fab0 f480 	clz	r4, r0
 8004218:	0964      	lsrs	r4, r4, #5
 800421a:	4635      	mov	r5, r6
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	463a      	mov	r2, r7
 8004220:	4616      	mov	r6, r2
 8004222:	3201      	adds	r2, #1
 8004224:	7830      	ldrb	r0, [r6, #0]
 8004226:	f7ff ff9b 	bl	8004160 <__hexdig_fun>
 800422a:	2800      	cmp	r0, #0
 800422c:	d1f8      	bne.n	8004220 <__gethex+0x94>
 800422e:	9901      	ldr	r1, [sp, #4]
 8004230:	4652      	mov	r2, sl
 8004232:	4630      	mov	r0, r6
 8004234:	f001 f844 	bl	80052c0 <strncmp>
 8004238:	b980      	cbnz	r0, 800425c <__gethex+0xd0>
 800423a:	b94d      	cbnz	r5, 8004250 <__gethex+0xc4>
 800423c:	eb06 050a 	add.w	r5, r6, sl
 8004240:	462a      	mov	r2, r5
 8004242:	4616      	mov	r6, r2
 8004244:	3201      	adds	r2, #1
 8004246:	7830      	ldrb	r0, [r6, #0]
 8004248:	f7ff ff8a 	bl	8004160 <__hexdig_fun>
 800424c:	2800      	cmp	r0, #0
 800424e:	d1f8      	bne.n	8004242 <__gethex+0xb6>
 8004250:	1bad      	subs	r5, r5, r6
 8004252:	00ad      	lsls	r5, r5, #2
 8004254:	e004      	b.n	8004260 <__gethex+0xd4>
 8004256:	2400      	movs	r4, #0
 8004258:	4625      	mov	r5, r4
 800425a:	e7e0      	b.n	800421e <__gethex+0x92>
 800425c:	2d00      	cmp	r5, #0
 800425e:	d1f7      	bne.n	8004250 <__gethex+0xc4>
 8004260:	7833      	ldrb	r3, [r6, #0]
 8004262:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004266:	2b50      	cmp	r3, #80	; 0x50
 8004268:	d13b      	bne.n	80042e2 <__gethex+0x156>
 800426a:	7873      	ldrb	r3, [r6, #1]
 800426c:	2b2b      	cmp	r3, #43	; 0x2b
 800426e:	d02c      	beq.n	80042ca <__gethex+0x13e>
 8004270:	2b2d      	cmp	r3, #45	; 0x2d
 8004272:	d02e      	beq.n	80042d2 <__gethex+0x146>
 8004274:	1c71      	adds	r1, r6, #1
 8004276:	f04f 0900 	mov.w	r9, #0
 800427a:	7808      	ldrb	r0, [r1, #0]
 800427c:	f7ff ff70 	bl	8004160 <__hexdig_fun>
 8004280:	1e43      	subs	r3, r0, #1
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b18      	cmp	r3, #24
 8004286:	d82c      	bhi.n	80042e2 <__gethex+0x156>
 8004288:	f1a0 0210 	sub.w	r2, r0, #16
 800428c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004290:	f7ff ff66 	bl	8004160 <__hexdig_fun>
 8004294:	1e43      	subs	r3, r0, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b18      	cmp	r3, #24
 800429a:	d91d      	bls.n	80042d8 <__gethex+0x14c>
 800429c:	f1b9 0f00 	cmp.w	r9, #0
 80042a0:	d000      	beq.n	80042a4 <__gethex+0x118>
 80042a2:	4252      	negs	r2, r2
 80042a4:	4415      	add	r5, r2
 80042a6:	f8cb 1000 	str.w	r1, [fp]
 80042aa:	b1e4      	cbz	r4, 80042e6 <__gethex+0x15a>
 80042ac:	9b00      	ldr	r3, [sp, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf14      	ite	ne
 80042b2:	2700      	movne	r7, #0
 80042b4:	2706      	moveq	r7, #6
 80042b6:	4638      	mov	r0, r7
 80042b8:	b009      	add	sp, #36	; 0x24
 80042ba:	ecbd 8b02 	vpop	{d8}
 80042be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c2:	463e      	mov	r6, r7
 80042c4:	4625      	mov	r5, r4
 80042c6:	2401      	movs	r4, #1
 80042c8:	e7ca      	b.n	8004260 <__gethex+0xd4>
 80042ca:	f04f 0900 	mov.w	r9, #0
 80042ce:	1cb1      	adds	r1, r6, #2
 80042d0:	e7d3      	b.n	800427a <__gethex+0xee>
 80042d2:	f04f 0901 	mov.w	r9, #1
 80042d6:	e7fa      	b.n	80042ce <__gethex+0x142>
 80042d8:	230a      	movs	r3, #10
 80042da:	fb03 0202 	mla	r2, r3, r2, r0
 80042de:	3a10      	subs	r2, #16
 80042e0:	e7d4      	b.n	800428c <__gethex+0x100>
 80042e2:	4631      	mov	r1, r6
 80042e4:	e7df      	b.n	80042a6 <__gethex+0x11a>
 80042e6:	1bf3      	subs	r3, r6, r7
 80042e8:	3b01      	subs	r3, #1
 80042ea:	4621      	mov	r1, r4
 80042ec:	2b07      	cmp	r3, #7
 80042ee:	dc0b      	bgt.n	8004308 <__gethex+0x17c>
 80042f0:	ee18 0a10 	vmov	r0, s16
 80042f4:	f000 fa64 	bl	80047c0 <_Balloc>
 80042f8:	4604      	mov	r4, r0
 80042fa:	b940      	cbnz	r0, 800430e <__gethex+0x182>
 80042fc:	4b5d      	ldr	r3, [pc, #372]	; (8004474 <__gethex+0x2e8>)
 80042fe:	4602      	mov	r2, r0
 8004300:	21de      	movs	r1, #222	; 0xde
 8004302:	485d      	ldr	r0, [pc, #372]	; (8004478 <__gethex+0x2ec>)
 8004304:	f000 fffe 	bl	8005304 <__assert_func>
 8004308:	3101      	adds	r1, #1
 800430a:	105b      	asrs	r3, r3, #1
 800430c:	e7ee      	b.n	80042ec <__gethex+0x160>
 800430e:	f100 0914 	add.w	r9, r0, #20
 8004312:	f04f 0b00 	mov.w	fp, #0
 8004316:	f1ca 0301 	rsb	r3, sl, #1
 800431a:	f8cd 9008 	str.w	r9, [sp, #8]
 800431e:	f8cd b000 	str.w	fp, [sp]
 8004322:	9306      	str	r3, [sp, #24]
 8004324:	42b7      	cmp	r7, r6
 8004326:	d340      	bcc.n	80043aa <__gethex+0x21e>
 8004328:	9802      	ldr	r0, [sp, #8]
 800432a:	9b00      	ldr	r3, [sp, #0]
 800432c:	f840 3b04 	str.w	r3, [r0], #4
 8004330:	eba0 0009 	sub.w	r0, r0, r9
 8004334:	1080      	asrs	r0, r0, #2
 8004336:	0146      	lsls	r6, r0, #5
 8004338:	6120      	str	r0, [r4, #16]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fb32 	bl	80049a4 <__hi0bits>
 8004340:	1a30      	subs	r0, r6, r0
 8004342:	f8d8 6000 	ldr.w	r6, [r8]
 8004346:	42b0      	cmp	r0, r6
 8004348:	dd63      	ble.n	8004412 <__gethex+0x286>
 800434a:	1b87      	subs	r7, r0, r6
 800434c:	4639      	mov	r1, r7
 800434e:	4620      	mov	r0, r4
 8004350:	f000 fed3 	bl	80050fa <__any_on>
 8004354:	4682      	mov	sl, r0
 8004356:	b1a8      	cbz	r0, 8004384 <__gethex+0x1f8>
 8004358:	1e7b      	subs	r3, r7, #1
 800435a:	1159      	asrs	r1, r3, #5
 800435c:	f003 021f 	and.w	r2, r3, #31
 8004360:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004364:	f04f 0a01 	mov.w	sl, #1
 8004368:	fa0a f202 	lsl.w	r2, sl, r2
 800436c:	420a      	tst	r2, r1
 800436e:	d009      	beq.n	8004384 <__gethex+0x1f8>
 8004370:	4553      	cmp	r3, sl
 8004372:	dd05      	ble.n	8004380 <__gethex+0x1f4>
 8004374:	1eb9      	subs	r1, r7, #2
 8004376:	4620      	mov	r0, r4
 8004378:	f000 febf 	bl	80050fa <__any_on>
 800437c:	2800      	cmp	r0, #0
 800437e:	d145      	bne.n	800440c <__gethex+0x280>
 8004380:	f04f 0a02 	mov.w	sl, #2
 8004384:	4639      	mov	r1, r7
 8004386:	4620      	mov	r0, r4
 8004388:	f7ff fe98 	bl	80040bc <rshift>
 800438c:	443d      	add	r5, r7
 800438e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004392:	42ab      	cmp	r3, r5
 8004394:	da4c      	bge.n	8004430 <__gethex+0x2a4>
 8004396:	ee18 0a10 	vmov	r0, s16
 800439a:	4621      	mov	r1, r4
 800439c:	f000 fa50 	bl	8004840 <_Bfree>
 80043a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80043a2:	2300      	movs	r3, #0
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	27a3      	movs	r7, #163	; 0xa3
 80043a8:	e785      	b.n	80042b6 <__gethex+0x12a>
 80043aa:	1e73      	subs	r3, r6, #1
 80043ac:	9a05      	ldr	r2, [sp, #20]
 80043ae:	9303      	str	r3, [sp, #12]
 80043b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d019      	beq.n	80043ec <__gethex+0x260>
 80043b8:	f1bb 0f20 	cmp.w	fp, #32
 80043bc:	d107      	bne.n	80043ce <__gethex+0x242>
 80043be:	9b02      	ldr	r3, [sp, #8]
 80043c0:	9a00      	ldr	r2, [sp, #0]
 80043c2:	f843 2b04 	str.w	r2, [r3], #4
 80043c6:	9302      	str	r3, [sp, #8]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	469b      	mov	fp, r3
 80043ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80043d2:	f7ff fec5 	bl	8004160 <__hexdig_fun>
 80043d6:	9b00      	ldr	r3, [sp, #0]
 80043d8:	f000 000f 	and.w	r0, r0, #15
 80043dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80043e0:	4303      	orrs	r3, r0
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	f10b 0b04 	add.w	fp, fp, #4
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	e00d      	b.n	8004408 <__gethex+0x27c>
 80043ec:	9b03      	ldr	r3, [sp, #12]
 80043ee:	9a06      	ldr	r2, [sp, #24]
 80043f0:	4413      	add	r3, r2
 80043f2:	42bb      	cmp	r3, r7
 80043f4:	d3e0      	bcc.n	80043b8 <__gethex+0x22c>
 80043f6:	4618      	mov	r0, r3
 80043f8:	9901      	ldr	r1, [sp, #4]
 80043fa:	9307      	str	r3, [sp, #28]
 80043fc:	4652      	mov	r2, sl
 80043fe:	f000 ff5f 	bl	80052c0 <strncmp>
 8004402:	9b07      	ldr	r3, [sp, #28]
 8004404:	2800      	cmp	r0, #0
 8004406:	d1d7      	bne.n	80043b8 <__gethex+0x22c>
 8004408:	461e      	mov	r6, r3
 800440a:	e78b      	b.n	8004324 <__gethex+0x198>
 800440c:	f04f 0a03 	mov.w	sl, #3
 8004410:	e7b8      	b.n	8004384 <__gethex+0x1f8>
 8004412:	da0a      	bge.n	800442a <__gethex+0x29e>
 8004414:	1a37      	subs	r7, r6, r0
 8004416:	4621      	mov	r1, r4
 8004418:	ee18 0a10 	vmov	r0, s16
 800441c:	463a      	mov	r2, r7
 800441e:	f000 fc2b 	bl	8004c78 <__lshift>
 8004422:	1bed      	subs	r5, r5, r7
 8004424:	4604      	mov	r4, r0
 8004426:	f100 0914 	add.w	r9, r0, #20
 800442a:	f04f 0a00 	mov.w	sl, #0
 800442e:	e7ae      	b.n	800438e <__gethex+0x202>
 8004430:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004434:	42a8      	cmp	r0, r5
 8004436:	dd72      	ble.n	800451e <__gethex+0x392>
 8004438:	1b45      	subs	r5, r0, r5
 800443a:	42ae      	cmp	r6, r5
 800443c:	dc36      	bgt.n	80044ac <__gethex+0x320>
 800443e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d02a      	beq.n	800449c <__gethex+0x310>
 8004446:	2b03      	cmp	r3, #3
 8004448:	d02c      	beq.n	80044a4 <__gethex+0x318>
 800444a:	2b01      	cmp	r3, #1
 800444c:	d11c      	bne.n	8004488 <__gethex+0x2fc>
 800444e:	42ae      	cmp	r6, r5
 8004450:	d11a      	bne.n	8004488 <__gethex+0x2fc>
 8004452:	2e01      	cmp	r6, #1
 8004454:	d112      	bne.n	800447c <__gethex+0x2f0>
 8004456:	9a04      	ldr	r2, [sp, #16]
 8004458:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	2301      	movs	r3, #1
 8004460:	6123      	str	r3, [r4, #16]
 8004462:	f8c9 3000 	str.w	r3, [r9]
 8004466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004468:	2762      	movs	r7, #98	; 0x62
 800446a:	601c      	str	r4, [r3, #0]
 800446c:	e723      	b.n	80042b6 <__gethex+0x12a>
 800446e:	bf00      	nop
 8004470:	080062b0 	.word	0x080062b0
 8004474:	08006238 	.word	0x08006238
 8004478:	08006249 	.word	0x08006249
 800447c:	1e71      	subs	r1, r6, #1
 800447e:	4620      	mov	r0, r4
 8004480:	f000 fe3b 	bl	80050fa <__any_on>
 8004484:	2800      	cmp	r0, #0
 8004486:	d1e6      	bne.n	8004456 <__gethex+0x2ca>
 8004488:	ee18 0a10 	vmov	r0, s16
 800448c:	4621      	mov	r1, r4
 800448e:	f000 f9d7 	bl	8004840 <_Bfree>
 8004492:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004494:	2300      	movs	r3, #0
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	2750      	movs	r7, #80	; 0x50
 800449a:	e70c      	b.n	80042b6 <__gethex+0x12a>
 800449c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f2      	bne.n	8004488 <__gethex+0x2fc>
 80044a2:	e7d8      	b.n	8004456 <__gethex+0x2ca>
 80044a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1d5      	bne.n	8004456 <__gethex+0x2ca>
 80044aa:	e7ed      	b.n	8004488 <__gethex+0x2fc>
 80044ac:	1e6f      	subs	r7, r5, #1
 80044ae:	f1ba 0f00 	cmp.w	sl, #0
 80044b2:	d131      	bne.n	8004518 <__gethex+0x38c>
 80044b4:	b127      	cbz	r7, 80044c0 <__gethex+0x334>
 80044b6:	4639      	mov	r1, r7
 80044b8:	4620      	mov	r0, r4
 80044ba:	f000 fe1e 	bl	80050fa <__any_on>
 80044be:	4682      	mov	sl, r0
 80044c0:	117b      	asrs	r3, r7, #5
 80044c2:	2101      	movs	r1, #1
 80044c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80044c8:	f007 071f 	and.w	r7, r7, #31
 80044cc:	fa01 f707 	lsl.w	r7, r1, r7
 80044d0:	421f      	tst	r7, r3
 80044d2:	4629      	mov	r1, r5
 80044d4:	4620      	mov	r0, r4
 80044d6:	bf18      	it	ne
 80044d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80044dc:	1b76      	subs	r6, r6, r5
 80044de:	f7ff fded 	bl	80040bc <rshift>
 80044e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80044e6:	2702      	movs	r7, #2
 80044e8:	f1ba 0f00 	cmp.w	sl, #0
 80044ec:	d048      	beq.n	8004580 <__gethex+0x3f4>
 80044ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d015      	beq.n	8004522 <__gethex+0x396>
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d017      	beq.n	800452a <__gethex+0x39e>
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d109      	bne.n	8004512 <__gethex+0x386>
 80044fe:	f01a 0f02 	tst.w	sl, #2
 8004502:	d006      	beq.n	8004512 <__gethex+0x386>
 8004504:	f8d9 0000 	ldr.w	r0, [r9]
 8004508:	ea4a 0a00 	orr.w	sl, sl, r0
 800450c:	f01a 0f01 	tst.w	sl, #1
 8004510:	d10e      	bne.n	8004530 <__gethex+0x3a4>
 8004512:	f047 0710 	orr.w	r7, r7, #16
 8004516:	e033      	b.n	8004580 <__gethex+0x3f4>
 8004518:	f04f 0a01 	mov.w	sl, #1
 800451c:	e7d0      	b.n	80044c0 <__gethex+0x334>
 800451e:	2701      	movs	r7, #1
 8004520:	e7e2      	b.n	80044e8 <__gethex+0x35c>
 8004522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004524:	f1c3 0301 	rsb	r3, r3, #1
 8004528:	9315      	str	r3, [sp, #84]	; 0x54
 800452a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <__gethex+0x386>
 8004530:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004534:	f104 0314 	add.w	r3, r4, #20
 8004538:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800453c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004540:	f04f 0c00 	mov.w	ip, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f853 2b04 	ldr.w	r2, [r3], #4
 800454a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800454e:	d01c      	beq.n	800458a <__gethex+0x3fe>
 8004550:	3201      	adds	r2, #1
 8004552:	6002      	str	r2, [r0, #0]
 8004554:	2f02      	cmp	r7, #2
 8004556:	f104 0314 	add.w	r3, r4, #20
 800455a:	d13f      	bne.n	80045dc <__gethex+0x450>
 800455c:	f8d8 2000 	ldr.w	r2, [r8]
 8004560:	3a01      	subs	r2, #1
 8004562:	42b2      	cmp	r2, r6
 8004564:	d10a      	bne.n	800457c <__gethex+0x3f0>
 8004566:	1171      	asrs	r1, r6, #5
 8004568:	2201      	movs	r2, #1
 800456a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800456e:	f006 061f 	and.w	r6, r6, #31
 8004572:	fa02 f606 	lsl.w	r6, r2, r6
 8004576:	421e      	tst	r6, r3
 8004578:	bf18      	it	ne
 800457a:	4617      	movne	r7, r2
 800457c:	f047 0720 	orr.w	r7, r7, #32
 8004580:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004582:	601c      	str	r4, [r3, #0]
 8004584:	9b04      	ldr	r3, [sp, #16]
 8004586:	601d      	str	r5, [r3, #0]
 8004588:	e695      	b.n	80042b6 <__gethex+0x12a>
 800458a:	4299      	cmp	r1, r3
 800458c:	f843 cc04 	str.w	ip, [r3, #-4]
 8004590:	d8d8      	bhi.n	8004544 <__gethex+0x3b8>
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	459b      	cmp	fp, r3
 8004596:	db19      	blt.n	80045cc <__gethex+0x440>
 8004598:	6861      	ldr	r1, [r4, #4]
 800459a:	ee18 0a10 	vmov	r0, s16
 800459e:	3101      	adds	r1, #1
 80045a0:	f000 f90e 	bl	80047c0 <_Balloc>
 80045a4:	4681      	mov	r9, r0
 80045a6:	b918      	cbnz	r0, 80045b0 <__gethex+0x424>
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <__gethex+0x488>)
 80045aa:	4602      	mov	r2, r0
 80045ac:	2184      	movs	r1, #132	; 0x84
 80045ae:	e6a8      	b.n	8004302 <__gethex+0x176>
 80045b0:	6922      	ldr	r2, [r4, #16]
 80045b2:	3202      	adds	r2, #2
 80045b4:	f104 010c 	add.w	r1, r4, #12
 80045b8:	0092      	lsls	r2, r2, #2
 80045ba:	300c      	adds	r0, #12
 80045bc:	f7fe ff78 	bl	80034b0 <memcpy>
 80045c0:	4621      	mov	r1, r4
 80045c2:	ee18 0a10 	vmov	r0, s16
 80045c6:	f000 f93b 	bl	8004840 <_Bfree>
 80045ca:	464c      	mov	r4, r9
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045d4:	6122      	str	r2, [r4, #16]
 80045d6:	2201      	movs	r2, #1
 80045d8:	615a      	str	r2, [r3, #20]
 80045da:	e7bb      	b.n	8004554 <__gethex+0x3c8>
 80045dc:	6922      	ldr	r2, [r4, #16]
 80045de:	455a      	cmp	r2, fp
 80045e0:	dd0b      	ble.n	80045fa <__gethex+0x46e>
 80045e2:	2101      	movs	r1, #1
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff fd69 	bl	80040bc <rshift>
 80045ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80045ee:	3501      	adds	r5, #1
 80045f0:	42ab      	cmp	r3, r5
 80045f2:	f6ff aed0 	blt.w	8004396 <__gethex+0x20a>
 80045f6:	2701      	movs	r7, #1
 80045f8:	e7c0      	b.n	800457c <__gethex+0x3f0>
 80045fa:	f016 061f 	ands.w	r6, r6, #31
 80045fe:	d0fa      	beq.n	80045f6 <__gethex+0x46a>
 8004600:	4453      	add	r3, sl
 8004602:	f1c6 0620 	rsb	r6, r6, #32
 8004606:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800460a:	f000 f9cb 	bl	80049a4 <__hi0bits>
 800460e:	42b0      	cmp	r0, r6
 8004610:	dbe7      	blt.n	80045e2 <__gethex+0x456>
 8004612:	e7f0      	b.n	80045f6 <__gethex+0x46a>
 8004614:	08006238 	.word	0x08006238

08004618 <L_shift>:
 8004618:	f1c2 0208 	rsb	r2, r2, #8
 800461c:	0092      	lsls	r2, r2, #2
 800461e:	b570      	push	{r4, r5, r6, lr}
 8004620:	f1c2 0620 	rsb	r6, r2, #32
 8004624:	6843      	ldr	r3, [r0, #4]
 8004626:	6804      	ldr	r4, [r0, #0]
 8004628:	fa03 f506 	lsl.w	r5, r3, r6
 800462c:	432c      	orrs	r4, r5
 800462e:	40d3      	lsrs	r3, r2
 8004630:	6004      	str	r4, [r0, #0]
 8004632:	f840 3f04 	str.w	r3, [r0, #4]!
 8004636:	4288      	cmp	r0, r1
 8004638:	d3f4      	bcc.n	8004624 <L_shift+0xc>
 800463a:	bd70      	pop	{r4, r5, r6, pc}

0800463c <__match>:
 800463c:	b530      	push	{r4, r5, lr}
 800463e:	6803      	ldr	r3, [r0, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004646:	b914      	cbnz	r4, 800464e <__match+0x12>
 8004648:	6003      	str	r3, [r0, #0]
 800464a:	2001      	movs	r0, #1
 800464c:	bd30      	pop	{r4, r5, pc}
 800464e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004652:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004656:	2d19      	cmp	r5, #25
 8004658:	bf98      	it	ls
 800465a:	3220      	addls	r2, #32
 800465c:	42a2      	cmp	r2, r4
 800465e:	d0f0      	beq.n	8004642 <__match+0x6>
 8004660:	2000      	movs	r0, #0
 8004662:	e7f3      	b.n	800464c <__match+0x10>

08004664 <__hexnan>:
 8004664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	680b      	ldr	r3, [r1, #0]
 800466a:	115e      	asrs	r6, r3, #5
 800466c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004670:	f013 031f 	ands.w	r3, r3, #31
 8004674:	b087      	sub	sp, #28
 8004676:	bf18      	it	ne
 8004678:	3604      	addne	r6, #4
 800467a:	2500      	movs	r5, #0
 800467c:	1f37      	subs	r7, r6, #4
 800467e:	4690      	mov	r8, r2
 8004680:	6802      	ldr	r2, [r0, #0]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	4682      	mov	sl, r0
 8004686:	f846 5c04 	str.w	r5, [r6, #-4]
 800468a:	46b9      	mov	r9, r7
 800468c:	463c      	mov	r4, r7
 800468e:	9502      	str	r5, [sp, #8]
 8004690:	46ab      	mov	fp, r5
 8004692:	7851      	ldrb	r1, [r2, #1]
 8004694:	1c53      	adds	r3, r2, #1
 8004696:	9303      	str	r3, [sp, #12]
 8004698:	b341      	cbz	r1, 80046ec <__hexnan+0x88>
 800469a:	4608      	mov	r0, r1
 800469c:	9205      	str	r2, [sp, #20]
 800469e:	9104      	str	r1, [sp, #16]
 80046a0:	f7ff fd5e 	bl	8004160 <__hexdig_fun>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d14f      	bne.n	8004748 <__hexnan+0xe4>
 80046a8:	9904      	ldr	r1, [sp, #16]
 80046aa:	9a05      	ldr	r2, [sp, #20]
 80046ac:	2920      	cmp	r1, #32
 80046ae:	d818      	bhi.n	80046e2 <__hexnan+0x7e>
 80046b0:	9b02      	ldr	r3, [sp, #8]
 80046b2:	459b      	cmp	fp, r3
 80046b4:	dd13      	ble.n	80046de <__hexnan+0x7a>
 80046b6:	454c      	cmp	r4, r9
 80046b8:	d206      	bcs.n	80046c8 <__hexnan+0x64>
 80046ba:	2d07      	cmp	r5, #7
 80046bc:	dc04      	bgt.n	80046c8 <__hexnan+0x64>
 80046be:	462a      	mov	r2, r5
 80046c0:	4649      	mov	r1, r9
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7ff ffa8 	bl	8004618 <L_shift>
 80046c8:	4544      	cmp	r4, r8
 80046ca:	d950      	bls.n	800476e <__hexnan+0x10a>
 80046cc:	2300      	movs	r3, #0
 80046ce:	f1a4 0904 	sub.w	r9, r4, #4
 80046d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80046d6:	f8cd b008 	str.w	fp, [sp, #8]
 80046da:	464c      	mov	r4, r9
 80046dc:	461d      	mov	r5, r3
 80046de:	9a03      	ldr	r2, [sp, #12]
 80046e0:	e7d7      	b.n	8004692 <__hexnan+0x2e>
 80046e2:	2929      	cmp	r1, #41	; 0x29
 80046e4:	d156      	bne.n	8004794 <__hexnan+0x130>
 80046e6:	3202      	adds	r2, #2
 80046e8:	f8ca 2000 	str.w	r2, [sl]
 80046ec:	f1bb 0f00 	cmp.w	fp, #0
 80046f0:	d050      	beq.n	8004794 <__hexnan+0x130>
 80046f2:	454c      	cmp	r4, r9
 80046f4:	d206      	bcs.n	8004704 <__hexnan+0xa0>
 80046f6:	2d07      	cmp	r5, #7
 80046f8:	dc04      	bgt.n	8004704 <__hexnan+0xa0>
 80046fa:	462a      	mov	r2, r5
 80046fc:	4649      	mov	r1, r9
 80046fe:	4620      	mov	r0, r4
 8004700:	f7ff ff8a 	bl	8004618 <L_shift>
 8004704:	4544      	cmp	r4, r8
 8004706:	d934      	bls.n	8004772 <__hexnan+0x10e>
 8004708:	f1a8 0204 	sub.w	r2, r8, #4
 800470c:	4623      	mov	r3, r4
 800470e:	f853 1b04 	ldr.w	r1, [r3], #4
 8004712:	f842 1f04 	str.w	r1, [r2, #4]!
 8004716:	429f      	cmp	r7, r3
 8004718:	d2f9      	bcs.n	800470e <__hexnan+0xaa>
 800471a:	1b3b      	subs	r3, r7, r4
 800471c:	f023 0303 	bic.w	r3, r3, #3
 8004720:	3304      	adds	r3, #4
 8004722:	3401      	adds	r4, #1
 8004724:	3e03      	subs	r6, #3
 8004726:	42b4      	cmp	r4, r6
 8004728:	bf88      	it	hi
 800472a:	2304      	movhi	r3, #4
 800472c:	4443      	add	r3, r8
 800472e:	2200      	movs	r2, #0
 8004730:	f843 2b04 	str.w	r2, [r3], #4
 8004734:	429f      	cmp	r7, r3
 8004736:	d2fb      	bcs.n	8004730 <__hexnan+0xcc>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	b91b      	cbnz	r3, 8004744 <__hexnan+0xe0>
 800473c:	4547      	cmp	r7, r8
 800473e:	d127      	bne.n	8004790 <__hexnan+0x12c>
 8004740:	2301      	movs	r3, #1
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	2005      	movs	r0, #5
 8004746:	e026      	b.n	8004796 <__hexnan+0x132>
 8004748:	3501      	adds	r5, #1
 800474a:	2d08      	cmp	r5, #8
 800474c:	f10b 0b01 	add.w	fp, fp, #1
 8004750:	dd06      	ble.n	8004760 <__hexnan+0xfc>
 8004752:	4544      	cmp	r4, r8
 8004754:	d9c3      	bls.n	80046de <__hexnan+0x7a>
 8004756:	2300      	movs	r3, #0
 8004758:	f844 3c04 	str.w	r3, [r4, #-4]
 800475c:	2501      	movs	r5, #1
 800475e:	3c04      	subs	r4, #4
 8004760:	6822      	ldr	r2, [r4, #0]
 8004762:	f000 000f 	and.w	r0, r0, #15
 8004766:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800476a:	6022      	str	r2, [r4, #0]
 800476c:	e7b7      	b.n	80046de <__hexnan+0x7a>
 800476e:	2508      	movs	r5, #8
 8004770:	e7b5      	b.n	80046de <__hexnan+0x7a>
 8004772:	9b01      	ldr	r3, [sp, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0df      	beq.n	8004738 <__hexnan+0xd4>
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	f1c3 0320 	rsb	r3, r3, #32
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
 8004784:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004788:	401a      	ands	r2, r3
 800478a:	f846 2c04 	str.w	r2, [r6, #-4]
 800478e:	e7d3      	b.n	8004738 <__hexnan+0xd4>
 8004790:	3f04      	subs	r7, #4
 8004792:	e7d1      	b.n	8004738 <__hexnan+0xd4>
 8004794:	2004      	movs	r0, #4
 8004796:	b007      	add	sp, #28
 8004798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800479c <__ascii_mbtowc>:
 800479c:	b082      	sub	sp, #8
 800479e:	b901      	cbnz	r1, 80047a2 <__ascii_mbtowc+0x6>
 80047a0:	a901      	add	r1, sp, #4
 80047a2:	b142      	cbz	r2, 80047b6 <__ascii_mbtowc+0x1a>
 80047a4:	b14b      	cbz	r3, 80047ba <__ascii_mbtowc+0x1e>
 80047a6:	7813      	ldrb	r3, [r2, #0]
 80047a8:	600b      	str	r3, [r1, #0]
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	1e10      	subs	r0, r2, #0
 80047ae:	bf18      	it	ne
 80047b0:	2001      	movne	r0, #1
 80047b2:	b002      	add	sp, #8
 80047b4:	4770      	bx	lr
 80047b6:	4610      	mov	r0, r2
 80047b8:	e7fb      	b.n	80047b2 <__ascii_mbtowc+0x16>
 80047ba:	f06f 0001 	mvn.w	r0, #1
 80047be:	e7f8      	b.n	80047b2 <__ascii_mbtowc+0x16>

080047c0 <_Balloc>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	b976      	cbnz	r6, 80047e8 <_Balloc+0x28>
 80047ca:	2010      	movs	r0, #16
 80047cc:	f000 fdca 	bl	8005364 <malloc>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6260      	str	r0, [r4, #36]	; 0x24
 80047d4:	b920      	cbnz	r0, 80047e0 <_Balloc+0x20>
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <_Balloc+0x78>)
 80047d8:	4818      	ldr	r0, [pc, #96]	; (800483c <_Balloc+0x7c>)
 80047da:	2166      	movs	r1, #102	; 0x66
 80047dc:	f000 fd92 	bl	8005304 <__assert_func>
 80047e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047e4:	6006      	str	r6, [r0, #0]
 80047e6:	60c6      	str	r6, [r0, #12]
 80047e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80047ea:	68f3      	ldr	r3, [r6, #12]
 80047ec:	b183      	cbz	r3, 8004810 <_Balloc+0x50>
 80047ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80047f6:	b9b8      	cbnz	r0, 8004828 <_Balloc+0x68>
 80047f8:	2101      	movs	r1, #1
 80047fa:	fa01 f605 	lsl.w	r6, r1, r5
 80047fe:	1d72      	adds	r2, r6, #5
 8004800:	0092      	lsls	r2, r2, #2
 8004802:	4620      	mov	r0, r4
 8004804:	f000 fc9a 	bl	800513c <_calloc_r>
 8004808:	b160      	cbz	r0, 8004824 <_Balloc+0x64>
 800480a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800480e:	e00e      	b.n	800482e <_Balloc+0x6e>
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	2104      	movs	r1, #4
 8004814:	4620      	mov	r0, r4
 8004816:	f000 fc91 	bl	800513c <_calloc_r>
 800481a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481c:	60f0      	str	r0, [r6, #12]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e4      	bne.n	80047ee <_Balloc+0x2e>
 8004824:	2000      	movs	r0, #0
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	6802      	ldr	r2, [r0, #0]
 800482a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800482e:	2300      	movs	r3, #0
 8004830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004834:	e7f7      	b.n	8004826 <_Balloc+0x66>
 8004836:	bf00      	nop
 8004838:	080062c4 	.word	0x080062c4
 800483c:	080062db 	.word	0x080062db

08004840 <_Bfree>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004844:	4605      	mov	r5, r0
 8004846:	460c      	mov	r4, r1
 8004848:	b976      	cbnz	r6, 8004868 <_Bfree+0x28>
 800484a:	2010      	movs	r0, #16
 800484c:	f000 fd8a 	bl	8005364 <malloc>
 8004850:	4602      	mov	r2, r0
 8004852:	6268      	str	r0, [r5, #36]	; 0x24
 8004854:	b920      	cbnz	r0, 8004860 <_Bfree+0x20>
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <_Bfree+0x3c>)
 8004858:	4809      	ldr	r0, [pc, #36]	; (8004880 <_Bfree+0x40>)
 800485a:	218a      	movs	r1, #138	; 0x8a
 800485c:	f000 fd52 	bl	8005304 <__assert_func>
 8004860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004864:	6006      	str	r6, [r0, #0]
 8004866:	60c6      	str	r6, [r0, #12]
 8004868:	b13c      	cbz	r4, 800487a <_Bfree+0x3a>
 800486a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800486c:	6862      	ldr	r2, [r4, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004874:	6021      	str	r1, [r4, #0]
 8004876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	080062c4 	.word	0x080062c4
 8004880:	080062db 	.word	0x080062db

08004884 <__multadd>:
 8004884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004888:	690d      	ldr	r5, [r1, #16]
 800488a:	4607      	mov	r7, r0
 800488c:	460c      	mov	r4, r1
 800488e:	461e      	mov	r6, r3
 8004890:	f101 0c14 	add.w	ip, r1, #20
 8004894:	2000      	movs	r0, #0
 8004896:	f8dc 3000 	ldr.w	r3, [ip]
 800489a:	b299      	uxth	r1, r3
 800489c:	fb02 6101 	mla	r1, r2, r1, r6
 80048a0:	0c1e      	lsrs	r6, r3, #16
 80048a2:	0c0b      	lsrs	r3, r1, #16
 80048a4:	fb02 3306 	mla	r3, r2, r6, r3
 80048a8:	b289      	uxth	r1, r1
 80048aa:	3001      	adds	r0, #1
 80048ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80048b0:	4285      	cmp	r5, r0
 80048b2:	f84c 1b04 	str.w	r1, [ip], #4
 80048b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80048ba:	dcec      	bgt.n	8004896 <__multadd+0x12>
 80048bc:	b30e      	cbz	r6, 8004902 <__multadd+0x7e>
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	42ab      	cmp	r3, r5
 80048c2:	dc19      	bgt.n	80048f8 <__multadd+0x74>
 80048c4:	6861      	ldr	r1, [r4, #4]
 80048c6:	4638      	mov	r0, r7
 80048c8:	3101      	adds	r1, #1
 80048ca:	f7ff ff79 	bl	80047c0 <_Balloc>
 80048ce:	4680      	mov	r8, r0
 80048d0:	b928      	cbnz	r0, 80048de <__multadd+0x5a>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <__multadd+0x84>)
 80048d6:	480d      	ldr	r0, [pc, #52]	; (800490c <__multadd+0x88>)
 80048d8:	21b5      	movs	r1, #181	; 0xb5
 80048da:	f000 fd13 	bl	8005304 <__assert_func>
 80048de:	6922      	ldr	r2, [r4, #16]
 80048e0:	3202      	adds	r2, #2
 80048e2:	f104 010c 	add.w	r1, r4, #12
 80048e6:	0092      	lsls	r2, r2, #2
 80048e8:	300c      	adds	r0, #12
 80048ea:	f7fe fde1 	bl	80034b0 <memcpy>
 80048ee:	4621      	mov	r1, r4
 80048f0:	4638      	mov	r0, r7
 80048f2:	f7ff ffa5 	bl	8004840 <_Bfree>
 80048f6:	4644      	mov	r4, r8
 80048f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048fc:	3501      	adds	r5, #1
 80048fe:	615e      	str	r6, [r3, #20]
 8004900:	6125      	str	r5, [r4, #16]
 8004902:	4620      	mov	r0, r4
 8004904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004908:	08006238 	.word	0x08006238
 800490c:	080062db 	.word	0x080062db

08004910 <__s2b>:
 8004910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004914:	460c      	mov	r4, r1
 8004916:	4615      	mov	r5, r2
 8004918:	461f      	mov	r7, r3
 800491a:	2209      	movs	r2, #9
 800491c:	3308      	adds	r3, #8
 800491e:	4606      	mov	r6, r0
 8004920:	fb93 f3f2 	sdiv	r3, r3, r2
 8004924:	2100      	movs	r1, #0
 8004926:	2201      	movs	r2, #1
 8004928:	429a      	cmp	r2, r3
 800492a:	db09      	blt.n	8004940 <__s2b+0x30>
 800492c:	4630      	mov	r0, r6
 800492e:	f7ff ff47 	bl	80047c0 <_Balloc>
 8004932:	b940      	cbnz	r0, 8004946 <__s2b+0x36>
 8004934:	4602      	mov	r2, r0
 8004936:	4b19      	ldr	r3, [pc, #100]	; (800499c <__s2b+0x8c>)
 8004938:	4819      	ldr	r0, [pc, #100]	; (80049a0 <__s2b+0x90>)
 800493a:	21ce      	movs	r1, #206	; 0xce
 800493c:	f000 fce2 	bl	8005304 <__assert_func>
 8004940:	0052      	lsls	r2, r2, #1
 8004942:	3101      	adds	r1, #1
 8004944:	e7f0      	b.n	8004928 <__s2b+0x18>
 8004946:	9b08      	ldr	r3, [sp, #32]
 8004948:	6143      	str	r3, [r0, #20]
 800494a:	2d09      	cmp	r5, #9
 800494c:	f04f 0301 	mov.w	r3, #1
 8004950:	6103      	str	r3, [r0, #16]
 8004952:	dd16      	ble.n	8004982 <__s2b+0x72>
 8004954:	f104 0909 	add.w	r9, r4, #9
 8004958:	46c8      	mov	r8, r9
 800495a:	442c      	add	r4, r5
 800495c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004960:	4601      	mov	r1, r0
 8004962:	3b30      	subs	r3, #48	; 0x30
 8004964:	220a      	movs	r2, #10
 8004966:	4630      	mov	r0, r6
 8004968:	f7ff ff8c 	bl	8004884 <__multadd>
 800496c:	45a0      	cmp	r8, r4
 800496e:	d1f5      	bne.n	800495c <__s2b+0x4c>
 8004970:	f1a5 0408 	sub.w	r4, r5, #8
 8004974:	444c      	add	r4, r9
 8004976:	1b2d      	subs	r5, r5, r4
 8004978:	1963      	adds	r3, r4, r5
 800497a:	42bb      	cmp	r3, r7
 800497c:	db04      	blt.n	8004988 <__s2b+0x78>
 800497e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004982:	340a      	adds	r4, #10
 8004984:	2509      	movs	r5, #9
 8004986:	e7f6      	b.n	8004976 <__s2b+0x66>
 8004988:	f814 3b01 	ldrb.w	r3, [r4], #1
 800498c:	4601      	mov	r1, r0
 800498e:	3b30      	subs	r3, #48	; 0x30
 8004990:	220a      	movs	r2, #10
 8004992:	4630      	mov	r0, r6
 8004994:	f7ff ff76 	bl	8004884 <__multadd>
 8004998:	e7ee      	b.n	8004978 <__s2b+0x68>
 800499a:	bf00      	nop
 800499c:	08006238 	.word	0x08006238
 80049a0:	080062db 	.word	0x080062db

080049a4 <__hi0bits>:
 80049a4:	0c03      	lsrs	r3, r0, #16
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	b9d3      	cbnz	r3, 80049e0 <__hi0bits+0x3c>
 80049aa:	0400      	lsls	r0, r0, #16
 80049ac:	2310      	movs	r3, #16
 80049ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80049b2:	bf04      	itt	eq
 80049b4:	0200      	lsleq	r0, r0, #8
 80049b6:	3308      	addeq	r3, #8
 80049b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80049bc:	bf04      	itt	eq
 80049be:	0100      	lsleq	r0, r0, #4
 80049c0:	3304      	addeq	r3, #4
 80049c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80049c6:	bf04      	itt	eq
 80049c8:	0080      	lsleq	r0, r0, #2
 80049ca:	3302      	addeq	r3, #2
 80049cc:	2800      	cmp	r0, #0
 80049ce:	db05      	blt.n	80049dc <__hi0bits+0x38>
 80049d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80049d4:	f103 0301 	add.w	r3, r3, #1
 80049d8:	bf08      	it	eq
 80049da:	2320      	moveq	r3, #32
 80049dc:	4618      	mov	r0, r3
 80049de:	4770      	bx	lr
 80049e0:	2300      	movs	r3, #0
 80049e2:	e7e4      	b.n	80049ae <__hi0bits+0xa>

080049e4 <__lo0bits>:
 80049e4:	6803      	ldr	r3, [r0, #0]
 80049e6:	f013 0207 	ands.w	r2, r3, #7
 80049ea:	4601      	mov	r1, r0
 80049ec:	d00b      	beq.n	8004a06 <__lo0bits+0x22>
 80049ee:	07da      	lsls	r2, r3, #31
 80049f0:	d423      	bmi.n	8004a3a <__lo0bits+0x56>
 80049f2:	0798      	lsls	r0, r3, #30
 80049f4:	bf49      	itett	mi
 80049f6:	085b      	lsrmi	r3, r3, #1
 80049f8:	089b      	lsrpl	r3, r3, #2
 80049fa:	2001      	movmi	r0, #1
 80049fc:	600b      	strmi	r3, [r1, #0]
 80049fe:	bf5c      	itt	pl
 8004a00:	600b      	strpl	r3, [r1, #0]
 8004a02:	2002      	movpl	r0, #2
 8004a04:	4770      	bx	lr
 8004a06:	b298      	uxth	r0, r3
 8004a08:	b9a8      	cbnz	r0, 8004a36 <__lo0bits+0x52>
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	2010      	movs	r0, #16
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	b90a      	cbnz	r2, 8004a16 <__lo0bits+0x32>
 8004a12:	3008      	adds	r0, #8
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	071a      	lsls	r2, r3, #28
 8004a18:	bf04      	itt	eq
 8004a1a:	091b      	lsreq	r3, r3, #4
 8004a1c:	3004      	addeq	r0, #4
 8004a1e:	079a      	lsls	r2, r3, #30
 8004a20:	bf04      	itt	eq
 8004a22:	089b      	lsreq	r3, r3, #2
 8004a24:	3002      	addeq	r0, #2
 8004a26:	07da      	lsls	r2, r3, #31
 8004a28:	d403      	bmi.n	8004a32 <__lo0bits+0x4e>
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	f100 0001 	add.w	r0, r0, #1
 8004a30:	d005      	beq.n	8004a3e <__lo0bits+0x5a>
 8004a32:	600b      	str	r3, [r1, #0]
 8004a34:	4770      	bx	lr
 8004a36:	4610      	mov	r0, r2
 8004a38:	e7e9      	b.n	8004a0e <__lo0bits+0x2a>
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	4770      	bx	lr
 8004a3e:	2020      	movs	r0, #32
 8004a40:	4770      	bx	lr
	...

08004a44 <__i2b>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	460c      	mov	r4, r1
 8004a48:	2101      	movs	r1, #1
 8004a4a:	f7ff feb9 	bl	80047c0 <_Balloc>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	b928      	cbnz	r0, 8004a5e <__i2b+0x1a>
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <__i2b+0x24>)
 8004a54:	4805      	ldr	r0, [pc, #20]	; (8004a6c <__i2b+0x28>)
 8004a56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004a5a:	f000 fc53 	bl	8005304 <__assert_func>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	6144      	str	r4, [r0, #20]
 8004a62:	6103      	str	r3, [r0, #16]
 8004a64:	bd10      	pop	{r4, pc}
 8004a66:	bf00      	nop
 8004a68:	08006238 	.word	0x08006238
 8004a6c:	080062db 	.word	0x080062db

08004a70 <__multiply>:
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	4691      	mov	r9, r2
 8004a76:	690a      	ldr	r2, [r1, #16]
 8004a78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	bfb8      	it	lt
 8004a80:	460b      	movlt	r3, r1
 8004a82:	460c      	mov	r4, r1
 8004a84:	bfbc      	itt	lt
 8004a86:	464c      	movlt	r4, r9
 8004a88:	4699      	movlt	r9, r3
 8004a8a:	6927      	ldr	r7, [r4, #16]
 8004a8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	6861      	ldr	r1, [r4, #4]
 8004a94:	eb07 060a 	add.w	r6, r7, sl
 8004a98:	42b3      	cmp	r3, r6
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	bfb8      	it	lt
 8004a9e:	3101      	addlt	r1, #1
 8004aa0:	f7ff fe8e 	bl	80047c0 <_Balloc>
 8004aa4:	b930      	cbnz	r0, 8004ab4 <__multiply+0x44>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b44      	ldr	r3, [pc, #272]	; (8004bbc <__multiply+0x14c>)
 8004aaa:	4845      	ldr	r0, [pc, #276]	; (8004bc0 <__multiply+0x150>)
 8004aac:	f240 115d 	movw	r1, #349	; 0x15d
 8004ab0:	f000 fc28 	bl	8005304 <__assert_func>
 8004ab4:	f100 0514 	add.w	r5, r0, #20
 8004ab8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004abc:	462b      	mov	r3, r5
 8004abe:	2200      	movs	r2, #0
 8004ac0:	4543      	cmp	r3, r8
 8004ac2:	d321      	bcc.n	8004b08 <__multiply+0x98>
 8004ac4:	f104 0314 	add.w	r3, r4, #20
 8004ac8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004acc:	f109 0314 	add.w	r3, r9, #20
 8004ad0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004ad4:	9202      	str	r2, [sp, #8]
 8004ad6:	1b3a      	subs	r2, r7, r4
 8004ad8:	3a15      	subs	r2, #21
 8004ada:	f022 0203 	bic.w	r2, r2, #3
 8004ade:	3204      	adds	r2, #4
 8004ae0:	f104 0115 	add.w	r1, r4, #21
 8004ae4:	428f      	cmp	r7, r1
 8004ae6:	bf38      	it	cc
 8004ae8:	2204      	movcc	r2, #4
 8004aea:	9201      	str	r2, [sp, #4]
 8004aec:	9a02      	ldr	r2, [sp, #8]
 8004aee:	9303      	str	r3, [sp, #12]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d80c      	bhi.n	8004b0e <__multiply+0x9e>
 8004af4:	2e00      	cmp	r6, #0
 8004af6:	dd03      	ble.n	8004b00 <__multiply+0x90>
 8004af8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d05a      	beq.n	8004bb6 <__multiply+0x146>
 8004b00:	6106      	str	r6, [r0, #16]
 8004b02:	b005      	add	sp, #20
 8004b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b08:	f843 2b04 	str.w	r2, [r3], #4
 8004b0c:	e7d8      	b.n	8004ac0 <__multiply+0x50>
 8004b0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b12:	f1ba 0f00 	cmp.w	sl, #0
 8004b16:	d024      	beq.n	8004b62 <__multiply+0xf2>
 8004b18:	f104 0e14 	add.w	lr, r4, #20
 8004b1c:	46a9      	mov	r9, r5
 8004b1e:	f04f 0c00 	mov.w	ip, #0
 8004b22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004b26:	f8d9 1000 	ldr.w	r1, [r9]
 8004b2a:	fa1f fb82 	uxth.w	fp, r2
 8004b2e:	b289      	uxth	r1, r1
 8004b30:	fb0a 110b 	mla	r1, sl, fp, r1
 8004b34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004b38:	f8d9 2000 	ldr.w	r2, [r9]
 8004b3c:	4461      	add	r1, ip
 8004b3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004b42:	fb0a c20b 	mla	r2, sl, fp, ip
 8004b46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004b4a:	b289      	uxth	r1, r1
 8004b4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004b50:	4577      	cmp	r7, lr
 8004b52:	f849 1b04 	str.w	r1, [r9], #4
 8004b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004b5a:	d8e2      	bhi.n	8004b22 <__multiply+0xb2>
 8004b5c:	9a01      	ldr	r2, [sp, #4]
 8004b5e:	f845 c002 	str.w	ip, [r5, r2]
 8004b62:	9a03      	ldr	r2, [sp, #12]
 8004b64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	f1b9 0f00 	cmp.w	r9, #0
 8004b6e:	d020      	beq.n	8004bb2 <__multiply+0x142>
 8004b70:	6829      	ldr	r1, [r5, #0]
 8004b72:	f104 0c14 	add.w	ip, r4, #20
 8004b76:	46ae      	mov	lr, r5
 8004b78:	f04f 0a00 	mov.w	sl, #0
 8004b7c:	f8bc b000 	ldrh.w	fp, [ip]
 8004b80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004b84:	fb09 220b 	mla	r2, r9, fp, r2
 8004b88:	4492      	add	sl, r2
 8004b8a:	b289      	uxth	r1, r1
 8004b8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004b90:	f84e 1b04 	str.w	r1, [lr], #4
 8004b94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004b98:	f8be 1000 	ldrh.w	r1, [lr]
 8004b9c:	0c12      	lsrs	r2, r2, #16
 8004b9e:	fb09 1102 	mla	r1, r9, r2, r1
 8004ba2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004ba6:	4567      	cmp	r7, ip
 8004ba8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004bac:	d8e6      	bhi.n	8004b7c <__multiply+0x10c>
 8004bae:	9a01      	ldr	r2, [sp, #4]
 8004bb0:	50a9      	str	r1, [r5, r2]
 8004bb2:	3504      	adds	r5, #4
 8004bb4:	e79a      	b.n	8004aec <__multiply+0x7c>
 8004bb6:	3e01      	subs	r6, #1
 8004bb8:	e79c      	b.n	8004af4 <__multiply+0x84>
 8004bba:	bf00      	nop
 8004bbc:	08006238 	.word	0x08006238
 8004bc0:	080062db 	.word	0x080062db

08004bc4 <__pow5mult>:
 8004bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc8:	4615      	mov	r5, r2
 8004bca:	f012 0203 	ands.w	r2, r2, #3
 8004bce:	4606      	mov	r6, r0
 8004bd0:	460f      	mov	r7, r1
 8004bd2:	d007      	beq.n	8004be4 <__pow5mult+0x20>
 8004bd4:	4c25      	ldr	r4, [pc, #148]	; (8004c6c <__pow5mult+0xa8>)
 8004bd6:	3a01      	subs	r2, #1
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004bde:	f7ff fe51 	bl	8004884 <__multadd>
 8004be2:	4607      	mov	r7, r0
 8004be4:	10ad      	asrs	r5, r5, #2
 8004be6:	d03d      	beq.n	8004c64 <__pow5mult+0xa0>
 8004be8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004bea:	b97c      	cbnz	r4, 8004c0c <__pow5mult+0x48>
 8004bec:	2010      	movs	r0, #16
 8004bee:	f000 fbb9 	bl	8005364 <malloc>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	6270      	str	r0, [r6, #36]	; 0x24
 8004bf6:	b928      	cbnz	r0, 8004c04 <__pow5mult+0x40>
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <__pow5mult+0xac>)
 8004bfa:	481e      	ldr	r0, [pc, #120]	; (8004c74 <__pow5mult+0xb0>)
 8004bfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c00:	f000 fb80 	bl	8005304 <__assert_func>
 8004c04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c08:	6004      	str	r4, [r0, #0]
 8004c0a:	60c4      	str	r4, [r0, #12]
 8004c0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c14:	b94c      	cbnz	r4, 8004c2a <__pow5mult+0x66>
 8004c16:	f240 2171 	movw	r1, #625	; 0x271
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f7ff ff12 	bl	8004a44 <__i2b>
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c26:	4604      	mov	r4, r0
 8004c28:	6003      	str	r3, [r0, #0]
 8004c2a:	f04f 0900 	mov.w	r9, #0
 8004c2e:	07eb      	lsls	r3, r5, #31
 8004c30:	d50a      	bpl.n	8004c48 <__pow5mult+0x84>
 8004c32:	4639      	mov	r1, r7
 8004c34:	4622      	mov	r2, r4
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7ff ff1a 	bl	8004a70 <__multiply>
 8004c3c:	4639      	mov	r1, r7
 8004c3e:	4680      	mov	r8, r0
 8004c40:	4630      	mov	r0, r6
 8004c42:	f7ff fdfd 	bl	8004840 <_Bfree>
 8004c46:	4647      	mov	r7, r8
 8004c48:	106d      	asrs	r5, r5, #1
 8004c4a:	d00b      	beq.n	8004c64 <__pow5mult+0xa0>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	b938      	cbnz	r0, 8004c60 <__pow5mult+0x9c>
 8004c50:	4622      	mov	r2, r4
 8004c52:	4621      	mov	r1, r4
 8004c54:	4630      	mov	r0, r6
 8004c56:	f7ff ff0b 	bl	8004a70 <__multiply>
 8004c5a:	6020      	str	r0, [r4, #0]
 8004c5c:	f8c0 9000 	str.w	r9, [r0]
 8004c60:	4604      	mov	r4, r0
 8004c62:	e7e4      	b.n	8004c2e <__pow5mult+0x6a>
 8004c64:	4638      	mov	r0, r7
 8004c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6a:	bf00      	nop
 8004c6c:	08006428 	.word	0x08006428
 8004c70:	080062c4 	.word	0x080062c4
 8004c74:	080062db 	.word	0x080062db

08004c78 <__lshift>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	6849      	ldr	r1, [r1, #4]
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	4607      	mov	r7, r0
 8004c8a:	4691      	mov	r9, r2
 8004c8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c90:	f108 0601 	add.w	r6, r8, #1
 8004c94:	42b3      	cmp	r3, r6
 8004c96:	db0b      	blt.n	8004cb0 <__lshift+0x38>
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff fd91 	bl	80047c0 <_Balloc>
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	b948      	cbnz	r0, 8004cb6 <__lshift+0x3e>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <__lshift+0xd8>)
 8004ca6:	482b      	ldr	r0, [pc, #172]	; (8004d54 <__lshift+0xdc>)
 8004ca8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004cac:	f000 fb2a 	bl	8005304 <__assert_func>
 8004cb0:	3101      	adds	r1, #1
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	e7ee      	b.n	8004c94 <__lshift+0x1c>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f100 0114 	add.w	r1, r0, #20
 8004cbc:	f100 0210 	add.w	r2, r0, #16
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	4553      	cmp	r3, sl
 8004cc4:	db37      	blt.n	8004d36 <__lshift+0xbe>
 8004cc6:	6920      	ldr	r0, [r4, #16]
 8004cc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ccc:	f104 0314 	add.w	r3, r4, #20
 8004cd0:	f019 091f 	ands.w	r9, r9, #31
 8004cd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004cd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004cdc:	d02f      	beq.n	8004d3e <__lshift+0xc6>
 8004cde:	f1c9 0e20 	rsb	lr, r9, #32
 8004ce2:	468a      	mov	sl, r1
 8004ce4:	f04f 0c00 	mov.w	ip, #0
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	fa02 f209 	lsl.w	r2, r2, r9
 8004cee:	ea42 020c 	orr.w	r2, r2, ip
 8004cf2:	f84a 2b04 	str.w	r2, [sl], #4
 8004cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cfa:	4298      	cmp	r0, r3
 8004cfc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004d00:	d8f2      	bhi.n	8004ce8 <__lshift+0x70>
 8004d02:	1b03      	subs	r3, r0, r4
 8004d04:	3b15      	subs	r3, #21
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	f104 0215 	add.w	r2, r4, #21
 8004d10:	4290      	cmp	r0, r2
 8004d12:	bf38      	it	cc
 8004d14:	2304      	movcc	r3, #4
 8004d16:	f841 c003 	str.w	ip, [r1, r3]
 8004d1a:	f1bc 0f00 	cmp.w	ip, #0
 8004d1e:	d001      	beq.n	8004d24 <__lshift+0xac>
 8004d20:	f108 0602 	add.w	r6, r8, #2
 8004d24:	3e01      	subs	r6, #1
 8004d26:	4638      	mov	r0, r7
 8004d28:	612e      	str	r6, [r5, #16]
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	f7ff fd88 	bl	8004840 <_Bfree>
 8004d30:	4628      	mov	r0, r5
 8004d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d36:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	e7c1      	b.n	8004cc2 <__lshift+0x4a>
 8004d3e:	3904      	subs	r1, #4
 8004d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d44:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d48:	4298      	cmp	r0, r3
 8004d4a:	d8f9      	bhi.n	8004d40 <__lshift+0xc8>
 8004d4c:	e7ea      	b.n	8004d24 <__lshift+0xac>
 8004d4e:	bf00      	nop
 8004d50:	08006238 	.word	0x08006238
 8004d54:	080062db 	.word	0x080062db

08004d58 <__mcmp>:
 8004d58:	b530      	push	{r4, r5, lr}
 8004d5a:	6902      	ldr	r2, [r0, #16]
 8004d5c:	690c      	ldr	r4, [r1, #16]
 8004d5e:	1b12      	subs	r2, r2, r4
 8004d60:	d10e      	bne.n	8004d80 <__mcmp+0x28>
 8004d62:	f100 0314 	add.w	r3, r0, #20
 8004d66:	3114      	adds	r1, #20
 8004d68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004d6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004d70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004d74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004d78:	42a5      	cmp	r5, r4
 8004d7a:	d003      	beq.n	8004d84 <__mcmp+0x2c>
 8004d7c:	d305      	bcc.n	8004d8a <__mcmp+0x32>
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4610      	mov	r0, r2
 8004d82:	bd30      	pop	{r4, r5, pc}
 8004d84:	4283      	cmp	r3, r0
 8004d86:	d3f3      	bcc.n	8004d70 <__mcmp+0x18>
 8004d88:	e7fa      	b.n	8004d80 <__mcmp+0x28>
 8004d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8e:	e7f7      	b.n	8004d80 <__mcmp+0x28>

08004d90 <__mdiff>:
 8004d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	460c      	mov	r4, r1
 8004d96:	4606      	mov	r6, r0
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	4690      	mov	r8, r2
 8004d9e:	f7ff ffdb 	bl	8004d58 <__mcmp>
 8004da2:	1e05      	subs	r5, r0, #0
 8004da4:	d110      	bne.n	8004dc8 <__mdiff+0x38>
 8004da6:	4629      	mov	r1, r5
 8004da8:	4630      	mov	r0, r6
 8004daa:	f7ff fd09 	bl	80047c0 <_Balloc>
 8004dae:	b930      	cbnz	r0, 8004dbe <__mdiff+0x2e>
 8004db0:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <__mdiff+0x10c>)
 8004db2:	4602      	mov	r2, r0
 8004db4:	f240 2132 	movw	r1, #562	; 0x232
 8004db8:	4839      	ldr	r0, [pc, #228]	; (8004ea0 <__mdiff+0x110>)
 8004dba:	f000 faa3 	bl	8005304 <__assert_func>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc8:	bfa4      	itt	ge
 8004dca:	4643      	movge	r3, r8
 8004dcc:	46a0      	movge	r8, r4
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004dd4:	bfa6      	itte	ge
 8004dd6:	461c      	movge	r4, r3
 8004dd8:	2500      	movge	r5, #0
 8004dda:	2501      	movlt	r5, #1
 8004ddc:	f7ff fcf0 	bl	80047c0 <_Balloc>
 8004de0:	b920      	cbnz	r0, 8004dec <__mdiff+0x5c>
 8004de2:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <__mdiff+0x10c>)
 8004de4:	4602      	mov	r2, r0
 8004de6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004dea:	e7e5      	b.n	8004db8 <__mdiff+0x28>
 8004dec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004df0:	6926      	ldr	r6, [r4, #16]
 8004df2:	60c5      	str	r5, [r0, #12]
 8004df4:	f104 0914 	add.w	r9, r4, #20
 8004df8:	f108 0514 	add.w	r5, r8, #20
 8004dfc:	f100 0e14 	add.w	lr, r0, #20
 8004e00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004e04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004e08:	f108 0210 	add.w	r2, r8, #16
 8004e0c:	46f2      	mov	sl, lr
 8004e0e:	2100      	movs	r1, #0
 8004e10:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004e18:	fa1f f883 	uxth.w	r8, r3
 8004e1c:	fa11 f18b 	uxtah	r1, r1, fp
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	eba1 0808 	sub.w	r8, r1, r8
 8004e26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004e2e:	fa1f f888 	uxth.w	r8, r8
 8004e32:	1419      	asrs	r1, r3, #16
 8004e34:	454e      	cmp	r6, r9
 8004e36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004e3a:	f84a 3b04 	str.w	r3, [sl], #4
 8004e3e:	d8e7      	bhi.n	8004e10 <__mdiff+0x80>
 8004e40:	1b33      	subs	r3, r6, r4
 8004e42:	3b15      	subs	r3, #21
 8004e44:	f023 0303 	bic.w	r3, r3, #3
 8004e48:	3304      	adds	r3, #4
 8004e4a:	3415      	adds	r4, #21
 8004e4c:	42a6      	cmp	r6, r4
 8004e4e:	bf38      	it	cc
 8004e50:	2304      	movcc	r3, #4
 8004e52:	441d      	add	r5, r3
 8004e54:	4473      	add	r3, lr
 8004e56:	469e      	mov	lr, r3
 8004e58:	462e      	mov	r6, r5
 8004e5a:	4566      	cmp	r6, ip
 8004e5c:	d30e      	bcc.n	8004e7c <__mdiff+0xec>
 8004e5e:	f10c 0203 	add.w	r2, ip, #3
 8004e62:	1b52      	subs	r2, r2, r5
 8004e64:	f022 0203 	bic.w	r2, r2, #3
 8004e68:	3d03      	subs	r5, #3
 8004e6a:	45ac      	cmp	ip, r5
 8004e6c:	bf38      	it	cc
 8004e6e:	2200      	movcc	r2, #0
 8004e70:	441a      	add	r2, r3
 8004e72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004e76:	b17b      	cbz	r3, 8004e98 <__mdiff+0x108>
 8004e78:	6107      	str	r7, [r0, #16]
 8004e7a:	e7a3      	b.n	8004dc4 <__mdiff+0x34>
 8004e7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8004e80:	fa11 f288 	uxtah	r2, r1, r8
 8004e84:	1414      	asrs	r4, r2, #16
 8004e86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004e90:	f84e 2b04 	str.w	r2, [lr], #4
 8004e94:	1421      	asrs	r1, r4, #16
 8004e96:	e7e0      	b.n	8004e5a <__mdiff+0xca>
 8004e98:	3f01      	subs	r7, #1
 8004e9a:	e7ea      	b.n	8004e72 <__mdiff+0xe2>
 8004e9c:	08006238 	.word	0x08006238
 8004ea0:	080062db 	.word	0x080062db

08004ea4 <__ulp>:
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	ed8d 0b00 	vstr	d0, [sp]
 8004eaa:	9b01      	ldr	r3, [sp, #4]
 8004eac:	4912      	ldr	r1, [pc, #72]	; (8004ef8 <__ulp+0x54>)
 8004eae:	4019      	ands	r1, r3
 8004eb0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	dd05      	ble.n	8004ec4 <__ulp+0x20>
 8004eb8:	2200      	movs	r2, #0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	ec43 2b10 	vmov	d0, r2, r3
 8004ec0:	b002      	add	sp, #8
 8004ec2:	4770      	bx	lr
 8004ec4:	4249      	negs	r1, r1
 8004ec6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8004eca:	ea4f 5021 	mov.w	r0, r1, asr #20
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	da04      	bge.n	8004ee2 <__ulp+0x3e>
 8004ed8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004edc:	fa41 f300 	asr.w	r3, r1, r0
 8004ee0:	e7ec      	b.n	8004ebc <__ulp+0x18>
 8004ee2:	f1a0 0114 	sub.w	r1, r0, #20
 8004ee6:	291e      	cmp	r1, #30
 8004ee8:	bfda      	itte	le
 8004eea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8004eee:	fa20 f101 	lsrle.w	r1, r0, r1
 8004ef2:	2101      	movgt	r1, #1
 8004ef4:	460a      	mov	r2, r1
 8004ef6:	e7e1      	b.n	8004ebc <__ulp+0x18>
 8004ef8:	7ff00000 	.word	0x7ff00000

08004efc <__b2d>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	6905      	ldr	r5, [r0, #16]
 8004f00:	f100 0714 	add.w	r7, r0, #20
 8004f04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004f08:	1f2e      	subs	r6, r5, #4
 8004f0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff fd48 	bl	80049a4 <__hi0bits>
 8004f14:	f1c0 0320 	rsb	r3, r0, #32
 8004f18:	280a      	cmp	r0, #10
 8004f1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8004f98 <__b2d+0x9c>
 8004f1e:	600b      	str	r3, [r1, #0]
 8004f20:	dc14      	bgt.n	8004f4c <__b2d+0x50>
 8004f22:	f1c0 0e0b 	rsb	lr, r0, #11
 8004f26:	fa24 f10e 	lsr.w	r1, r4, lr
 8004f2a:	42b7      	cmp	r7, r6
 8004f2c:	ea41 030c 	orr.w	r3, r1, ip
 8004f30:	bf34      	ite	cc
 8004f32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8004f36:	2100      	movcs	r1, #0
 8004f38:	3015      	adds	r0, #21
 8004f3a:	fa04 f000 	lsl.w	r0, r4, r0
 8004f3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8004f42:	ea40 0201 	orr.w	r2, r0, r1
 8004f46:	ec43 2b10 	vmov	d0, r2, r3
 8004f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f4c:	42b7      	cmp	r7, r6
 8004f4e:	bf3a      	itte	cc
 8004f50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8004f54:	f1a5 0608 	subcc.w	r6, r5, #8
 8004f58:	2100      	movcs	r1, #0
 8004f5a:	380b      	subs	r0, #11
 8004f5c:	d017      	beq.n	8004f8e <__b2d+0x92>
 8004f5e:	f1c0 0c20 	rsb	ip, r0, #32
 8004f62:	fa04 f500 	lsl.w	r5, r4, r0
 8004f66:	42be      	cmp	r6, r7
 8004f68:	fa21 f40c 	lsr.w	r4, r1, ip
 8004f6c:	ea45 0504 	orr.w	r5, r5, r4
 8004f70:	bf8c      	ite	hi
 8004f72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8004f76:	2400      	movls	r4, #0
 8004f78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8004f7c:	fa01 f000 	lsl.w	r0, r1, r0
 8004f80:	fa24 f40c 	lsr.w	r4, r4, ip
 8004f84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f88:	ea40 0204 	orr.w	r2, r0, r4
 8004f8c:	e7db      	b.n	8004f46 <__b2d+0x4a>
 8004f8e:	ea44 030c 	orr.w	r3, r4, ip
 8004f92:	460a      	mov	r2, r1
 8004f94:	e7d7      	b.n	8004f46 <__b2d+0x4a>
 8004f96:	bf00      	nop
 8004f98:	3ff00000 	.word	0x3ff00000

08004f9c <__d2b>:
 8004f9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fa0:	4689      	mov	r9, r1
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	ec57 6b10 	vmov	r6, r7, d0
 8004fa8:	4690      	mov	r8, r2
 8004faa:	f7ff fc09 	bl	80047c0 <_Balloc>
 8004fae:	4604      	mov	r4, r0
 8004fb0:	b930      	cbnz	r0, 8004fc0 <__d2b+0x24>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4b25      	ldr	r3, [pc, #148]	; (800504c <__d2b+0xb0>)
 8004fb6:	4826      	ldr	r0, [pc, #152]	; (8005050 <__d2b+0xb4>)
 8004fb8:	f240 310a 	movw	r1, #778	; 0x30a
 8004fbc:	f000 f9a2 	bl	8005304 <__assert_func>
 8004fc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004fc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004fc8:	bb35      	cbnz	r5, 8005018 <__d2b+0x7c>
 8004fca:	2e00      	cmp	r6, #0
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	d028      	beq.n	8005022 <__d2b+0x86>
 8004fd0:	4668      	mov	r0, sp
 8004fd2:	9600      	str	r6, [sp, #0]
 8004fd4:	f7ff fd06 	bl	80049e4 <__lo0bits>
 8004fd8:	9900      	ldr	r1, [sp, #0]
 8004fda:	b300      	cbz	r0, 800501e <__d2b+0x82>
 8004fdc:	9a01      	ldr	r2, [sp, #4]
 8004fde:	f1c0 0320 	rsb	r3, r0, #32
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	40c2      	lsrs	r2, r0
 8004fea:	6163      	str	r3, [r4, #20]
 8004fec:	9201      	str	r2, [sp, #4]
 8004fee:	9b01      	ldr	r3, [sp, #4]
 8004ff0:	61a3      	str	r3, [r4, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf14      	ite	ne
 8004ff6:	2202      	movne	r2, #2
 8004ff8:	2201      	moveq	r2, #1
 8004ffa:	6122      	str	r2, [r4, #16]
 8004ffc:	b1d5      	cbz	r5, 8005034 <__d2b+0x98>
 8004ffe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005002:	4405      	add	r5, r0
 8005004:	f8c9 5000 	str.w	r5, [r9]
 8005008:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800500c:	f8c8 0000 	str.w	r0, [r8]
 8005010:	4620      	mov	r0, r4
 8005012:	b003      	add	sp, #12
 8005014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501c:	e7d5      	b.n	8004fca <__d2b+0x2e>
 800501e:	6161      	str	r1, [r4, #20]
 8005020:	e7e5      	b.n	8004fee <__d2b+0x52>
 8005022:	a801      	add	r0, sp, #4
 8005024:	f7ff fcde 	bl	80049e4 <__lo0bits>
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	6163      	str	r3, [r4, #20]
 800502c:	2201      	movs	r2, #1
 800502e:	6122      	str	r2, [r4, #16]
 8005030:	3020      	adds	r0, #32
 8005032:	e7e3      	b.n	8004ffc <__d2b+0x60>
 8005034:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005038:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800503c:	f8c9 0000 	str.w	r0, [r9]
 8005040:	6918      	ldr	r0, [r3, #16]
 8005042:	f7ff fcaf 	bl	80049a4 <__hi0bits>
 8005046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800504a:	e7df      	b.n	800500c <__d2b+0x70>
 800504c:	08006238 	.word	0x08006238
 8005050:	080062db 	.word	0x080062db

08005054 <__ratio>:
 8005054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005058:	4688      	mov	r8, r1
 800505a:	4669      	mov	r1, sp
 800505c:	4681      	mov	r9, r0
 800505e:	f7ff ff4d 	bl	8004efc <__b2d>
 8005062:	a901      	add	r1, sp, #4
 8005064:	4640      	mov	r0, r8
 8005066:	ec55 4b10 	vmov	r4, r5, d0
 800506a:	ee10 aa10 	vmov	sl, s0
 800506e:	f7ff ff45 	bl	8004efc <__b2d>
 8005072:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005076:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800507a:	1a59      	subs	r1, r3, r1
 800507c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005086:	ec57 6b10 	vmov	r6, r7, d0
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfd6      	itet	le
 800508e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005092:	462a      	movgt	r2, r5
 8005094:	463a      	movle	r2, r7
 8005096:	46ab      	mov	fp, r5
 8005098:	bfd6      	itet	le
 800509a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800509e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80050a2:	ee00 3a90 	vmovle	s1, r3
 80050a6:	ec4b ab17 	vmov	d7, sl, fp
 80050aa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80050ae:	b003      	add	sp, #12
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080050b4 <__copybits>:
 80050b4:	3901      	subs	r1, #1
 80050b6:	b570      	push	{r4, r5, r6, lr}
 80050b8:	1149      	asrs	r1, r1, #5
 80050ba:	6914      	ldr	r4, [r2, #16]
 80050bc:	3101      	adds	r1, #1
 80050be:	f102 0314 	add.w	r3, r2, #20
 80050c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80050c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80050ca:	1f05      	subs	r5, r0, #4
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d30c      	bcc.n	80050ea <__copybits+0x36>
 80050d0:	1aa3      	subs	r3, r4, r2
 80050d2:	3b11      	subs	r3, #17
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	3211      	adds	r2, #17
 80050da:	42a2      	cmp	r2, r4
 80050dc:	bf88      	it	hi
 80050de:	2300      	movhi	r3, #0
 80050e0:	4418      	add	r0, r3
 80050e2:	2300      	movs	r3, #0
 80050e4:	4288      	cmp	r0, r1
 80050e6:	d305      	bcc.n	80050f4 <__copybits+0x40>
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80050ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80050f2:	e7eb      	b.n	80050cc <__copybits+0x18>
 80050f4:	f840 3b04 	str.w	r3, [r0], #4
 80050f8:	e7f4      	b.n	80050e4 <__copybits+0x30>

080050fa <__any_on>:
 80050fa:	f100 0214 	add.w	r2, r0, #20
 80050fe:	6900      	ldr	r0, [r0, #16]
 8005100:	114b      	asrs	r3, r1, #5
 8005102:	4298      	cmp	r0, r3
 8005104:	b510      	push	{r4, lr}
 8005106:	db11      	blt.n	800512c <__any_on+0x32>
 8005108:	dd0a      	ble.n	8005120 <__any_on+0x26>
 800510a:	f011 011f 	ands.w	r1, r1, #31
 800510e:	d007      	beq.n	8005120 <__any_on+0x26>
 8005110:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005114:	fa24 f001 	lsr.w	r0, r4, r1
 8005118:	fa00 f101 	lsl.w	r1, r0, r1
 800511c:	428c      	cmp	r4, r1
 800511e:	d10b      	bne.n	8005138 <__any_on+0x3e>
 8005120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005124:	4293      	cmp	r3, r2
 8005126:	d803      	bhi.n	8005130 <__any_on+0x36>
 8005128:	2000      	movs	r0, #0
 800512a:	bd10      	pop	{r4, pc}
 800512c:	4603      	mov	r3, r0
 800512e:	e7f7      	b.n	8005120 <__any_on+0x26>
 8005130:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005134:	2900      	cmp	r1, #0
 8005136:	d0f5      	beq.n	8005124 <__any_on+0x2a>
 8005138:	2001      	movs	r0, #1
 800513a:	e7f6      	b.n	800512a <__any_on+0x30>

0800513c <_calloc_r>:
 800513c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800513e:	fba1 2402 	umull	r2, r4, r1, r2
 8005142:	b94c      	cbnz	r4, 8005158 <_calloc_r+0x1c>
 8005144:	4611      	mov	r1, r2
 8005146:	9201      	str	r2, [sp, #4]
 8005148:	f000 f82e 	bl	80051a8 <_malloc_r>
 800514c:	9a01      	ldr	r2, [sp, #4]
 800514e:	4605      	mov	r5, r0
 8005150:	b930      	cbnz	r0, 8005160 <_calloc_r+0x24>
 8005152:	4628      	mov	r0, r5
 8005154:	b003      	add	sp, #12
 8005156:	bd30      	pop	{r4, r5, pc}
 8005158:	220c      	movs	r2, #12
 800515a:	6002      	str	r2, [r0, #0]
 800515c:	2500      	movs	r5, #0
 800515e:	e7f8      	b.n	8005152 <_calloc_r+0x16>
 8005160:	4621      	mov	r1, r4
 8005162:	f7fe f9b3 	bl	80034cc <memset>
 8005166:	e7f4      	b.n	8005152 <_calloc_r+0x16>

08005168 <sbrk_aligned>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4e0e      	ldr	r6, [pc, #56]	; (80051a4 <sbrk_aligned+0x3c>)
 800516c:	460c      	mov	r4, r1
 800516e:	6831      	ldr	r1, [r6, #0]
 8005170:	4605      	mov	r5, r0
 8005172:	b911      	cbnz	r1, 800517a <sbrk_aligned+0x12>
 8005174:	f000 f894 	bl	80052a0 <_sbrk_r>
 8005178:	6030      	str	r0, [r6, #0]
 800517a:	4621      	mov	r1, r4
 800517c:	4628      	mov	r0, r5
 800517e:	f000 f88f 	bl	80052a0 <_sbrk_r>
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	d00a      	beq.n	800519c <sbrk_aligned+0x34>
 8005186:	1cc4      	adds	r4, r0, #3
 8005188:	f024 0403 	bic.w	r4, r4, #3
 800518c:	42a0      	cmp	r0, r4
 800518e:	d007      	beq.n	80051a0 <sbrk_aligned+0x38>
 8005190:	1a21      	subs	r1, r4, r0
 8005192:	4628      	mov	r0, r5
 8005194:	f000 f884 	bl	80052a0 <_sbrk_r>
 8005198:	3001      	adds	r0, #1
 800519a:	d101      	bne.n	80051a0 <sbrk_aligned+0x38>
 800519c:	f04f 34ff 	mov.w	r4, #4294967295
 80051a0:	4620      	mov	r0, r4
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	240003d4 	.word	0x240003d4

080051a8 <_malloc_r>:
 80051a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ac:	1ccd      	adds	r5, r1, #3
 80051ae:	f025 0503 	bic.w	r5, r5, #3
 80051b2:	3508      	adds	r5, #8
 80051b4:	2d0c      	cmp	r5, #12
 80051b6:	bf38      	it	cc
 80051b8:	250c      	movcc	r5, #12
 80051ba:	2d00      	cmp	r5, #0
 80051bc:	4607      	mov	r7, r0
 80051be:	db01      	blt.n	80051c4 <_malloc_r+0x1c>
 80051c0:	42a9      	cmp	r1, r5
 80051c2:	d905      	bls.n	80051d0 <_malloc_r+0x28>
 80051c4:	230c      	movs	r3, #12
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	2600      	movs	r6, #0
 80051ca:	4630      	mov	r0, r6
 80051cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d0:	4e2e      	ldr	r6, [pc, #184]	; (800528c <_malloc_r+0xe4>)
 80051d2:	f000 f8cf 	bl	8005374 <__malloc_lock>
 80051d6:	6833      	ldr	r3, [r6, #0]
 80051d8:	461c      	mov	r4, r3
 80051da:	bb34      	cbnz	r4, 800522a <_malloc_r+0x82>
 80051dc:	4629      	mov	r1, r5
 80051de:	4638      	mov	r0, r7
 80051e0:	f7ff ffc2 	bl	8005168 <sbrk_aligned>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	4604      	mov	r4, r0
 80051e8:	d14d      	bne.n	8005286 <_malloc_r+0xde>
 80051ea:	6834      	ldr	r4, [r6, #0]
 80051ec:	4626      	mov	r6, r4
 80051ee:	2e00      	cmp	r6, #0
 80051f0:	d140      	bne.n	8005274 <_malloc_r+0xcc>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	4631      	mov	r1, r6
 80051f6:	4638      	mov	r0, r7
 80051f8:	eb04 0803 	add.w	r8, r4, r3
 80051fc:	f000 f850 	bl	80052a0 <_sbrk_r>
 8005200:	4580      	cmp	r8, r0
 8005202:	d13a      	bne.n	800527a <_malloc_r+0xd2>
 8005204:	6821      	ldr	r1, [r4, #0]
 8005206:	3503      	adds	r5, #3
 8005208:	1a6d      	subs	r5, r5, r1
 800520a:	f025 0503 	bic.w	r5, r5, #3
 800520e:	3508      	adds	r5, #8
 8005210:	2d0c      	cmp	r5, #12
 8005212:	bf38      	it	cc
 8005214:	250c      	movcc	r5, #12
 8005216:	4629      	mov	r1, r5
 8005218:	4638      	mov	r0, r7
 800521a:	f7ff ffa5 	bl	8005168 <sbrk_aligned>
 800521e:	3001      	adds	r0, #1
 8005220:	d02b      	beq.n	800527a <_malloc_r+0xd2>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	442b      	add	r3, r5
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	e00e      	b.n	8005248 <_malloc_r+0xa0>
 800522a:	6822      	ldr	r2, [r4, #0]
 800522c:	1b52      	subs	r2, r2, r5
 800522e:	d41e      	bmi.n	800526e <_malloc_r+0xc6>
 8005230:	2a0b      	cmp	r2, #11
 8005232:	d916      	bls.n	8005262 <_malloc_r+0xba>
 8005234:	1961      	adds	r1, r4, r5
 8005236:	42a3      	cmp	r3, r4
 8005238:	6025      	str	r5, [r4, #0]
 800523a:	bf18      	it	ne
 800523c:	6059      	strne	r1, [r3, #4]
 800523e:	6863      	ldr	r3, [r4, #4]
 8005240:	bf08      	it	eq
 8005242:	6031      	streq	r1, [r6, #0]
 8005244:	5162      	str	r2, [r4, r5]
 8005246:	604b      	str	r3, [r1, #4]
 8005248:	4638      	mov	r0, r7
 800524a:	f104 060b 	add.w	r6, r4, #11
 800524e:	f000 f897 	bl	8005380 <__malloc_unlock>
 8005252:	f026 0607 	bic.w	r6, r6, #7
 8005256:	1d23      	adds	r3, r4, #4
 8005258:	1af2      	subs	r2, r6, r3
 800525a:	d0b6      	beq.n	80051ca <_malloc_r+0x22>
 800525c:	1b9b      	subs	r3, r3, r6
 800525e:	50a3      	str	r3, [r4, r2]
 8005260:	e7b3      	b.n	80051ca <_malloc_r+0x22>
 8005262:	6862      	ldr	r2, [r4, #4]
 8005264:	42a3      	cmp	r3, r4
 8005266:	bf0c      	ite	eq
 8005268:	6032      	streq	r2, [r6, #0]
 800526a:	605a      	strne	r2, [r3, #4]
 800526c:	e7ec      	b.n	8005248 <_malloc_r+0xa0>
 800526e:	4623      	mov	r3, r4
 8005270:	6864      	ldr	r4, [r4, #4]
 8005272:	e7b2      	b.n	80051da <_malloc_r+0x32>
 8005274:	4634      	mov	r4, r6
 8005276:	6876      	ldr	r6, [r6, #4]
 8005278:	e7b9      	b.n	80051ee <_malloc_r+0x46>
 800527a:	230c      	movs	r3, #12
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	4638      	mov	r0, r7
 8005280:	f000 f87e 	bl	8005380 <__malloc_unlock>
 8005284:	e7a1      	b.n	80051ca <_malloc_r+0x22>
 8005286:	6025      	str	r5, [r4, #0]
 8005288:	e7de      	b.n	8005248 <_malloc_r+0xa0>
 800528a:	bf00      	nop
 800528c:	240003d0 	.word	0x240003d0

08005290 <nan>:
 8005290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005298 <nan+0x8>
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	00000000 	.word	0x00000000
 800529c:	7ff80000 	.word	0x7ff80000

080052a0 <_sbrk_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d06      	ldr	r5, [pc, #24]	; (80052bc <_sbrk_r+0x1c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fc fbae 	bl	8001a0c <_sbrk>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_sbrk_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_sbrk_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	240003d8 	.word	0x240003d8

080052c0 <strncmp>:
 80052c0:	b510      	push	{r4, lr}
 80052c2:	b17a      	cbz	r2, 80052e4 <strncmp+0x24>
 80052c4:	4603      	mov	r3, r0
 80052c6:	3901      	subs	r1, #1
 80052c8:	1884      	adds	r4, r0, r2
 80052ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80052ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80052d2:	4290      	cmp	r0, r2
 80052d4:	d101      	bne.n	80052da <strncmp+0x1a>
 80052d6:	42a3      	cmp	r3, r4
 80052d8:	d101      	bne.n	80052de <strncmp+0x1e>
 80052da:	1a80      	subs	r0, r0, r2
 80052dc:	bd10      	pop	{r4, pc}
 80052de:	2800      	cmp	r0, #0
 80052e0:	d1f3      	bne.n	80052ca <strncmp+0xa>
 80052e2:	e7fa      	b.n	80052da <strncmp+0x1a>
 80052e4:	4610      	mov	r0, r2
 80052e6:	e7f9      	b.n	80052dc <strncmp+0x1c>

080052e8 <__ascii_wctomb>:
 80052e8:	b149      	cbz	r1, 80052fe <__ascii_wctomb+0x16>
 80052ea:	2aff      	cmp	r2, #255	; 0xff
 80052ec:	bf85      	ittet	hi
 80052ee:	238a      	movhi	r3, #138	; 0x8a
 80052f0:	6003      	strhi	r3, [r0, #0]
 80052f2:	700a      	strbls	r2, [r1, #0]
 80052f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80052f8:	bf98      	it	ls
 80052fa:	2001      	movls	r0, #1
 80052fc:	4770      	bx	lr
 80052fe:	4608      	mov	r0, r1
 8005300:	4770      	bx	lr
	...

08005304 <__assert_func>:
 8005304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005306:	4614      	mov	r4, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4b09      	ldr	r3, [pc, #36]	; (8005330 <__assert_func+0x2c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4605      	mov	r5, r0
 8005310:	68d8      	ldr	r0, [r3, #12]
 8005312:	b14c      	cbz	r4, 8005328 <__assert_func+0x24>
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <__assert_func+0x30>)
 8005316:	9100      	str	r1, [sp, #0]
 8005318:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800531c:	4906      	ldr	r1, [pc, #24]	; (8005338 <__assert_func+0x34>)
 800531e:	462b      	mov	r3, r5
 8005320:	f000 f80e 	bl	8005340 <fiprintf>
 8005324:	f000 fc2c 	bl	8005b80 <abort>
 8005328:	4b04      	ldr	r3, [pc, #16]	; (800533c <__assert_func+0x38>)
 800532a:	461c      	mov	r4, r3
 800532c:	e7f3      	b.n	8005316 <__assert_func+0x12>
 800532e:	bf00      	nop
 8005330:	2400001c 	.word	0x2400001c
 8005334:	08006434 	.word	0x08006434
 8005338:	08006441 	.word	0x08006441
 800533c:	0800646f 	.word	0x0800646f

08005340 <fiprintf>:
 8005340:	b40e      	push	{r1, r2, r3}
 8005342:	b503      	push	{r0, r1, lr}
 8005344:	4601      	mov	r1, r0
 8005346:	ab03      	add	r3, sp, #12
 8005348:	4805      	ldr	r0, [pc, #20]	; (8005360 <fiprintf+0x20>)
 800534a:	f853 2b04 	ldr.w	r2, [r3], #4
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	f000 f891 	bl	8005478 <_vfiprintf_r>
 8005356:	b002      	add	sp, #8
 8005358:	f85d eb04 	ldr.w	lr, [sp], #4
 800535c:	b003      	add	sp, #12
 800535e:	4770      	bx	lr
 8005360:	2400001c 	.word	0x2400001c

08005364 <malloc>:
 8005364:	4b02      	ldr	r3, [pc, #8]	; (8005370 <malloc+0xc>)
 8005366:	4601      	mov	r1, r0
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	f7ff bf1d 	b.w	80051a8 <_malloc_r>
 800536e:	bf00      	nop
 8005370:	2400001c 	.word	0x2400001c

08005374 <__malloc_lock>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__malloc_lock+0x8>)
 8005376:	f000 bdc3 	b.w	8005f00 <__retarget_lock_acquire_recursive>
 800537a:	bf00      	nop
 800537c:	240003dc 	.word	0x240003dc

08005380 <__malloc_unlock>:
 8005380:	4801      	ldr	r0, [pc, #4]	; (8005388 <__malloc_unlock+0x8>)
 8005382:	f000 bdbe 	b.w	8005f02 <__retarget_lock_release_recursive>
 8005386:	bf00      	nop
 8005388:	240003dc 	.word	0x240003dc

0800538c <_free_r>:
 800538c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800538e:	2900      	cmp	r1, #0
 8005390:	d044      	beq.n	800541c <_free_r+0x90>
 8005392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005396:	9001      	str	r0, [sp, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f1a1 0404 	sub.w	r4, r1, #4
 800539e:	bfb8      	it	lt
 80053a0:	18e4      	addlt	r4, r4, r3
 80053a2:	f7ff ffe7 	bl	8005374 <__malloc_lock>
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <_free_r+0x94>)
 80053a8:	9801      	ldr	r0, [sp, #4]
 80053aa:	6813      	ldr	r3, [r2, #0]
 80053ac:	b933      	cbnz	r3, 80053bc <_free_r+0x30>
 80053ae:	6063      	str	r3, [r4, #4]
 80053b0:	6014      	str	r4, [r2, #0]
 80053b2:	b003      	add	sp, #12
 80053b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053b8:	f7ff bfe2 	b.w	8005380 <__malloc_unlock>
 80053bc:	42a3      	cmp	r3, r4
 80053be:	d908      	bls.n	80053d2 <_free_r+0x46>
 80053c0:	6825      	ldr	r5, [r4, #0]
 80053c2:	1961      	adds	r1, r4, r5
 80053c4:	428b      	cmp	r3, r1
 80053c6:	bf01      	itttt	eq
 80053c8:	6819      	ldreq	r1, [r3, #0]
 80053ca:	685b      	ldreq	r3, [r3, #4]
 80053cc:	1949      	addeq	r1, r1, r5
 80053ce:	6021      	streq	r1, [r4, #0]
 80053d0:	e7ed      	b.n	80053ae <_free_r+0x22>
 80053d2:	461a      	mov	r2, r3
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	b10b      	cbz	r3, 80053dc <_free_r+0x50>
 80053d8:	42a3      	cmp	r3, r4
 80053da:	d9fa      	bls.n	80053d2 <_free_r+0x46>
 80053dc:	6811      	ldr	r1, [r2, #0]
 80053de:	1855      	adds	r5, r2, r1
 80053e0:	42a5      	cmp	r5, r4
 80053e2:	d10b      	bne.n	80053fc <_free_r+0x70>
 80053e4:	6824      	ldr	r4, [r4, #0]
 80053e6:	4421      	add	r1, r4
 80053e8:	1854      	adds	r4, r2, r1
 80053ea:	42a3      	cmp	r3, r4
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	d1e0      	bne.n	80053b2 <_free_r+0x26>
 80053f0:	681c      	ldr	r4, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	6053      	str	r3, [r2, #4]
 80053f6:	4421      	add	r1, r4
 80053f8:	6011      	str	r1, [r2, #0]
 80053fa:	e7da      	b.n	80053b2 <_free_r+0x26>
 80053fc:	d902      	bls.n	8005404 <_free_r+0x78>
 80053fe:	230c      	movs	r3, #12
 8005400:	6003      	str	r3, [r0, #0]
 8005402:	e7d6      	b.n	80053b2 <_free_r+0x26>
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	1961      	adds	r1, r4, r5
 8005408:	428b      	cmp	r3, r1
 800540a:	bf04      	itt	eq
 800540c:	6819      	ldreq	r1, [r3, #0]
 800540e:	685b      	ldreq	r3, [r3, #4]
 8005410:	6063      	str	r3, [r4, #4]
 8005412:	bf04      	itt	eq
 8005414:	1949      	addeq	r1, r1, r5
 8005416:	6021      	streq	r1, [r4, #0]
 8005418:	6054      	str	r4, [r2, #4]
 800541a:	e7ca      	b.n	80053b2 <_free_r+0x26>
 800541c:	b003      	add	sp, #12
 800541e:	bd30      	pop	{r4, r5, pc}
 8005420:	240003d0 	.word	0x240003d0

08005424 <__sfputc_r>:
 8005424:	6893      	ldr	r3, [r2, #8]
 8005426:	3b01      	subs	r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	b410      	push	{r4}
 800542c:	6093      	str	r3, [r2, #8]
 800542e:	da08      	bge.n	8005442 <__sfputc_r+0x1e>
 8005430:	6994      	ldr	r4, [r2, #24]
 8005432:	42a3      	cmp	r3, r4
 8005434:	db01      	blt.n	800543a <__sfputc_r+0x16>
 8005436:	290a      	cmp	r1, #10
 8005438:	d103      	bne.n	8005442 <__sfputc_r+0x1e>
 800543a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800543e:	f000 badf 	b.w	8005a00 <__swbuf_r>
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	1c58      	adds	r0, r3, #1
 8005446:	6010      	str	r0, [r2, #0]
 8005448:	7019      	strb	r1, [r3, #0]
 800544a:	4608      	mov	r0, r1
 800544c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005450:	4770      	bx	lr

08005452 <__sfputs_r>:
 8005452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	4614      	mov	r4, r2
 800545a:	18d5      	adds	r5, r2, r3
 800545c:	42ac      	cmp	r4, r5
 800545e:	d101      	bne.n	8005464 <__sfputs_r+0x12>
 8005460:	2000      	movs	r0, #0
 8005462:	e007      	b.n	8005474 <__sfputs_r+0x22>
 8005464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005468:	463a      	mov	r2, r7
 800546a:	4630      	mov	r0, r6
 800546c:	f7ff ffda 	bl	8005424 <__sfputc_r>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d1f3      	bne.n	800545c <__sfputs_r+0xa>
 8005474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005478 <_vfiprintf_r>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	460d      	mov	r5, r1
 800547e:	b09d      	sub	sp, #116	; 0x74
 8005480:	4614      	mov	r4, r2
 8005482:	4698      	mov	r8, r3
 8005484:	4606      	mov	r6, r0
 8005486:	b118      	cbz	r0, 8005490 <_vfiprintf_r+0x18>
 8005488:	6983      	ldr	r3, [r0, #24]
 800548a:	b90b      	cbnz	r3, 8005490 <_vfiprintf_r+0x18>
 800548c:	f000 fc9a 	bl	8005dc4 <__sinit>
 8005490:	4b89      	ldr	r3, [pc, #548]	; (80056b8 <_vfiprintf_r+0x240>)
 8005492:	429d      	cmp	r5, r3
 8005494:	d11b      	bne.n	80054ce <_vfiprintf_r+0x56>
 8005496:	6875      	ldr	r5, [r6, #4]
 8005498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800549a:	07d9      	lsls	r1, r3, #31
 800549c:	d405      	bmi.n	80054aa <_vfiprintf_r+0x32>
 800549e:	89ab      	ldrh	r3, [r5, #12]
 80054a0:	059a      	lsls	r2, r3, #22
 80054a2:	d402      	bmi.n	80054aa <_vfiprintf_r+0x32>
 80054a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054a6:	f000 fd2b 	bl	8005f00 <__retarget_lock_acquire_recursive>
 80054aa:	89ab      	ldrh	r3, [r5, #12]
 80054ac:	071b      	lsls	r3, r3, #28
 80054ae:	d501      	bpl.n	80054b4 <_vfiprintf_r+0x3c>
 80054b0:	692b      	ldr	r3, [r5, #16]
 80054b2:	b9eb      	cbnz	r3, 80054f0 <_vfiprintf_r+0x78>
 80054b4:	4629      	mov	r1, r5
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 faf4 	bl	8005aa4 <__swsetup_r>
 80054bc:	b1c0      	cbz	r0, 80054f0 <_vfiprintf_r+0x78>
 80054be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054c0:	07dc      	lsls	r4, r3, #31
 80054c2:	d50e      	bpl.n	80054e2 <_vfiprintf_r+0x6a>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	b01d      	add	sp, #116	; 0x74
 80054ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ce:	4b7b      	ldr	r3, [pc, #492]	; (80056bc <_vfiprintf_r+0x244>)
 80054d0:	429d      	cmp	r5, r3
 80054d2:	d101      	bne.n	80054d8 <_vfiprintf_r+0x60>
 80054d4:	68b5      	ldr	r5, [r6, #8]
 80054d6:	e7df      	b.n	8005498 <_vfiprintf_r+0x20>
 80054d8:	4b79      	ldr	r3, [pc, #484]	; (80056c0 <_vfiprintf_r+0x248>)
 80054da:	429d      	cmp	r5, r3
 80054dc:	bf08      	it	eq
 80054de:	68f5      	ldreq	r5, [r6, #12]
 80054e0:	e7da      	b.n	8005498 <_vfiprintf_r+0x20>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	0598      	lsls	r0, r3, #22
 80054e6:	d4ed      	bmi.n	80054c4 <_vfiprintf_r+0x4c>
 80054e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ea:	f000 fd0a 	bl	8005f02 <__retarget_lock_release_recursive>
 80054ee:	e7e9      	b.n	80054c4 <_vfiprintf_r+0x4c>
 80054f0:	2300      	movs	r3, #0
 80054f2:	9309      	str	r3, [sp, #36]	; 0x24
 80054f4:	2320      	movs	r3, #32
 80054f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80054fe:	2330      	movs	r3, #48	; 0x30
 8005500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056c4 <_vfiprintf_r+0x24c>
 8005504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005508:	f04f 0901 	mov.w	r9, #1
 800550c:	4623      	mov	r3, r4
 800550e:	469a      	mov	sl, r3
 8005510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005514:	b10a      	cbz	r2, 800551a <_vfiprintf_r+0xa2>
 8005516:	2a25      	cmp	r2, #37	; 0x25
 8005518:	d1f9      	bne.n	800550e <_vfiprintf_r+0x96>
 800551a:	ebba 0b04 	subs.w	fp, sl, r4
 800551e:	d00b      	beq.n	8005538 <_vfiprintf_r+0xc0>
 8005520:	465b      	mov	r3, fp
 8005522:	4622      	mov	r2, r4
 8005524:	4629      	mov	r1, r5
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff ff93 	bl	8005452 <__sfputs_r>
 800552c:	3001      	adds	r0, #1
 800552e:	f000 80aa 	beq.w	8005686 <_vfiprintf_r+0x20e>
 8005532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005534:	445a      	add	r2, fp
 8005536:	9209      	str	r2, [sp, #36]	; 0x24
 8005538:	f89a 3000 	ldrb.w	r3, [sl]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80a2 	beq.w	8005686 <_vfiprintf_r+0x20e>
 8005542:	2300      	movs	r3, #0
 8005544:	f04f 32ff 	mov.w	r2, #4294967295
 8005548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554c:	f10a 0a01 	add.w	sl, sl, #1
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	9307      	str	r3, [sp, #28]
 8005554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005558:	931a      	str	r3, [sp, #104]	; 0x68
 800555a:	4654      	mov	r4, sl
 800555c:	2205      	movs	r2, #5
 800555e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005562:	4858      	ldr	r0, [pc, #352]	; (80056c4 <_vfiprintf_r+0x24c>)
 8005564:	f7fa fec4 	bl	80002f0 <memchr>
 8005568:	9a04      	ldr	r2, [sp, #16]
 800556a:	b9d8      	cbnz	r0, 80055a4 <_vfiprintf_r+0x12c>
 800556c:	06d1      	lsls	r1, r2, #27
 800556e:	bf44      	itt	mi
 8005570:	2320      	movmi	r3, #32
 8005572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005576:	0713      	lsls	r3, r2, #28
 8005578:	bf44      	itt	mi
 800557a:	232b      	movmi	r3, #43	; 0x2b
 800557c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005580:	f89a 3000 	ldrb.w	r3, [sl]
 8005584:	2b2a      	cmp	r3, #42	; 0x2a
 8005586:	d015      	beq.n	80055b4 <_vfiprintf_r+0x13c>
 8005588:	9a07      	ldr	r2, [sp, #28]
 800558a:	4654      	mov	r4, sl
 800558c:	2000      	movs	r0, #0
 800558e:	f04f 0c0a 	mov.w	ip, #10
 8005592:	4621      	mov	r1, r4
 8005594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005598:	3b30      	subs	r3, #48	; 0x30
 800559a:	2b09      	cmp	r3, #9
 800559c:	d94e      	bls.n	800563c <_vfiprintf_r+0x1c4>
 800559e:	b1b0      	cbz	r0, 80055ce <_vfiprintf_r+0x156>
 80055a0:	9207      	str	r2, [sp, #28]
 80055a2:	e014      	b.n	80055ce <_vfiprintf_r+0x156>
 80055a4:	eba0 0308 	sub.w	r3, r0, r8
 80055a8:	fa09 f303 	lsl.w	r3, r9, r3
 80055ac:	4313      	orrs	r3, r2
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	46a2      	mov	sl, r4
 80055b2:	e7d2      	b.n	800555a <_vfiprintf_r+0xe2>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	1d19      	adds	r1, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	9103      	str	r1, [sp, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bfbb      	ittet	lt
 80055c0:	425b      	neglt	r3, r3
 80055c2:	f042 0202 	orrlt.w	r2, r2, #2
 80055c6:	9307      	strge	r3, [sp, #28]
 80055c8:	9307      	strlt	r3, [sp, #28]
 80055ca:	bfb8      	it	lt
 80055cc:	9204      	strlt	r2, [sp, #16]
 80055ce:	7823      	ldrb	r3, [r4, #0]
 80055d0:	2b2e      	cmp	r3, #46	; 0x2e
 80055d2:	d10c      	bne.n	80055ee <_vfiprintf_r+0x176>
 80055d4:	7863      	ldrb	r3, [r4, #1]
 80055d6:	2b2a      	cmp	r3, #42	; 0x2a
 80055d8:	d135      	bne.n	8005646 <_vfiprintf_r+0x1ce>
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	9203      	str	r2, [sp, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bfb8      	it	lt
 80055e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80055ea:	3402      	adds	r4, #2
 80055ec:	9305      	str	r3, [sp, #20]
 80055ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056d4 <_vfiprintf_r+0x25c>
 80055f2:	7821      	ldrb	r1, [r4, #0]
 80055f4:	2203      	movs	r2, #3
 80055f6:	4650      	mov	r0, sl
 80055f8:	f7fa fe7a 	bl	80002f0 <memchr>
 80055fc:	b140      	cbz	r0, 8005610 <_vfiprintf_r+0x198>
 80055fe:	2340      	movs	r3, #64	; 0x40
 8005600:	eba0 000a 	sub.w	r0, r0, sl
 8005604:	fa03 f000 	lsl.w	r0, r3, r0
 8005608:	9b04      	ldr	r3, [sp, #16]
 800560a:	4303      	orrs	r3, r0
 800560c:	3401      	adds	r4, #1
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005614:	482c      	ldr	r0, [pc, #176]	; (80056c8 <_vfiprintf_r+0x250>)
 8005616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800561a:	2206      	movs	r2, #6
 800561c:	f7fa fe68 	bl	80002f0 <memchr>
 8005620:	2800      	cmp	r0, #0
 8005622:	d03f      	beq.n	80056a4 <_vfiprintf_r+0x22c>
 8005624:	4b29      	ldr	r3, [pc, #164]	; (80056cc <_vfiprintf_r+0x254>)
 8005626:	bb1b      	cbnz	r3, 8005670 <_vfiprintf_r+0x1f8>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	3307      	adds	r3, #7
 800562c:	f023 0307 	bic.w	r3, r3, #7
 8005630:	3308      	adds	r3, #8
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005636:	443b      	add	r3, r7
 8005638:	9309      	str	r3, [sp, #36]	; 0x24
 800563a:	e767      	b.n	800550c <_vfiprintf_r+0x94>
 800563c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005640:	460c      	mov	r4, r1
 8005642:	2001      	movs	r0, #1
 8005644:	e7a5      	b.n	8005592 <_vfiprintf_r+0x11a>
 8005646:	2300      	movs	r3, #0
 8005648:	3401      	adds	r4, #1
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	4619      	mov	r1, r3
 800564e:	f04f 0c0a 	mov.w	ip, #10
 8005652:	4620      	mov	r0, r4
 8005654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005658:	3a30      	subs	r2, #48	; 0x30
 800565a:	2a09      	cmp	r2, #9
 800565c:	d903      	bls.n	8005666 <_vfiprintf_r+0x1ee>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0c5      	beq.n	80055ee <_vfiprintf_r+0x176>
 8005662:	9105      	str	r1, [sp, #20]
 8005664:	e7c3      	b.n	80055ee <_vfiprintf_r+0x176>
 8005666:	fb0c 2101 	mla	r1, ip, r1, r2
 800566a:	4604      	mov	r4, r0
 800566c:	2301      	movs	r3, #1
 800566e:	e7f0      	b.n	8005652 <_vfiprintf_r+0x1da>
 8005670:	ab03      	add	r3, sp, #12
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	462a      	mov	r2, r5
 8005676:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <_vfiprintf_r+0x258>)
 8005678:	a904      	add	r1, sp, #16
 800567a:	4630      	mov	r0, r6
 800567c:	f3af 8000 	nop.w
 8005680:	4607      	mov	r7, r0
 8005682:	1c78      	adds	r0, r7, #1
 8005684:	d1d6      	bne.n	8005634 <_vfiprintf_r+0x1bc>
 8005686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005688:	07d9      	lsls	r1, r3, #31
 800568a:	d405      	bmi.n	8005698 <_vfiprintf_r+0x220>
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	059a      	lsls	r2, r3, #22
 8005690:	d402      	bmi.n	8005698 <_vfiprintf_r+0x220>
 8005692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005694:	f000 fc35 	bl	8005f02 <__retarget_lock_release_recursive>
 8005698:	89ab      	ldrh	r3, [r5, #12]
 800569a:	065b      	lsls	r3, r3, #25
 800569c:	f53f af12 	bmi.w	80054c4 <_vfiprintf_r+0x4c>
 80056a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056a2:	e711      	b.n	80054c8 <_vfiprintf_r+0x50>
 80056a4:	ab03      	add	r3, sp, #12
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	462a      	mov	r2, r5
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <_vfiprintf_r+0x258>)
 80056ac:	a904      	add	r1, sp, #16
 80056ae:	4630      	mov	r0, r6
 80056b0:	f000 f880 	bl	80057b4 <_printf_i>
 80056b4:	e7e4      	b.n	8005680 <_vfiprintf_r+0x208>
 80056b6:	bf00      	nop
 80056b8:	080065c4 	.word	0x080065c4
 80056bc:	080065e4 	.word	0x080065e4
 80056c0:	080065a4 	.word	0x080065a4
 80056c4:	08006571 	.word	0x08006571
 80056c8:	0800657b 	.word	0x0800657b
 80056cc:	00000000 	.word	0x00000000
 80056d0:	08005453 	.word	0x08005453
 80056d4:	08006577 	.word	0x08006577

080056d8 <_printf_common>:
 80056d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	4616      	mov	r6, r2
 80056de:	4699      	mov	r9, r3
 80056e0:	688a      	ldr	r2, [r1, #8]
 80056e2:	690b      	ldr	r3, [r1, #16]
 80056e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e8:	4293      	cmp	r3, r2
 80056ea:	bfb8      	it	lt
 80056ec:	4613      	movlt	r3, r2
 80056ee:	6033      	str	r3, [r6, #0]
 80056f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056f4:	4607      	mov	r7, r0
 80056f6:	460c      	mov	r4, r1
 80056f8:	b10a      	cbz	r2, 80056fe <_printf_common+0x26>
 80056fa:	3301      	adds	r3, #1
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	0699      	lsls	r1, r3, #26
 8005702:	bf42      	ittt	mi
 8005704:	6833      	ldrmi	r3, [r6, #0]
 8005706:	3302      	addmi	r3, #2
 8005708:	6033      	strmi	r3, [r6, #0]
 800570a:	6825      	ldr	r5, [r4, #0]
 800570c:	f015 0506 	ands.w	r5, r5, #6
 8005710:	d106      	bne.n	8005720 <_printf_common+0x48>
 8005712:	f104 0a19 	add.w	sl, r4, #25
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	6832      	ldr	r2, [r6, #0]
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	42ab      	cmp	r3, r5
 800571e:	dc26      	bgt.n	800576e <_printf_common+0x96>
 8005720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005724:	1e13      	subs	r3, r2, #0
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	bf18      	it	ne
 800572a:	2301      	movne	r3, #1
 800572c:	0692      	lsls	r2, r2, #26
 800572e:	d42b      	bmi.n	8005788 <_printf_common+0xb0>
 8005730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005734:	4649      	mov	r1, r9
 8005736:	4638      	mov	r0, r7
 8005738:	47c0      	blx	r8
 800573a:	3001      	adds	r0, #1
 800573c:	d01e      	beq.n	800577c <_printf_common+0xa4>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	68e5      	ldr	r5, [r4, #12]
 8005742:	6832      	ldr	r2, [r6, #0]
 8005744:	f003 0306 	and.w	r3, r3, #6
 8005748:	2b04      	cmp	r3, #4
 800574a:	bf08      	it	eq
 800574c:	1aad      	subeq	r5, r5, r2
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	6922      	ldr	r2, [r4, #16]
 8005752:	bf0c      	ite	eq
 8005754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005758:	2500      	movne	r5, #0
 800575a:	4293      	cmp	r3, r2
 800575c:	bfc4      	itt	gt
 800575e:	1a9b      	subgt	r3, r3, r2
 8005760:	18ed      	addgt	r5, r5, r3
 8005762:	2600      	movs	r6, #0
 8005764:	341a      	adds	r4, #26
 8005766:	42b5      	cmp	r5, r6
 8005768:	d11a      	bne.n	80057a0 <_printf_common+0xc8>
 800576a:	2000      	movs	r0, #0
 800576c:	e008      	b.n	8005780 <_printf_common+0xa8>
 800576e:	2301      	movs	r3, #1
 8005770:	4652      	mov	r2, sl
 8005772:	4649      	mov	r1, r9
 8005774:	4638      	mov	r0, r7
 8005776:	47c0      	blx	r8
 8005778:	3001      	adds	r0, #1
 800577a:	d103      	bne.n	8005784 <_printf_common+0xac>
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005784:	3501      	adds	r5, #1
 8005786:	e7c6      	b.n	8005716 <_printf_common+0x3e>
 8005788:	18e1      	adds	r1, r4, r3
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	2030      	movs	r0, #48	; 0x30
 800578e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005792:	4422      	add	r2, r4
 8005794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800579c:	3302      	adds	r3, #2
 800579e:	e7c7      	b.n	8005730 <_printf_common+0x58>
 80057a0:	2301      	movs	r3, #1
 80057a2:	4622      	mov	r2, r4
 80057a4:	4649      	mov	r1, r9
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c0      	blx	r8
 80057aa:	3001      	adds	r0, #1
 80057ac:	d0e6      	beq.n	800577c <_printf_common+0xa4>
 80057ae:	3601      	adds	r6, #1
 80057b0:	e7d9      	b.n	8005766 <_printf_common+0x8e>
	...

080057b4 <_printf_i>:
 80057b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	7e0f      	ldrb	r7, [r1, #24]
 80057ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057bc:	2f78      	cmp	r7, #120	; 0x78
 80057be:	4691      	mov	r9, r2
 80057c0:	4680      	mov	r8, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	469a      	mov	sl, r3
 80057c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ca:	d807      	bhi.n	80057dc <_printf_i+0x28>
 80057cc:	2f62      	cmp	r7, #98	; 0x62
 80057ce:	d80a      	bhi.n	80057e6 <_printf_i+0x32>
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	f000 80d8 	beq.w	8005986 <_printf_i+0x1d2>
 80057d6:	2f58      	cmp	r7, #88	; 0x58
 80057d8:	f000 80a3 	beq.w	8005922 <_printf_i+0x16e>
 80057dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057e4:	e03a      	b.n	800585c <_printf_i+0xa8>
 80057e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ea:	2b15      	cmp	r3, #21
 80057ec:	d8f6      	bhi.n	80057dc <_printf_i+0x28>
 80057ee:	a101      	add	r1, pc, #4	; (adr r1, 80057f4 <_printf_i+0x40>)
 80057f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057f4:	0800584d 	.word	0x0800584d
 80057f8:	08005861 	.word	0x08005861
 80057fc:	080057dd 	.word	0x080057dd
 8005800:	080057dd 	.word	0x080057dd
 8005804:	080057dd 	.word	0x080057dd
 8005808:	080057dd 	.word	0x080057dd
 800580c:	08005861 	.word	0x08005861
 8005810:	080057dd 	.word	0x080057dd
 8005814:	080057dd 	.word	0x080057dd
 8005818:	080057dd 	.word	0x080057dd
 800581c:	080057dd 	.word	0x080057dd
 8005820:	0800596d 	.word	0x0800596d
 8005824:	08005891 	.word	0x08005891
 8005828:	0800594f 	.word	0x0800594f
 800582c:	080057dd 	.word	0x080057dd
 8005830:	080057dd 	.word	0x080057dd
 8005834:	0800598f 	.word	0x0800598f
 8005838:	080057dd 	.word	0x080057dd
 800583c:	08005891 	.word	0x08005891
 8005840:	080057dd 	.word	0x080057dd
 8005844:	080057dd 	.word	0x080057dd
 8005848:	08005957 	.word	0x08005957
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	1d1a      	adds	r2, r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	602a      	str	r2, [r5, #0]
 8005854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800585c:	2301      	movs	r3, #1
 800585e:	e0a3      	b.n	80059a8 <_printf_i+0x1f4>
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	6829      	ldr	r1, [r5, #0]
 8005864:	0606      	lsls	r6, r0, #24
 8005866:	f101 0304 	add.w	r3, r1, #4
 800586a:	d50a      	bpl.n	8005882 <_printf_i+0xce>
 800586c:	680e      	ldr	r6, [r1, #0]
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	2e00      	cmp	r6, #0
 8005872:	da03      	bge.n	800587c <_printf_i+0xc8>
 8005874:	232d      	movs	r3, #45	; 0x2d
 8005876:	4276      	negs	r6, r6
 8005878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587c:	485e      	ldr	r0, [pc, #376]	; (80059f8 <_printf_i+0x244>)
 800587e:	230a      	movs	r3, #10
 8005880:	e019      	b.n	80058b6 <_printf_i+0x102>
 8005882:	680e      	ldr	r6, [r1, #0]
 8005884:	602b      	str	r3, [r5, #0]
 8005886:	f010 0f40 	tst.w	r0, #64	; 0x40
 800588a:	bf18      	it	ne
 800588c:	b236      	sxthne	r6, r6
 800588e:	e7ef      	b.n	8005870 <_printf_i+0xbc>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	6820      	ldr	r0, [r4, #0]
 8005894:	1d19      	adds	r1, r3, #4
 8005896:	6029      	str	r1, [r5, #0]
 8005898:	0601      	lsls	r1, r0, #24
 800589a:	d501      	bpl.n	80058a0 <_printf_i+0xec>
 800589c:	681e      	ldr	r6, [r3, #0]
 800589e:	e002      	b.n	80058a6 <_printf_i+0xf2>
 80058a0:	0646      	lsls	r6, r0, #25
 80058a2:	d5fb      	bpl.n	800589c <_printf_i+0xe8>
 80058a4:	881e      	ldrh	r6, [r3, #0]
 80058a6:	4854      	ldr	r0, [pc, #336]	; (80059f8 <_printf_i+0x244>)
 80058a8:	2f6f      	cmp	r7, #111	; 0x6f
 80058aa:	bf0c      	ite	eq
 80058ac:	2308      	moveq	r3, #8
 80058ae:	230a      	movne	r3, #10
 80058b0:	2100      	movs	r1, #0
 80058b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058b6:	6865      	ldr	r5, [r4, #4]
 80058b8:	60a5      	str	r5, [r4, #8]
 80058ba:	2d00      	cmp	r5, #0
 80058bc:	bfa2      	ittt	ge
 80058be:	6821      	ldrge	r1, [r4, #0]
 80058c0:	f021 0104 	bicge.w	r1, r1, #4
 80058c4:	6021      	strge	r1, [r4, #0]
 80058c6:	b90e      	cbnz	r6, 80058cc <_printf_i+0x118>
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	d04d      	beq.n	8005968 <_printf_i+0x1b4>
 80058cc:	4615      	mov	r5, r2
 80058ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80058d2:	fb03 6711 	mls	r7, r3, r1, r6
 80058d6:	5dc7      	ldrb	r7, [r0, r7]
 80058d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058dc:	4637      	mov	r7, r6
 80058de:	42bb      	cmp	r3, r7
 80058e0:	460e      	mov	r6, r1
 80058e2:	d9f4      	bls.n	80058ce <_printf_i+0x11a>
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d10b      	bne.n	8005900 <_printf_i+0x14c>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	07de      	lsls	r6, r3, #31
 80058ec:	d508      	bpl.n	8005900 <_printf_i+0x14c>
 80058ee:	6923      	ldr	r3, [r4, #16]
 80058f0:	6861      	ldr	r1, [r4, #4]
 80058f2:	4299      	cmp	r1, r3
 80058f4:	bfde      	ittt	le
 80058f6:	2330      	movle	r3, #48	; 0x30
 80058f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005900:	1b52      	subs	r2, r2, r5
 8005902:	6122      	str	r2, [r4, #16]
 8005904:	f8cd a000 	str.w	sl, [sp]
 8005908:	464b      	mov	r3, r9
 800590a:	aa03      	add	r2, sp, #12
 800590c:	4621      	mov	r1, r4
 800590e:	4640      	mov	r0, r8
 8005910:	f7ff fee2 	bl	80056d8 <_printf_common>
 8005914:	3001      	adds	r0, #1
 8005916:	d14c      	bne.n	80059b2 <_printf_i+0x1fe>
 8005918:	f04f 30ff 	mov.w	r0, #4294967295
 800591c:	b004      	add	sp, #16
 800591e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005922:	4835      	ldr	r0, [pc, #212]	; (80059f8 <_printf_i+0x244>)
 8005924:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005928:	6829      	ldr	r1, [r5, #0]
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005930:	6029      	str	r1, [r5, #0]
 8005932:	061d      	lsls	r5, r3, #24
 8005934:	d514      	bpl.n	8005960 <_printf_i+0x1ac>
 8005936:	07df      	lsls	r7, r3, #31
 8005938:	bf44      	itt	mi
 800593a:	f043 0320 	orrmi.w	r3, r3, #32
 800593e:	6023      	strmi	r3, [r4, #0]
 8005940:	b91e      	cbnz	r6, 800594a <_printf_i+0x196>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f023 0320 	bic.w	r3, r3, #32
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	2310      	movs	r3, #16
 800594c:	e7b0      	b.n	80058b0 <_printf_i+0xfc>
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f043 0320 	orr.w	r3, r3, #32
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	2378      	movs	r3, #120	; 0x78
 8005958:	4828      	ldr	r0, [pc, #160]	; (80059fc <_printf_i+0x248>)
 800595a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800595e:	e7e3      	b.n	8005928 <_printf_i+0x174>
 8005960:	0659      	lsls	r1, r3, #25
 8005962:	bf48      	it	mi
 8005964:	b2b6      	uxthmi	r6, r6
 8005966:	e7e6      	b.n	8005936 <_printf_i+0x182>
 8005968:	4615      	mov	r5, r2
 800596a:	e7bb      	b.n	80058e4 <_printf_i+0x130>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	6826      	ldr	r6, [r4, #0]
 8005970:	6961      	ldr	r1, [r4, #20]
 8005972:	1d18      	adds	r0, r3, #4
 8005974:	6028      	str	r0, [r5, #0]
 8005976:	0635      	lsls	r5, r6, #24
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	d501      	bpl.n	8005980 <_printf_i+0x1cc>
 800597c:	6019      	str	r1, [r3, #0]
 800597e:	e002      	b.n	8005986 <_printf_i+0x1d2>
 8005980:	0670      	lsls	r0, r6, #25
 8005982:	d5fb      	bpl.n	800597c <_printf_i+0x1c8>
 8005984:	8019      	strh	r1, [r3, #0]
 8005986:	2300      	movs	r3, #0
 8005988:	6123      	str	r3, [r4, #16]
 800598a:	4615      	mov	r5, r2
 800598c:	e7ba      	b.n	8005904 <_printf_i+0x150>
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	1d1a      	adds	r2, r3, #4
 8005992:	602a      	str	r2, [r5, #0]
 8005994:	681d      	ldr	r5, [r3, #0]
 8005996:	6862      	ldr	r2, [r4, #4]
 8005998:	2100      	movs	r1, #0
 800599a:	4628      	mov	r0, r5
 800599c:	f7fa fca8 	bl	80002f0 <memchr>
 80059a0:	b108      	cbz	r0, 80059a6 <_printf_i+0x1f2>
 80059a2:	1b40      	subs	r0, r0, r5
 80059a4:	6060      	str	r0, [r4, #4]
 80059a6:	6863      	ldr	r3, [r4, #4]
 80059a8:	6123      	str	r3, [r4, #16]
 80059aa:	2300      	movs	r3, #0
 80059ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b0:	e7a8      	b.n	8005904 <_printf_i+0x150>
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	462a      	mov	r2, r5
 80059b6:	4649      	mov	r1, r9
 80059b8:	4640      	mov	r0, r8
 80059ba:	47d0      	blx	sl
 80059bc:	3001      	adds	r0, #1
 80059be:	d0ab      	beq.n	8005918 <_printf_i+0x164>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	079b      	lsls	r3, r3, #30
 80059c4:	d413      	bmi.n	80059ee <_printf_i+0x23a>
 80059c6:	68e0      	ldr	r0, [r4, #12]
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	4298      	cmp	r0, r3
 80059cc:	bfb8      	it	lt
 80059ce:	4618      	movlt	r0, r3
 80059d0:	e7a4      	b.n	800591c <_printf_i+0x168>
 80059d2:	2301      	movs	r3, #1
 80059d4:	4632      	mov	r2, r6
 80059d6:	4649      	mov	r1, r9
 80059d8:	4640      	mov	r0, r8
 80059da:	47d0      	blx	sl
 80059dc:	3001      	adds	r0, #1
 80059de:	d09b      	beq.n	8005918 <_printf_i+0x164>
 80059e0:	3501      	adds	r5, #1
 80059e2:	68e3      	ldr	r3, [r4, #12]
 80059e4:	9903      	ldr	r1, [sp, #12]
 80059e6:	1a5b      	subs	r3, r3, r1
 80059e8:	42ab      	cmp	r3, r5
 80059ea:	dcf2      	bgt.n	80059d2 <_printf_i+0x21e>
 80059ec:	e7eb      	b.n	80059c6 <_printf_i+0x212>
 80059ee:	2500      	movs	r5, #0
 80059f0:	f104 0619 	add.w	r6, r4, #25
 80059f4:	e7f5      	b.n	80059e2 <_printf_i+0x22e>
 80059f6:	bf00      	nop
 80059f8:	08006582 	.word	0x08006582
 80059fc:	08006593 	.word	0x08006593

08005a00 <__swbuf_r>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	460e      	mov	r6, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	4605      	mov	r5, r0
 8005a08:	b118      	cbz	r0, 8005a12 <__swbuf_r+0x12>
 8005a0a:	6983      	ldr	r3, [r0, #24]
 8005a0c:	b90b      	cbnz	r3, 8005a12 <__swbuf_r+0x12>
 8005a0e:	f000 f9d9 	bl	8005dc4 <__sinit>
 8005a12:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <__swbuf_r+0x98>)
 8005a14:	429c      	cmp	r4, r3
 8005a16:	d12b      	bne.n	8005a70 <__swbuf_r+0x70>
 8005a18:	686c      	ldr	r4, [r5, #4]
 8005a1a:	69a3      	ldr	r3, [r4, #24]
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	071a      	lsls	r2, r3, #28
 8005a22:	d52f      	bpl.n	8005a84 <__swbuf_r+0x84>
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	b36b      	cbz	r3, 8005a84 <__swbuf_r+0x84>
 8005a28:	6923      	ldr	r3, [r4, #16]
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1ac0      	subs	r0, r0, r3
 8005a2e:	6963      	ldr	r3, [r4, #20]
 8005a30:	b2f6      	uxtb	r6, r6
 8005a32:	4283      	cmp	r3, r0
 8005a34:	4637      	mov	r7, r6
 8005a36:	dc04      	bgt.n	8005a42 <__swbuf_r+0x42>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f92e 	bl	8005c9c <_fflush_r>
 8005a40:	bb30      	cbnz	r0, 8005a90 <__swbuf_r+0x90>
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	6022      	str	r2, [r4, #0]
 8005a4e:	701e      	strb	r6, [r3, #0]
 8005a50:	6963      	ldr	r3, [r4, #20]
 8005a52:	3001      	adds	r0, #1
 8005a54:	4283      	cmp	r3, r0
 8005a56:	d004      	beq.n	8005a62 <__swbuf_r+0x62>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	07db      	lsls	r3, r3, #31
 8005a5c:	d506      	bpl.n	8005a6c <__swbuf_r+0x6c>
 8005a5e:	2e0a      	cmp	r6, #10
 8005a60:	d104      	bne.n	8005a6c <__swbuf_r+0x6c>
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f919 	bl	8005c9c <_fflush_r>
 8005a6a:	b988      	cbnz	r0, 8005a90 <__swbuf_r+0x90>
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <__swbuf_r+0x9c>)
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d101      	bne.n	8005a7a <__swbuf_r+0x7a>
 8005a76:	68ac      	ldr	r4, [r5, #8]
 8005a78:	e7cf      	b.n	8005a1a <__swbuf_r+0x1a>
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <__swbuf_r+0xa0>)
 8005a7c:	429c      	cmp	r4, r3
 8005a7e:	bf08      	it	eq
 8005a80:	68ec      	ldreq	r4, [r5, #12]
 8005a82:	e7ca      	b.n	8005a1a <__swbuf_r+0x1a>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 f80c 	bl	8005aa4 <__swsetup_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d0cb      	beq.n	8005a28 <__swbuf_r+0x28>
 8005a90:	f04f 37ff 	mov.w	r7, #4294967295
 8005a94:	e7ea      	b.n	8005a6c <__swbuf_r+0x6c>
 8005a96:	bf00      	nop
 8005a98:	080065c4 	.word	0x080065c4
 8005a9c:	080065e4 	.word	0x080065e4
 8005aa0:	080065a4 	.word	0x080065a4

08005aa4 <__swsetup_r>:
 8005aa4:	4b32      	ldr	r3, [pc, #200]	; (8005b70 <__swsetup_r+0xcc>)
 8005aa6:	b570      	push	{r4, r5, r6, lr}
 8005aa8:	681d      	ldr	r5, [r3, #0]
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	b125      	cbz	r5, 8005aba <__swsetup_r+0x16>
 8005ab0:	69ab      	ldr	r3, [r5, #24]
 8005ab2:	b913      	cbnz	r3, 8005aba <__swsetup_r+0x16>
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 f985 	bl	8005dc4 <__sinit>
 8005aba:	4b2e      	ldr	r3, [pc, #184]	; (8005b74 <__swsetup_r+0xd0>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	d10f      	bne.n	8005ae0 <__swsetup_r+0x3c>
 8005ac0:	686c      	ldr	r4, [r5, #4]
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac8:	0719      	lsls	r1, r3, #28
 8005aca:	d42c      	bmi.n	8005b26 <__swsetup_r+0x82>
 8005acc:	06dd      	lsls	r5, r3, #27
 8005ace:	d411      	bmi.n	8005af4 <__swsetup_r+0x50>
 8005ad0:	2309      	movs	r3, #9
 8005ad2:	6033      	str	r3, [r6, #0]
 8005ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295
 8005ade:	e03e      	b.n	8005b5e <__swsetup_r+0xba>
 8005ae0:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <__swsetup_r+0xd4>)
 8005ae2:	429c      	cmp	r4, r3
 8005ae4:	d101      	bne.n	8005aea <__swsetup_r+0x46>
 8005ae6:	68ac      	ldr	r4, [r5, #8]
 8005ae8:	e7eb      	b.n	8005ac2 <__swsetup_r+0x1e>
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <__swsetup_r+0xd8>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	bf08      	it	eq
 8005af0:	68ec      	ldreq	r4, [r5, #12]
 8005af2:	e7e6      	b.n	8005ac2 <__swsetup_r+0x1e>
 8005af4:	0758      	lsls	r0, r3, #29
 8005af6:	d512      	bpl.n	8005b1e <__swsetup_r+0x7a>
 8005af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005afa:	b141      	cbz	r1, 8005b0e <__swsetup_r+0x6a>
 8005afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b00:	4299      	cmp	r1, r3
 8005b02:	d002      	beq.n	8005b0a <__swsetup_r+0x66>
 8005b04:	4630      	mov	r0, r6
 8005b06:	f7ff fc41 	bl	800538c <_free_r>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	2300      	movs	r3, #0
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f043 0308 	orr.w	r3, r3, #8
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	b94b      	cbnz	r3, 8005b3e <__swsetup_r+0x9a>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	d003      	beq.n	8005b3e <__swsetup_r+0x9a>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 fa09 	bl	8005f50 <__smakebuf_r>
 8005b3e:	89a0      	ldrh	r0, [r4, #12]
 8005b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b44:	f010 0301 	ands.w	r3, r0, #1
 8005b48:	d00a      	beq.n	8005b60 <__swsetup_r+0xbc>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	6963      	ldr	r3, [r4, #20]
 8005b50:	425b      	negs	r3, r3
 8005b52:	61a3      	str	r3, [r4, #24]
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	b943      	cbnz	r3, 8005b6a <__swsetup_r+0xc6>
 8005b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b5c:	d1ba      	bne.n	8005ad4 <__swsetup_r+0x30>
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	0781      	lsls	r1, r0, #30
 8005b62:	bf58      	it	pl
 8005b64:	6963      	ldrpl	r3, [r4, #20]
 8005b66:	60a3      	str	r3, [r4, #8]
 8005b68:	e7f4      	b.n	8005b54 <__swsetup_r+0xb0>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e7f7      	b.n	8005b5e <__swsetup_r+0xba>
 8005b6e:	bf00      	nop
 8005b70:	2400001c 	.word	0x2400001c
 8005b74:	080065c4 	.word	0x080065c4
 8005b78:	080065e4 	.word	0x080065e4
 8005b7c:	080065a4 	.word	0x080065a4

08005b80 <abort>:
 8005b80:	b508      	push	{r3, lr}
 8005b82:	2006      	movs	r0, #6
 8005b84:	f000 fa4c 	bl	8006020 <raise>
 8005b88:	2001      	movs	r0, #1
 8005b8a:	f7fb fec7 	bl	800191c <_exit>
	...

08005b90 <__sflush_r>:
 8005b90:	898a      	ldrh	r2, [r1, #12]
 8005b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b96:	4605      	mov	r5, r0
 8005b98:	0710      	lsls	r0, r2, #28
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	d458      	bmi.n	8005c50 <__sflush_r+0xc0>
 8005b9e:	684b      	ldr	r3, [r1, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	dc05      	bgt.n	8005bb0 <__sflush_r+0x20>
 8005ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	dc02      	bgt.n	8005bb0 <__sflush_r+0x20>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb2:	2e00      	cmp	r6, #0
 8005bb4:	d0f9      	beq.n	8005baa <__sflush_r+0x1a>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bbc:	682f      	ldr	r7, [r5, #0]
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	d032      	beq.n	8005c28 <__sflush_r+0x98>
 8005bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	075a      	lsls	r2, r3, #29
 8005bc8:	d505      	bpl.n	8005bd6 <__sflush_r+0x46>
 8005bca:	6863      	ldr	r3, [r4, #4]
 8005bcc:	1ac0      	subs	r0, r0, r3
 8005bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bd0:	b10b      	cbz	r3, 8005bd6 <__sflush_r+0x46>
 8005bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bd4:	1ac0      	subs	r0, r0, r3
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bdc:	6a21      	ldr	r1, [r4, #32]
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b0      	blx	r6
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	d106      	bne.n	8005bf6 <__sflush_r+0x66>
 8005be8:	6829      	ldr	r1, [r5, #0]
 8005bea:	291d      	cmp	r1, #29
 8005bec:	d82c      	bhi.n	8005c48 <__sflush_r+0xb8>
 8005bee:	4a2a      	ldr	r2, [pc, #168]	; (8005c98 <__sflush_r+0x108>)
 8005bf0:	40ca      	lsrs	r2, r1
 8005bf2:	07d6      	lsls	r6, r2, #31
 8005bf4:	d528      	bpl.n	8005c48 <__sflush_r+0xb8>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	6062      	str	r2, [r4, #4]
 8005bfa:	04d9      	lsls	r1, r3, #19
 8005bfc:	6922      	ldr	r2, [r4, #16]
 8005bfe:	6022      	str	r2, [r4, #0]
 8005c00:	d504      	bpl.n	8005c0c <__sflush_r+0x7c>
 8005c02:	1c42      	adds	r2, r0, #1
 8005c04:	d101      	bne.n	8005c0a <__sflush_r+0x7a>
 8005c06:	682b      	ldr	r3, [r5, #0]
 8005c08:	b903      	cbnz	r3, 8005c0c <__sflush_r+0x7c>
 8005c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c0e:	602f      	str	r7, [r5, #0]
 8005c10:	2900      	cmp	r1, #0
 8005c12:	d0ca      	beq.n	8005baa <__sflush_r+0x1a>
 8005c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c18:	4299      	cmp	r1, r3
 8005c1a:	d002      	beq.n	8005c22 <__sflush_r+0x92>
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f7ff fbb5 	bl	800538c <_free_r>
 8005c22:	2000      	movs	r0, #0
 8005c24:	6360      	str	r0, [r4, #52]	; 0x34
 8005c26:	e7c1      	b.n	8005bac <__sflush_r+0x1c>
 8005c28:	6a21      	ldr	r1, [r4, #32]
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	47b0      	blx	r6
 8005c30:	1c41      	adds	r1, r0, #1
 8005c32:	d1c7      	bne.n	8005bc4 <__sflush_r+0x34>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0c4      	beq.n	8005bc4 <__sflush_r+0x34>
 8005c3a:	2b1d      	cmp	r3, #29
 8005c3c:	d001      	beq.n	8005c42 <__sflush_r+0xb2>
 8005c3e:	2b16      	cmp	r3, #22
 8005c40:	d101      	bne.n	8005c46 <__sflush_r+0xb6>
 8005c42:	602f      	str	r7, [r5, #0]
 8005c44:	e7b1      	b.n	8005baa <__sflush_r+0x1a>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	e7ad      	b.n	8005bac <__sflush_r+0x1c>
 8005c50:	690f      	ldr	r7, [r1, #16]
 8005c52:	2f00      	cmp	r7, #0
 8005c54:	d0a9      	beq.n	8005baa <__sflush_r+0x1a>
 8005c56:	0793      	lsls	r3, r2, #30
 8005c58:	680e      	ldr	r6, [r1, #0]
 8005c5a:	bf08      	it	eq
 8005c5c:	694b      	ldreq	r3, [r1, #20]
 8005c5e:	600f      	str	r7, [r1, #0]
 8005c60:	bf18      	it	ne
 8005c62:	2300      	movne	r3, #0
 8005c64:	eba6 0807 	sub.w	r8, r6, r7
 8005c68:	608b      	str	r3, [r1, #8]
 8005c6a:	f1b8 0f00 	cmp.w	r8, #0
 8005c6e:	dd9c      	ble.n	8005baa <__sflush_r+0x1a>
 8005c70:	6a21      	ldr	r1, [r4, #32]
 8005c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c74:	4643      	mov	r3, r8
 8005c76:	463a      	mov	r2, r7
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b0      	blx	r6
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	dc06      	bgt.n	8005c8e <__sflush_r+0xfe>
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	e78e      	b.n	8005bac <__sflush_r+0x1c>
 8005c8e:	4407      	add	r7, r0
 8005c90:	eba8 0800 	sub.w	r8, r8, r0
 8005c94:	e7e9      	b.n	8005c6a <__sflush_r+0xda>
 8005c96:	bf00      	nop
 8005c98:	20400001 	.word	0x20400001

08005c9c <_fflush_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	690b      	ldr	r3, [r1, #16]
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	b913      	cbnz	r3, 8005cac <_fflush_r+0x10>
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	4628      	mov	r0, r5
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	b118      	cbz	r0, 8005cb6 <_fflush_r+0x1a>
 8005cae:	6983      	ldr	r3, [r0, #24]
 8005cb0:	b90b      	cbnz	r3, 8005cb6 <_fflush_r+0x1a>
 8005cb2:	f000 f887 	bl	8005dc4 <__sinit>
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <_fflush_r+0x6c>)
 8005cb8:	429c      	cmp	r4, r3
 8005cba:	d11b      	bne.n	8005cf4 <_fflush_r+0x58>
 8005cbc:	686c      	ldr	r4, [r5, #4]
 8005cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0ef      	beq.n	8005ca6 <_fflush_r+0xa>
 8005cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cc8:	07d0      	lsls	r0, r2, #31
 8005cca:	d404      	bmi.n	8005cd6 <_fflush_r+0x3a>
 8005ccc:	0599      	lsls	r1, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_fflush_r+0x3a>
 8005cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cd2:	f000 f915 	bl	8005f00 <__retarget_lock_acquire_recursive>
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4621      	mov	r1, r4
 8005cda:	f7ff ff59 	bl	8005b90 <__sflush_r>
 8005cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ce0:	07da      	lsls	r2, r3, #31
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	d4e0      	bmi.n	8005ca8 <_fflush_r+0xc>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	059b      	lsls	r3, r3, #22
 8005cea:	d4dd      	bmi.n	8005ca8 <_fflush_r+0xc>
 8005cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cee:	f000 f908 	bl	8005f02 <__retarget_lock_release_recursive>
 8005cf2:	e7d9      	b.n	8005ca8 <_fflush_r+0xc>
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <_fflush_r+0x70>)
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	d101      	bne.n	8005cfe <_fflush_r+0x62>
 8005cfa:	68ac      	ldr	r4, [r5, #8]
 8005cfc:	e7df      	b.n	8005cbe <_fflush_r+0x22>
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <_fflush_r+0x74>)
 8005d00:	429c      	cmp	r4, r3
 8005d02:	bf08      	it	eq
 8005d04:	68ec      	ldreq	r4, [r5, #12]
 8005d06:	e7da      	b.n	8005cbe <_fflush_r+0x22>
 8005d08:	080065c4 	.word	0x080065c4
 8005d0c:	080065e4 	.word	0x080065e4
 8005d10:	080065a4 	.word	0x080065a4

08005d14 <std>:
 8005d14:	2300      	movs	r3, #0
 8005d16:	b510      	push	{r4, lr}
 8005d18:	4604      	mov	r4, r0
 8005d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d22:	6083      	str	r3, [r0, #8]
 8005d24:	8181      	strh	r1, [r0, #12]
 8005d26:	6643      	str	r3, [r0, #100]	; 0x64
 8005d28:	81c2      	strh	r2, [r0, #14]
 8005d2a:	6183      	str	r3, [r0, #24]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	2208      	movs	r2, #8
 8005d30:	305c      	adds	r0, #92	; 0x5c
 8005d32:	f7fd fbcb 	bl	80034cc <memset>
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <std+0x38>)
 8005d38:	6263      	str	r3, [r4, #36]	; 0x24
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <std+0x3c>)
 8005d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d3e:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <std+0x40>)
 8005d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <std+0x44>)
 8005d44:	6224      	str	r4, [r4, #32]
 8005d46:	6323      	str	r3, [r4, #48]	; 0x30
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08006059 	.word	0x08006059
 8005d50:	0800607b 	.word	0x0800607b
 8005d54:	080060b3 	.word	0x080060b3
 8005d58:	080060d7 	.word	0x080060d7

08005d5c <_cleanup_r>:
 8005d5c:	4901      	ldr	r1, [pc, #4]	; (8005d64 <_cleanup_r+0x8>)
 8005d5e:	f000 b8af 	b.w	8005ec0 <_fwalk_reent>
 8005d62:	bf00      	nop
 8005d64:	08005c9d 	.word	0x08005c9d

08005d68 <__sfmoreglue>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	2268      	movs	r2, #104	; 0x68
 8005d6c:	1e4d      	subs	r5, r1, #1
 8005d6e:	4355      	muls	r5, r2
 8005d70:	460e      	mov	r6, r1
 8005d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d76:	f7ff fa17 	bl	80051a8 <_malloc_r>
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	b140      	cbz	r0, 8005d90 <__sfmoreglue+0x28>
 8005d7e:	2100      	movs	r1, #0
 8005d80:	e9c0 1600 	strd	r1, r6, [r0]
 8005d84:	300c      	adds	r0, #12
 8005d86:	60a0      	str	r0, [r4, #8]
 8005d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d8c:	f7fd fb9e 	bl	80034cc <memset>
 8005d90:	4620      	mov	r0, r4
 8005d92:	bd70      	pop	{r4, r5, r6, pc}

08005d94 <__sfp_lock_acquire>:
 8005d94:	4801      	ldr	r0, [pc, #4]	; (8005d9c <__sfp_lock_acquire+0x8>)
 8005d96:	f000 b8b3 	b.w	8005f00 <__retarget_lock_acquire_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	240003dd 	.word	0x240003dd

08005da0 <__sfp_lock_release>:
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <__sfp_lock_release+0x8>)
 8005da2:	f000 b8ae 	b.w	8005f02 <__retarget_lock_release_recursive>
 8005da6:	bf00      	nop
 8005da8:	240003dd 	.word	0x240003dd

08005dac <__sinit_lock_acquire>:
 8005dac:	4801      	ldr	r0, [pc, #4]	; (8005db4 <__sinit_lock_acquire+0x8>)
 8005dae:	f000 b8a7 	b.w	8005f00 <__retarget_lock_acquire_recursive>
 8005db2:	bf00      	nop
 8005db4:	240003de 	.word	0x240003de

08005db8 <__sinit_lock_release>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__sinit_lock_release+0x8>)
 8005dba:	f000 b8a2 	b.w	8005f02 <__retarget_lock_release_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	240003de 	.word	0x240003de

08005dc4 <__sinit>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	f7ff fff0 	bl	8005dac <__sinit_lock_acquire>
 8005dcc:	69a3      	ldr	r3, [r4, #24]
 8005dce:	b11b      	cbz	r3, 8005dd8 <__sinit+0x14>
 8005dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd4:	f7ff bff0 	b.w	8005db8 <__sinit_lock_release>
 8005dd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ddc:	6523      	str	r3, [r4, #80]	; 0x50
 8005dde:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <__sinit+0x68>)
 8005de0:	4a13      	ldr	r2, [pc, #76]	; (8005e30 <__sinit+0x6c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005de6:	42a3      	cmp	r3, r4
 8005de8:	bf04      	itt	eq
 8005dea:	2301      	moveq	r3, #1
 8005dec:	61a3      	streq	r3, [r4, #24]
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 f820 	bl	8005e34 <__sfp>
 8005df4:	6060      	str	r0, [r4, #4]
 8005df6:	4620      	mov	r0, r4
 8005df8:	f000 f81c 	bl	8005e34 <__sfp>
 8005dfc:	60a0      	str	r0, [r4, #8]
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f000 f818 	bl	8005e34 <__sfp>
 8005e04:	2200      	movs	r2, #0
 8005e06:	60e0      	str	r0, [r4, #12]
 8005e08:	2104      	movs	r1, #4
 8005e0a:	6860      	ldr	r0, [r4, #4]
 8005e0c:	f7ff ff82 	bl	8005d14 <std>
 8005e10:	68a0      	ldr	r0, [r4, #8]
 8005e12:	2201      	movs	r2, #1
 8005e14:	2109      	movs	r1, #9
 8005e16:	f7ff ff7d 	bl	8005d14 <std>
 8005e1a:	68e0      	ldr	r0, [r4, #12]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	2112      	movs	r1, #18
 8005e20:	f7ff ff78 	bl	8005d14 <std>
 8005e24:	2301      	movs	r3, #1
 8005e26:	61a3      	str	r3, [r4, #24]
 8005e28:	e7d2      	b.n	8005dd0 <__sinit+0xc>
 8005e2a:	bf00      	nop
 8005e2c:	080061d8 	.word	0x080061d8
 8005e30:	08005d5d 	.word	0x08005d5d

08005e34 <__sfp>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	4607      	mov	r7, r0
 8005e38:	f7ff ffac 	bl	8005d94 <__sfp_lock_acquire>
 8005e3c:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <__sfp+0x84>)
 8005e3e:	681e      	ldr	r6, [r3, #0]
 8005e40:	69b3      	ldr	r3, [r6, #24]
 8005e42:	b913      	cbnz	r3, 8005e4a <__sfp+0x16>
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff ffbd 	bl	8005dc4 <__sinit>
 8005e4a:	3648      	adds	r6, #72	; 0x48
 8005e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	d503      	bpl.n	8005e5c <__sfp+0x28>
 8005e54:	6833      	ldr	r3, [r6, #0]
 8005e56:	b30b      	cbz	r3, 8005e9c <__sfp+0x68>
 8005e58:	6836      	ldr	r6, [r6, #0]
 8005e5a:	e7f7      	b.n	8005e4c <__sfp+0x18>
 8005e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e60:	b9d5      	cbnz	r5, 8005e98 <__sfp+0x64>
 8005e62:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <__sfp+0x88>)
 8005e64:	60e3      	str	r3, [r4, #12]
 8005e66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e6a:	6665      	str	r5, [r4, #100]	; 0x64
 8005e6c:	f000 f847 	bl	8005efe <__retarget_lock_init_recursive>
 8005e70:	f7ff ff96 	bl	8005da0 <__sfp_lock_release>
 8005e74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e7c:	6025      	str	r5, [r4, #0]
 8005e7e:	61a5      	str	r5, [r4, #24]
 8005e80:	2208      	movs	r2, #8
 8005e82:	4629      	mov	r1, r5
 8005e84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e88:	f7fd fb20 	bl	80034cc <memset>
 8005e8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e94:	4620      	mov	r0, r4
 8005e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e98:	3468      	adds	r4, #104	; 0x68
 8005e9a:	e7d9      	b.n	8005e50 <__sfp+0x1c>
 8005e9c:	2104      	movs	r1, #4
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	f7ff ff62 	bl	8005d68 <__sfmoreglue>
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	6030      	str	r0, [r6, #0]
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d1d5      	bne.n	8005e58 <__sfp+0x24>
 8005eac:	f7ff ff78 	bl	8005da0 <__sfp_lock_release>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	e7ee      	b.n	8005e94 <__sfp+0x60>
 8005eb6:	bf00      	nop
 8005eb8:	080061d8 	.word	0x080061d8
 8005ebc:	ffff0001 	.word	0xffff0001

08005ec0 <_fwalk_reent>:
 8005ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	4688      	mov	r8, r1
 8005ec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ecc:	2700      	movs	r7, #0
 8005ece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ed2:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed6:	d505      	bpl.n	8005ee4 <_fwalk_reent+0x24>
 8005ed8:	6824      	ldr	r4, [r4, #0]
 8005eda:	2c00      	cmp	r4, #0
 8005edc:	d1f7      	bne.n	8005ece <_fwalk_reent+0xe>
 8005ede:	4638      	mov	r0, r7
 8005ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee4:	89ab      	ldrh	r3, [r5, #12]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d907      	bls.n	8005efa <_fwalk_reent+0x3a>
 8005eea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	d003      	beq.n	8005efa <_fwalk_reent+0x3a>
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	47c0      	blx	r8
 8005ef8:	4307      	orrs	r7, r0
 8005efa:	3568      	adds	r5, #104	; 0x68
 8005efc:	e7e9      	b.n	8005ed2 <_fwalk_reent+0x12>

08005efe <__retarget_lock_init_recursive>:
 8005efe:	4770      	bx	lr

08005f00 <__retarget_lock_acquire_recursive>:
 8005f00:	4770      	bx	lr

08005f02 <__retarget_lock_release_recursive>:
 8005f02:	4770      	bx	lr

08005f04 <__swhatbuf_r>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	460e      	mov	r6, r1
 8005f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	b096      	sub	sp, #88	; 0x58
 8005f10:	4614      	mov	r4, r2
 8005f12:	461d      	mov	r5, r3
 8005f14:	da08      	bge.n	8005f28 <__swhatbuf_r+0x24>
 8005f16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	602a      	str	r2, [r5, #0]
 8005f1e:	061a      	lsls	r2, r3, #24
 8005f20:	d410      	bmi.n	8005f44 <__swhatbuf_r+0x40>
 8005f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f26:	e00e      	b.n	8005f46 <__swhatbuf_r+0x42>
 8005f28:	466a      	mov	r2, sp
 8005f2a:	f000 f8fb 	bl	8006124 <_fstat_r>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	dbf1      	blt.n	8005f16 <__swhatbuf_r+0x12>
 8005f32:	9a01      	ldr	r2, [sp, #4]
 8005f34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f3c:	425a      	negs	r2, r3
 8005f3e:	415a      	adcs	r2, r3
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	e7ee      	b.n	8005f22 <__swhatbuf_r+0x1e>
 8005f44:	2340      	movs	r3, #64	; 0x40
 8005f46:	2000      	movs	r0, #0
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	b016      	add	sp, #88	; 0x58
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f50 <__smakebuf_r>:
 8005f50:	898b      	ldrh	r3, [r1, #12]
 8005f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f54:	079d      	lsls	r5, r3, #30
 8005f56:	4606      	mov	r6, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	d507      	bpl.n	8005f6c <__smakebuf_r+0x1c>
 8005f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	2301      	movs	r3, #1
 8005f66:	6163      	str	r3, [r4, #20]
 8005f68:	b002      	add	sp, #8
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	ab01      	add	r3, sp, #4
 8005f6e:	466a      	mov	r2, sp
 8005f70:	f7ff ffc8 	bl	8005f04 <__swhatbuf_r>
 8005f74:	9900      	ldr	r1, [sp, #0]
 8005f76:	4605      	mov	r5, r0
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f7ff f915 	bl	80051a8 <_malloc_r>
 8005f7e:	b948      	cbnz	r0, 8005f94 <__smakebuf_r+0x44>
 8005f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f84:	059a      	lsls	r2, r3, #22
 8005f86:	d4ef      	bmi.n	8005f68 <__smakebuf_r+0x18>
 8005f88:	f023 0303 	bic.w	r3, r3, #3
 8005f8c:	f043 0302 	orr.w	r3, r3, #2
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	e7e3      	b.n	8005f5c <__smakebuf_r+0xc>
 8005f94:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <__smakebuf_r+0x7c>)
 8005f96:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	6020      	str	r0, [r4, #0]
 8005f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	9b00      	ldr	r3, [sp, #0]
 8005fa4:	6163      	str	r3, [r4, #20]
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	6120      	str	r0, [r4, #16]
 8005faa:	b15b      	cbz	r3, 8005fc4 <__smakebuf_r+0x74>
 8005fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f000 f8c9 	bl	8006148 <_isatty_r>
 8005fb6:	b128      	cbz	r0, 8005fc4 <__smakebuf_r+0x74>
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	f023 0303 	bic.w	r3, r3, #3
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	89a0      	ldrh	r0, [r4, #12]
 8005fc6:	4305      	orrs	r5, r0
 8005fc8:	81a5      	strh	r5, [r4, #12]
 8005fca:	e7cd      	b.n	8005f68 <__smakebuf_r+0x18>
 8005fcc:	08005d5d 	.word	0x08005d5d

08005fd0 <_raise_r>:
 8005fd0:	291f      	cmp	r1, #31
 8005fd2:	b538      	push	{r3, r4, r5, lr}
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	d904      	bls.n	8005fe4 <_raise_r+0x14>
 8005fda:	2316      	movs	r3, #22
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fe6:	b112      	cbz	r2, 8005fee <_raise_r+0x1e>
 8005fe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fec:	b94b      	cbnz	r3, 8006002 <_raise_r+0x32>
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f000 f830 	bl	8006054 <_getpid_r>
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4601      	mov	r1, r0
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ffe:	f000 b817 	b.w	8006030 <_kill_r>
 8006002:	2b01      	cmp	r3, #1
 8006004:	d00a      	beq.n	800601c <_raise_r+0x4c>
 8006006:	1c59      	adds	r1, r3, #1
 8006008:	d103      	bne.n	8006012 <_raise_r+0x42>
 800600a:	2316      	movs	r3, #22
 800600c:	6003      	str	r3, [r0, #0]
 800600e:	2001      	movs	r0, #1
 8006010:	e7e7      	b.n	8005fe2 <_raise_r+0x12>
 8006012:	2400      	movs	r4, #0
 8006014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006018:	4628      	mov	r0, r5
 800601a:	4798      	blx	r3
 800601c:	2000      	movs	r0, #0
 800601e:	e7e0      	b.n	8005fe2 <_raise_r+0x12>

08006020 <raise>:
 8006020:	4b02      	ldr	r3, [pc, #8]	; (800602c <raise+0xc>)
 8006022:	4601      	mov	r1, r0
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	f7ff bfd3 	b.w	8005fd0 <_raise_r>
 800602a:	bf00      	nop
 800602c:	2400001c 	.word	0x2400001c

08006030 <_kill_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d07      	ldr	r5, [pc, #28]	; (8006050 <_kill_r+0x20>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	4611      	mov	r1, r2
 800603c:	602b      	str	r3, [r5, #0]
 800603e:	f7fb fc5d 	bl	80018fc <_kill>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	d102      	bne.n	800604c <_kill_r+0x1c>
 8006046:	682b      	ldr	r3, [r5, #0]
 8006048:	b103      	cbz	r3, 800604c <_kill_r+0x1c>
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	bf00      	nop
 8006050:	240003d8 	.word	0x240003d8

08006054 <_getpid_r>:
 8006054:	f7fb bc4a 	b.w	80018ec <_getpid>

08006058 <__sread>:
 8006058:	b510      	push	{r4, lr}
 800605a:	460c      	mov	r4, r1
 800605c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006060:	f000 f894 	bl	800618c <_read_r>
 8006064:	2800      	cmp	r0, #0
 8006066:	bfab      	itete	ge
 8006068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800606a:	89a3      	ldrhlt	r3, [r4, #12]
 800606c:	181b      	addge	r3, r3, r0
 800606e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006072:	bfac      	ite	ge
 8006074:	6563      	strge	r3, [r4, #84]	; 0x54
 8006076:	81a3      	strhlt	r3, [r4, #12]
 8006078:	bd10      	pop	{r4, pc}

0800607a <__swrite>:
 800607a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607e:	461f      	mov	r7, r3
 8006080:	898b      	ldrh	r3, [r1, #12]
 8006082:	05db      	lsls	r3, r3, #23
 8006084:	4605      	mov	r5, r0
 8006086:	460c      	mov	r4, r1
 8006088:	4616      	mov	r6, r2
 800608a:	d505      	bpl.n	8006098 <__swrite+0x1e>
 800608c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006090:	2302      	movs	r3, #2
 8006092:	2200      	movs	r2, #0
 8006094:	f000 f868 	bl	8006168 <_lseek_r>
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800609e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	4632      	mov	r2, r6
 80060a6:	463b      	mov	r3, r7
 80060a8:	4628      	mov	r0, r5
 80060aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ae:	f000 b817 	b.w	80060e0 <_write_r>

080060b2 <__sseek>:
 80060b2:	b510      	push	{r4, lr}
 80060b4:	460c      	mov	r4, r1
 80060b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ba:	f000 f855 	bl	8006168 <_lseek_r>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	bf15      	itete	ne
 80060c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80060c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060ce:	81a3      	strheq	r3, [r4, #12]
 80060d0:	bf18      	it	ne
 80060d2:	81a3      	strhne	r3, [r4, #12]
 80060d4:	bd10      	pop	{r4, pc}

080060d6 <__sclose>:
 80060d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060da:	f000 b813 	b.w	8006104 <_close_r>
	...

080060e0 <_write_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d07      	ldr	r5, [pc, #28]	; (8006100 <_write_r+0x20>)
 80060e4:	4604      	mov	r4, r0
 80060e6:	4608      	mov	r0, r1
 80060e8:	4611      	mov	r1, r2
 80060ea:	2200      	movs	r2, #0
 80060ec:	602a      	str	r2, [r5, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	f7fb fc3b 	bl	800196a <_write>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_write_r+0x1e>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_write_r+0x1e>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	240003d8 	.word	0x240003d8

08006104 <_close_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4d06      	ldr	r5, [pc, #24]	; (8006120 <_close_r+0x1c>)
 8006108:	2300      	movs	r3, #0
 800610a:	4604      	mov	r4, r0
 800610c:	4608      	mov	r0, r1
 800610e:	602b      	str	r3, [r5, #0]
 8006110:	f7fb fc47 	bl	80019a2 <_close>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d102      	bne.n	800611e <_close_r+0x1a>
 8006118:	682b      	ldr	r3, [r5, #0]
 800611a:	b103      	cbz	r3, 800611e <_close_r+0x1a>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	bd38      	pop	{r3, r4, r5, pc}
 8006120:	240003d8 	.word	0x240003d8

08006124 <_fstat_r>:
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4d07      	ldr	r5, [pc, #28]	; (8006144 <_fstat_r+0x20>)
 8006128:	2300      	movs	r3, #0
 800612a:	4604      	mov	r4, r0
 800612c:	4608      	mov	r0, r1
 800612e:	4611      	mov	r1, r2
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	f7fb fc42 	bl	80019ba <_fstat>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	d102      	bne.n	8006140 <_fstat_r+0x1c>
 800613a:	682b      	ldr	r3, [r5, #0]
 800613c:	b103      	cbz	r3, 8006140 <_fstat_r+0x1c>
 800613e:	6023      	str	r3, [r4, #0]
 8006140:	bd38      	pop	{r3, r4, r5, pc}
 8006142:	bf00      	nop
 8006144:	240003d8 	.word	0x240003d8

08006148 <_isatty_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4d06      	ldr	r5, [pc, #24]	; (8006164 <_isatty_r+0x1c>)
 800614c:	2300      	movs	r3, #0
 800614e:	4604      	mov	r4, r0
 8006150:	4608      	mov	r0, r1
 8006152:	602b      	str	r3, [r5, #0]
 8006154:	f7fb fc41 	bl	80019da <_isatty>
 8006158:	1c43      	adds	r3, r0, #1
 800615a:	d102      	bne.n	8006162 <_isatty_r+0x1a>
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	b103      	cbz	r3, 8006162 <_isatty_r+0x1a>
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	bd38      	pop	{r3, r4, r5, pc}
 8006164:	240003d8 	.word	0x240003d8

08006168 <_lseek_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4d07      	ldr	r5, [pc, #28]	; (8006188 <_lseek_r+0x20>)
 800616c:	4604      	mov	r4, r0
 800616e:	4608      	mov	r0, r1
 8006170:	4611      	mov	r1, r2
 8006172:	2200      	movs	r2, #0
 8006174:	602a      	str	r2, [r5, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	f7fb fc3a 	bl	80019f0 <_lseek>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_lseek_r+0x1e>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_lseek_r+0x1e>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	240003d8 	.word	0x240003d8

0800618c <_read_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4d07      	ldr	r5, [pc, #28]	; (80061ac <_read_r+0x20>)
 8006190:	4604      	mov	r4, r0
 8006192:	4608      	mov	r0, r1
 8006194:	4611      	mov	r1, r2
 8006196:	2200      	movs	r2, #0
 8006198:	602a      	str	r2, [r5, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	f7fb fbc8 	bl	8001930 <_read>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_read_r+0x1e>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_read_r+0x1e>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	240003d8 	.word	0x240003d8

080061b0 <_init>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr

080061bc <_fini>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr
