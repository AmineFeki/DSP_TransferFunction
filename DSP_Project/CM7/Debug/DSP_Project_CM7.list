
DSP_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08006780  08006780  00016780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006a60  08006a60  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a60  08006a60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08006a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005090  24000078  08006ae0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24005108  08006ae0  00025108  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ffd  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321a  00000000  00000000  0003a0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a36c  00000000  00000000  0003faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161ad  00000000  00000000  00079e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186748  00000000  00000000  0008ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00216709  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  0021675c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006764 	.word	0x08006764

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08006764 	.word	0x08006764

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <SystemInit+0xfc>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <SystemInit+0xfc>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b39      	ldr	r3, [pc, #228]	; (80003dc <SystemInit+0xfc>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a38      	ldr	r2, [pc, #224]	; (80003dc <SystemInit+0xfc>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <SystemInit+0x100>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <SystemInit+0x100>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <SystemInit+0x100>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <SystemInit+0x104>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a30      	ldr	r2, [pc, #192]	; (80003e4 <SystemInit+0x104>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <SystemInit+0x104>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <SystemInit+0x104>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492c      	ldr	r1, [pc, #176]	; (80003e4 <SystemInit+0x104>)
 8000334:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <SystemInit+0x108>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <SystemInit+0x100>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <SystemInit+0x100>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <SystemInit+0x100>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x104>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <SystemInit+0x104>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x104>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <SystemInit+0x104>)
 800036a:	4a20      	ldr	r2, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x104>)
 8000370:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <SystemInit+0x110>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <SystemInit+0x104>)
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <SystemInit+0x114>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x104>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <SystemInit+0x104>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <SystemInit+0x114>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x104>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <SystemInit+0x104>)
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <SystemInit+0x114>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x104>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SystemInit+0x104>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <SystemInit+0x104>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <SystemInit+0x104>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <SystemInit+0x118>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <SystemInit+0x118>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <SystemInit+0x11c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <SystemInit+0x120>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <SystemInit+0x124>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <SystemInit+0x128>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <DSP_PolynomInit>:

#include "DSP_Polynom.h"


DSP_Return_ten DSP_PolynomInit(DSP_Polynom_tst* Polynom_st)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	Polynom_st->degree = 0;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0 ; i < 10 ; i++)
 800041a:	2300      	movs	r3, #0
 800041c:	73fb      	strb	r3, [r7, #15]
 800041e:	e011      	b.n	8000444 <DSP_PolynomInit+0x38>
	{
		Polynom_st->coef[i] = 0.0;
 8000420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	3301      	adds	r3, #1
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	18d1      	adds	r1, r2, r3
 800042c:	f04f 0200 	mov.w	r2, #0
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e9c1 2300 	strd	r2, r3, [r1]
	for (int8_t i = 0 ; i < 10 ; i++)
 8000438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	3301      	adds	r3, #1
 8000440:	b2db      	uxtb	r3, r3
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000448:	2b09      	cmp	r3, #9
 800044a:	dde9      	ble.n	8000420 <DSP_PolynomInit+0x14>
	}
	return DSP_Ok_en;
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <DSP_SumPolynom>:

	return Return;
}

DSP_Return_ten DSP_SumPolynom(DSP_Polynom_tst Polynom1_st, DSP_Polynom_tst Polynom2_st , DSP_Polynom_tst* PolynomSum_st)
{
 800045a:	b084      	sub	sp, #16
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	f107 0c10 	add.w	ip, r7, #16
 8000466:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DSP_Return_ten Return = DSP_Ok_en;
 800046a:	2300      	movs	r3, #0
 800046c:	71bb      	strb	r3, [r7, #6]

	if (Polynom1_st.degree == Polynom2_st.degree)
 800046e:	7c3a      	ldrb	r2, [r7, #16]
 8000470:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000474:	429a      	cmp	r2, r3
 8000476:	d104      	bne.n	8000482 <DSP_SumPolynom+0x28>
	{
		PolynomSum_st->degree = Polynom1_st.degree;
 8000478:	7c3a      	ldrb	r2, [r7, #16]
 800047a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800047e:	701a      	strb	r2, [r3, #0]
 8000480:	e00e      	b.n	80004a0 <DSP_SumPolynom+0x46>
	}
	else if (Polynom1_st.degree > Polynom2_st.degree)
 8000482:	7c3a      	ldrb	r2, [r7, #16]
 8000484:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000488:	429a      	cmp	r2, r3
 800048a:	d904      	bls.n	8000496 <DSP_SumPolynom+0x3c>
	{
		PolynomSum_st->degree = Polynom1_st.degree;
 800048c:	7c3a      	ldrb	r2, [r7, #16]
 800048e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000492:	701a      	strb	r2, [r3, #0]
 8000494:	e004      	b.n	80004a0 <DSP_SumPolynom+0x46>
	}
	else
	{
		PolynomSum_st->degree = Polynom2_st.degree;
 8000496:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800049a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800049e:	701a      	strb	r2, [r3, #0]
	}

	for (int8_t i = 0; i < PolynomSum_st->degree + 1 ; i++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	e021      	b.n	80004ea <DSP_SumPolynom+0x90>
	{
		PolynomSum_st->coef[i] = Polynom1_st.coef[i] + Polynom2_st.coef[i];
 80004a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004aa:	3301      	adds	r3, #1
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	3310      	adds	r3, #16
 80004b0:	443b      	add	r3, r7
 80004b2:	ed93 6b00 	vldr	d6, [r3]
 80004b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ba:	3301      	adds	r3, #1
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	3310      	adds	r3, #16
 80004c0:	443b      	add	r3, r7
 80004c2:	3360      	adds	r3, #96	; 0x60
 80004c4:	ed93 7b00 	vldr	d7, [r3]
 80004c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80004d0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80004d4:	3301      	adds	r3, #1
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	4413      	add	r3, r2
 80004da:	ed83 7b00 	vstr	d7, [r3]
	for (int8_t i = 0; i < PolynomSum_st->degree + 1 ; i++)
 80004de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	3301      	adds	r3, #1
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	dad5      	bge.n	80004a6 <DSP_SumPolynom+0x4c>
	}

	while (PolynomSum_st->coef[PolynomSum_st->degree] == 0.0)
 80004fa:	e007      	b.n	800050c <DSP_SumPolynom+0xb2>
	{
		PolynomSum_st->degree = PolynomSum_st->degree - 1 ;
 80004fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	3b01      	subs	r3, #1
 8000504:	b2da      	uxtb	r2, r3
 8000506:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800050a:	701a      	strb	r2, [r3, #0]
	while (PolynomSum_st->coef[PolynomSum_st->degree] == 0.0)
 800050c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000516:	3301      	adds	r3, #1
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	4413      	add	r3, r2
 800051c:	ed93 7b00 	vldr	d7, [r3]
 8000520:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000528:	d0e8      	beq.n	80004fc <DSP_SumPolynom+0xa2>
	}

	return Return;
 800052a:	79bb      	ldrb	r3, [r7, #6]
}
 800052c:	4618      	mov	r0, r3
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	b004      	add	sp, #16
 8000538:	4770      	bx	lr

0800053a <DSP_MulPolynom>:

DSP_Return_ten DSP_MulPolynom(DSP_Polynom_tst Polynom1_st, DSP_Polynom_tst Polynom2_st, DSP_Polynom_tst* PolynomMul_st)
{
 800053a:	b084      	sub	sp, #16
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	f107 0c10 	add.w	ip, r7, #16
 8000546:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DSP_Return_ten Return = DSP_Ok_en;
 800054a:	2300      	movs	r3, #0
 800054c:	717b      	strb	r3, [r7, #5]

//	double PolynomProduct[10][10];

	PolynomMul_st->degree = Polynom1_st.degree + Polynom2_st.degree;
 800054e:	7c3a      	ldrb	r2, [r7, #16]
 8000550:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000554:	4413      	add	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800055c:	701a      	strb	r2, [r3, #0]

	for (int8_t i = 0 ; i < Polynom1_st.degree +1 ; i++)
 800055e:	2300      	movs	r3, #0
 8000560:	71fb      	strb	r3, [r7, #7]
 8000562:	e042      	b.n	80005ea <DSP_MulPolynom+0xb0>
	{
		// select the line
		for (int8_t j = 0 ; j <Polynom2_st.degree+1 ; j++)
 8000564:	2300      	movs	r3, #0
 8000566:	71bb      	strb	r3, [r7, #6]
 8000568:	e032      	b.n	80005d0 <DSP_MulPolynom+0x96>
		{
			// select the row
//			PolynomProduct[i][j] = Polynom1_st.coef[i] * Polynom2_st.coef[j];
			PolynomMul_st->coef[i+j] = PolynomMul_st->coef[i+j] + (Polynom1_st.coef[i] * Polynom2_st.coef[j]);
 800056a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800056e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000572:	4413      	add	r3, r2
 8000574:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000578:	3301      	adds	r3, #1
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	4413      	add	r3, r2
 800057e:	ed93 6b00 	vldr	d6, [r3]
 8000582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000586:	3301      	adds	r3, #1
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	3310      	adds	r3, #16
 800058c:	443b      	add	r3, r7
 800058e:	ed93 5b00 	vldr	d5, [r3]
 8000592:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000596:	3301      	adds	r3, #1
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	3310      	adds	r3, #16
 800059c:	443b      	add	r3, r7
 800059e:	3360      	adds	r3, #96	; 0x60
 80005a0:	ed93 7b00 	vldr	d7, [r3]
 80005a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80005a8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005b0:	4413      	add	r3, r2
 80005b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80005b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80005ba:	3301      	adds	r3, #1
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	4413      	add	r3, r2
 80005c0:	ed83 7b00 	vstr	d7, [r3]
		for (int8_t j = 0 ; j <Polynom2_st.degree+1 ; j++)
 80005c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	71bb      	strb	r3, [r7, #6]
 80005d0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80005d4:	461a      	mov	r2, r3
 80005d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005da:	429a      	cmp	r2, r3
 80005dc:	dac5      	bge.n	800056a <DSP_MulPolynom+0x30>
	for (int8_t i = 0 ; i < Polynom1_st.degree +1 ; i++)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	7c3b      	ldrb	r3, [r7, #16]
 80005ec:	461a      	mov	r2, r3
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dab6      	bge.n	8000564 <DSP_MulPolynom+0x2a>
		}
	}

	return Return;
 80005f6:	797b      	ldrb	r3, [r7, #5]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	b004      	add	sp, #16
 8000604:	4770      	bx	lr

08000606 <DSP_MulScalarPolynom>:

DSP_Return_ten DSP_MulScalarPolynom(double Scalar, DSP_Polynom_tst Polynom1_st, DSP_Polynom_tst* PolynomMul_st)
{
 8000606:	b084      	sub	sp, #16
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0b00 	vstr	d0, [r7]
 8000612:	f107 0c18 	add.w	ip, r7, #24
 8000616:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	PolynomMul_st->degree = Polynom1_st.degree;
 800061a:	7e3a      	ldrb	r2, [r7, #24]
 800061c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800061e:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0; i < Polynom1_st.degree + 1 ; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e019      	b.n	800065a <DSP_MulScalarPolynom+0x54>
	{
		PolynomMul_st->coef[i] = Scalar * Polynom1_st.coef[i];
 8000626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800062a:	3301      	adds	r3, #1
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	3318      	adds	r3, #24
 8000630:	443b      	add	r3, r7
 8000632:	ed93 6b00 	vldr	d6, [r3]
 8000636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063a:	ed97 7b00 	vldr	d7, [r7]
 800063e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000642:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000644:	3301      	adds	r3, #1
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	4413      	add	r3, r2
 800064a:	ed83 7b00 	vstr	d7, [r3]
	for (int8_t i = 0; i < Polynom1_st.degree + 1 ; i++)
 800064e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	3301      	adds	r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	7e3b      	ldrb	r3, [r7, #24]
 800065c:	461a      	mov	r2, r3
 800065e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000662:	429a      	cmp	r2, r3
 8000664:	dadf      	bge.n	8000626 <DSP_MulScalarPolynom+0x20>
	}
	return DSP_Ok_en;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	b004      	add	sp, #16
 8000674:	4770      	bx	lr

08000676 <DSP_DevideScalarPolynom>:

DSP_Return_ten DSP_DevideScalarPolynom(double Scalar, DSP_Polynom_tst Polynom1_st, DSP_Polynom_tst* PolynomMul_st)
{
 8000676:	b084      	sub	sp, #16
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	ed87 0b00 	vstr	d0, [r7]
 8000682:	f107 0c18 	add.w	ip, r7, #24
 8000686:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	PolynomMul_st->degree = Polynom1_st.degree;
 800068a:	7e3a      	ldrb	r2, [r7, #24]
 800068c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800068e:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0; i < Polynom1_st.degree + 1 ; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	e019      	b.n	80006ca <DSP_DevideScalarPolynom+0x54>
	{
		PolynomMul_st->coef[i] = (double)( Polynom1_st.coef[i] / Scalar);
 8000696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069a:	3301      	adds	r3, #1
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	3318      	adds	r3, #24
 80006a0:	443b      	add	r3, r7
 80006a2:	ed93 5b00 	vldr	d5, [r3]
 80006a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006aa:	ed97 6b00 	vldr	d6, [r7]
 80006ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80006b4:	3301      	adds	r3, #1
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	4413      	add	r3, r2
 80006ba:	ed83 7b00 	vstr	d7, [r3]
	for (int8_t i = 0; i < Polynom1_st.degree + 1 ; i++)
 80006be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	7e3b      	ldrb	r3, [r7, #24]
 80006cc:	461a      	mov	r2, r3
 80006ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dadf      	bge.n	8000696 <DSP_DevideScalarPolynom+0x20>
	}
	return DSP_Ok_en;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	b004      	add	sp, #16
 80006e4:	4770      	bx	lr
	...

080006e8 <DSP_PowPolynom>:

DSP_Return_ten DSP_PowPolynom(DSP_Polynom_tst Polynom_st, uint8_t pow , DSP_Polynom_tst* PolynomResult_st)
{
 80006e8:	b084      	sub	sp, #16
 80006ea:	b590      	push	{r4, r7, lr}
 80006ec:	b0c9      	sub	sp, #292	; 0x124
 80006ee:	af2e      	add	r7, sp, #184	; 0xb8
 80006f0:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80006f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DSP_Return_ten Return = DSP_Ok_en;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	DSP_Polynom_tst PolynomZero;

	if (pow != 0)
 80006fe:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000702:	2b00      	cmp	r3, #0
 8000704:	d043      	beq.n	800078e <DSP_PowPolynom+0xa6>
	{

		PolynomResult_st->degree = 0;
 8000706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		PolynomResult_st->coef[0] = 1.0;
 800070e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8000712:	f04f 0200 	mov.w	r2, #0
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <DSP_PowPolynom+0xd0>)
 8000718:	e9c1 2302 	strd	r2, r3, [r1, #8]

		for (int8_t i = 0; i < pow ; i++)
 800071c:	2300      	movs	r3, #0
 800071e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000722:	e02d      	b.n	8000780 <DSP_PowPolynom+0x98>
		{
			DSP_PolynomInit(&PolynomZero);
 8000724:	463b      	mov	r3, r7
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fe70 	bl	800040c <DSP_PolynomInit>
			DSP_MulPolynom(*PolynomResult_st, Polynom_st, &PolynomZero);
 800072c:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8000730:	463b      	mov	r3, r7
 8000732:	932c      	str	r3, [sp, #176]	; 0xb0
 8000734:	ab14      	add	r3, sp, #80	; 0x50
 8000736:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800073a:	2260      	movs	r2, #96	; 0x60
 800073c:	4618      	mov	r0, r3
 800073e:	f005 f943 	bl	80059c8 <memcpy>
 8000742:	4668      	mov	r0, sp
 8000744:	f104 0310 	add.w	r3, r4, #16
 8000748:	2250      	movs	r2, #80	; 0x50
 800074a:	4619      	mov	r1, r3
 800074c:	f005 f93c 	bl	80059c8 <memcpy>
 8000750:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000754:	f7ff fef1 	bl	800053a <DSP_MulPolynom>
			DSP_CpyPolynom(PolynomResult_st, PolynomZero);
 8000758:	4668      	mov	r0, sp
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2258      	movs	r2, #88	; 0x58
 8000760:	4619      	mov	r1, r3
 8000762:	f005 f931 	bl	80059c8 <memcpy>
 8000766:	463b      	mov	r3, r7
 8000768:	cb0c      	ldmia	r3, {r2, r3}
 800076a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800076e:	f000 f825 	bl	80007bc <DSP_CpyPolynom>
		for (int8_t i = 0; i < pow ; i++)
 8000772:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8000776:	b2db      	uxtb	r3, r3
 8000778:	3301      	adds	r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000780:	f997 2067 	ldrsb.w	r2, [r7, #103]	; 0x67
 8000784:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000788:	429a      	cmp	r2, r3
 800078a:	dbcb      	blt.n	8000724 <DSP_PowPolynom+0x3c>
 800078c:	e00a      	b.n	80007a4 <DSP_PowPolynom+0xbc>
		}
	}
	else
	{
		PolynomResult_st->degree = 0;
 800078e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		PolynomResult_st->coef[0] = 1.0;
 8000796:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800079a:	f04f 0200 	mov.w	r2, #0
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <DSP_PowPolynom+0xd0>)
 80007a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	return Return;
 80007a4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	376c      	adds	r7, #108	; 0x6c
 80007ac:	46bd      	mov	sp, r7
 80007ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007b2:	b004      	add	sp, #16
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	3ff00000 	.word	0x3ff00000

080007bc <DSP_CpyPolynom>:

DSP_Return_ten DSP_CpyPolynom(DSP_Polynom_tst* Polynom1_st , DSP_Polynom_tst Polynom2_st)
{
 80007bc:	b082      	sub	sp, #8
 80007be:	b480      	push	{r7}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	f107 0118 	add.w	r1, r7, #24
 80007ca:	e881 000c 	stmia.w	r1, {r2, r3}
	Polynom1_st->degree = Polynom2_st.degree;
 80007ce:	7e3a      	ldrb	r2, [r7, #24]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0; i < Polynom2_st.degree + 1 ; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e015      	b.n	8000806 <DSP_CpyPolynom+0x4a>
	{
		Polynom1_st->coef[i] = Polynom2_st.coef[i];
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	f997 100f 	ldrsb.w	r1, [r7, #15]
 80007e2:	3301      	adds	r3, #1
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	3318      	adds	r3, #24
 80007e8:	443b      	add	r3, r7
 80007ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	3101      	adds	r1, #1
 80007f2:	00c9      	lsls	r1, r1, #3
 80007f4:	4401      	add	r1, r0
 80007f6:	e9c1 2300 	strd	r2, r3, [r1]
	for (int8_t i = 0; i < Polynom2_st.degree + 1 ; i++)
 80007fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	3301      	adds	r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	7e3b      	ldrb	r3, [r7, #24]
 8000808:	461a      	mov	r2, r3
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	429a      	cmp	r2, r3
 8000810:	dae3      	bge.n	80007da <DSP_CpyPolynom+0x1e>
	}
	return DSP_Ok_en;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	b002      	add	sp, #8
 8000820:	4770      	bx	lr
 8000822:	0000      	movs	r0, r0
 8000824:	0000      	movs	r0, r0
	...

08000828 <DSP_C2D>:

	return Return;
}

DSP_Return_ten DSP_C2D(DSP_TF_tst ContTF, DSP_TF_tst* DiscTF, DSP_ZAlgorithm_ten Algo)
{
 8000828:	b084      	sub	sp, #16
 800082a:	b5b0      	push	{r4, r5, r7, lr}
 800082c:	ed2d 8b02 	vpush	{d8}
 8000830:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 8000834:	af2e      	add	r7, sp, #184	; 0xb8
 8000836:	f507 7448 	add.w	r4, r7, #800	; 0x320
 800083a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	DSP_Return_ten Return = DSP_Ok_en;
 800083e:	2300      	movs	r3, #0
 8000840:	f887 3305 	strb.w	r3, [r7, #773]	; 0x305

	DSP_Polynom_tst TustinNum;
	DSP_Polynom_tst TustinDenom;

	TustinNum.degree = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	f887 32a0 	strb.w	r3, [r7, #672]	; 0x2a0
	TustinNum.coef[0] = 2 / Ts;
 800084a:	f04f 0200 	mov.w	r2, #0
 800084e:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <DSP_C2D+0x1c8>)
 8000850:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
	TustinNum.coef[1] = -2/Ts;
 8000854:	a364      	add	r3, pc, #400	; (adr r3, 80009e8 <DSP_C2D+0x1c0>)
 8000856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800085a:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0

	TustinDenom.degree = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	f887 3240 	strb.w	r3, [r7, #576]	; 0x240
	TustinDenom.coef[0] = 1;
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	4b62      	ldr	r3, [pc, #392]	; (80009f4 <DSP_C2D+0x1cc>)
 800086a:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
	TustinDenom.coef[1] = 1;
 800086e:	f04f 0200 	mov.w	r2, #0
 8000872:	4b60      	ldr	r3, [pc, #384]	; (80009f4 <DSP_C2D+0x1cc>)
 8000874:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
	DSP_Polynom_tst InterPolynom6;




	switch (Algo)
 8000878:	f897 348c 	ldrb.w	r3, [r7, #1164]	; 0x48c
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <DSP_C2D+0x5c>
 8000880:	2b01      	cmp	r3, #1

	}break;
	case DSP_ZoH:
	{
		/* Under construction */
	}break;
 8000882:	e226      	b.n	8000cd2 <DSP_C2D+0x4aa>
		DiscTF->num.degree = ContTF.num.degree;
 8000884:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 8000888:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800088c:	701a      	strb	r2, [r3, #0]
		for (int8_t i = 0 ; i < ContTF.num.degree + 1 ; i++)
 800088e:	2300      	movs	r3, #0
 8000890:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
 8000894:	e099      	b.n	80009ca <DSP_C2D+0x1a2>
			DSP_PolynomInit(&InterPolynom1);
 8000896:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fdb6 	bl	800040c <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom2);
 80008a0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fdb1 	bl	800040c <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom3);
 80008aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdac 	bl	800040c <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom4);
 80008b4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fda7 	bl	800040c <DSP_PolynomInit>
			DSP_PowPolynom(TustinNum, ContTF.num.degree - i, &InterPolynom1);
 80008be:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 80008c2:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80008ce:	9215      	str	r2, [sp, #84]	; 0x54
 80008d0:	9314      	str	r3, [sp, #80]	; 0x50
 80008d2:	4668      	mov	r0, sp
 80008d4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80008d8:	2250      	movs	r2, #80	; 0x50
 80008da:	4619      	mov	r1, r3
 80008dc:	f005 f874 	bl	80059c8 <memcpy>
 80008e0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80008e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e6:	f7ff feff 	bl	80006e8 <DSP_PowPolynom>
			DSP_PowPolynom(TustinDenom, i, &InterPolynom2);
 80008ea:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 80008ee:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80008f2:	9215      	str	r2, [sp, #84]	; 0x54
 80008f4:	9314      	str	r3, [sp, #80]	; 0x50
 80008f6:	4668      	mov	r0, sp
 80008f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80008fc:	2250      	movs	r2, #80	; 0x50
 80008fe:	4619      	mov	r1, r3
 8000900:	f005 f862 	bl	80059c8 <memcpy>
 8000904:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800090a:	f7ff feed 	bl	80006e8 <DSP_PowPolynom>
			DSP_MulPolynom(InterPolynom1, InterPolynom2, &InterPolynom3);
 800090e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000912:	f5a3 7494 	sub.w	r4, r3, #296	; 0x128
 8000916:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800091a:	932c      	str	r3, [sp, #176]	; 0xb0
 800091c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000920:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8000924:	ab14      	add	r3, sp, #80	; 0x50
 8000926:	4611      	mov	r1, r2
 8000928:	2260      	movs	r2, #96	; 0x60
 800092a:	4618      	mov	r0, r3
 800092c:	f005 f84c 	bl	80059c8 <memcpy>
 8000930:	4668      	mov	r0, sp
 8000932:	f104 0310 	add.w	r3, r4, #16
 8000936:	2250      	movs	r2, #80	; 0x50
 8000938:	4619      	mov	r1, r3
 800093a:	f005 f845 	bl	80059c8 <memcpy>
 800093e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000942:	f7ff fdfa 	bl	800053a <DSP_MulPolynom>
			DSP_MulScalarPolynom(ContTF.num.coef[ContTF.num.degree - i], InterPolynom3, &InterPolynom4);
 8000946:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 800094a:	461a      	mov	r2, r3
 800094c:	f997 3307 	ldrsb.w	r3, [r7, #775]	; 0x307
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	3301      	adds	r3, #1
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800095a:	443b      	add	r3, r7
 800095c:	ed93 8b00 	vldr	d8, [r3]
 8000960:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000964:	f5a3 74f4 	sub.w	r4, r3, #488	; 0x1e8
 8000968:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800096c:	9314      	str	r3, [sp, #80]	; 0x50
 800096e:	4668      	mov	r0, sp
 8000970:	f104 0310 	add.w	r3, r4, #16
 8000974:	2250      	movs	r2, #80	; 0x50
 8000976:	4619      	mov	r1, r3
 8000978:	f005 f826 	bl	80059c8 <memcpy>
 800097c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000980:	eeb0 0b48 	vmov.f64	d0, d8
 8000984:	f7ff fe3f 	bl	8000606 <DSP_MulScalarPolynom>
			DSP_SumPolynom(InterPolynom4, DiscTF->num , &DiscTF->num);
 8000988:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800098c:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8000990:	f5a2 7412 	sub.w	r4, r2, #584	; 0x248
 8000994:	932c      	str	r3, [sp, #176]	; 0xb0
 8000996:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 800099a:	ab14      	add	r3, sp, #80	; 0x50
 800099c:	4611      	mov	r1, r2
 800099e:	2260      	movs	r2, #96	; 0x60
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 f811 	bl	80059c8 <memcpy>
 80009a6:	4668      	mov	r0, sp
 80009a8:	f104 0310 	add.w	r3, r4, #16
 80009ac:	2250      	movs	r2, #80	; 0x50
 80009ae:	4619      	mov	r1, r3
 80009b0:	f005 f80a 	bl	80059c8 <memcpy>
 80009b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009b8:	f7ff fd4f 	bl	800045a <DSP_SumPolynom>
		for (int8_t i = 0 ; i < ContTF.num.degree + 1 ; i++)
 80009bc:	f997 3307 	ldrsb.w	r3, [r7, #775]	; 0x307
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
 80009ca:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 80009ce:	461a      	mov	r2, r3
 80009d0:	f997 3307 	ldrsb.w	r3, [r7, #775]	; 0x307
 80009d4:	429a      	cmp	r2, r3
 80009d6:	f6bf af5e 	bge.w	8000896 <DSP_C2D+0x6e>
		for (int8_t i = 0 ; i < ContTF.denom.degree + 1 ; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
 80009e0:	e0a5      	b.n	8000b2e <DSP_C2D+0x306>
 80009e2:	bf00      	nop
 80009e4:	f3af 8000 	nop.w
 80009e8:	00000000 	.word	0x00000000
 80009ec:	c09f4000 	.word	0xc09f4000
 80009f0:	409f4000 	.word	0x409f4000
 80009f4:	3ff00000 	.word	0x3ff00000
			DSP_PolynomInit(&InterPolynom1);
 80009f8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fd05 	bl	800040c <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom2);
 8000a02:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fd00 	bl	800040c <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom3);
 8000a0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fcfb 	bl	800040c <DSP_PolynomInit>
			DSP_PolynomInit(&InterPolynom4);
 8000a16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fcf6 	bl	800040c <DSP_PolynomInit>
			DSP_PowPolynom(TustinNum, ContTF.denom.degree - i, &InterPolynom1);
 8000a20:	f897 2380 	ldrb.w	r2, [r7, #896]	; 0x380
 8000a24:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8000a30:	9215      	str	r2, [sp, #84]	; 0x54
 8000a32:	9314      	str	r3, [sp, #80]	; 0x50
 8000a34:	4668      	mov	r0, sp
 8000a36:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8000a3a:	2250      	movs	r2, #80	; 0x50
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f004 ffc3 	bl	80059c8 <memcpy>
 8000a42:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8000a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a48:	f7ff fe4e 	bl	80006e8 <DSP_PowPolynom>
			DSP_PowPolynom(TustinDenom, i, &InterPolynom2);
 8000a4c:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 8000a50:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000a54:	9215      	str	r2, [sp, #84]	; 0x54
 8000a56:	9314      	str	r3, [sp, #80]	; 0x50
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000a5e:	2250      	movs	r2, #80	; 0x50
 8000a60:	4619      	mov	r1, r3
 8000a62:	f004 ffb1 	bl	80059c8 <memcpy>
 8000a66:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a6c:	f7ff fe3c 	bl	80006e8 <DSP_PowPolynom>
			DSP_MulPolynom(InterPolynom1, InterPolynom2, &InterPolynom3);
 8000a70:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000a74:	f5a3 7494 	sub.w	r4, r3, #296	; 0x128
 8000a78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a7c:	932c      	str	r3, [sp, #176]	; 0xb0
 8000a7e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000a82:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8000a86:	ab14      	add	r3, sp, #80	; 0x50
 8000a88:	4611      	mov	r1, r2
 8000a8a:	2260      	movs	r2, #96	; 0x60
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 ff9b 	bl	80059c8 <memcpy>
 8000a92:	4668      	mov	r0, sp
 8000a94:	f104 0310 	add.w	r3, r4, #16
 8000a98:	2250      	movs	r2, #80	; 0x50
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f004 ff94 	bl	80059c8 <memcpy>
 8000aa0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aa4:	f7ff fd49 	bl	800053a <DSP_MulPolynom>
			DSP_MulScalarPolynom(ContTF.denom.coef[ContTF.denom.degree - i], InterPolynom3, &InterPolynom4);
 8000aa8:	f897 3380 	ldrb.w	r3, [r7, #896]	; 0x380
 8000aac:	461a      	mov	r2, r3
 8000aae:	f997 3306 	ldrsb.w	r3, [r7, #774]	; 0x306
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	330d      	adds	r3, #13
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000abc:	443b      	add	r3, r7
 8000abe:	ed93 8b00 	vldr	d8, [r3]
 8000ac2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000ac6:	f5a3 74f4 	sub.w	r4, r3, #488	; 0x1e8
 8000aca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000ace:	9314      	str	r3, [sp, #80]	; 0x50
 8000ad0:	4668      	mov	r0, sp
 8000ad2:	f104 0310 	add.w	r3, r4, #16
 8000ad6:	2250      	movs	r2, #80	; 0x50
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f004 ff75 	bl	80059c8 <memcpy>
 8000ade:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ae2:	eeb0 0b48 	vmov.f64	d0, d8
 8000ae6:	f7ff fd8e 	bl	8000606 <DSP_MulScalarPolynom>
			DSP_SumPolynom(InterPolynom4, DiscTF->denom , &DiscTF->denom);
 8000aea:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000aee:	3360      	adds	r3, #96	; 0x60
 8000af0:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8000af4:	f5a2 7412 	sub.w	r4, r2, #584	; 0x248
 8000af8:	932c      	str	r3, [sp, #176]	; 0xb0
 8000afa:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000afe:	a814      	add	r0, sp, #80	; 0x50
 8000b00:	3360      	adds	r3, #96	; 0x60
 8000b02:	2260      	movs	r2, #96	; 0x60
 8000b04:	4619      	mov	r1, r3
 8000b06:	f004 ff5f 	bl	80059c8 <memcpy>
 8000b0a:	4668      	mov	r0, sp
 8000b0c:	f104 0310 	add.w	r3, r4, #16
 8000b10:	2250      	movs	r2, #80	; 0x50
 8000b12:	4619      	mov	r1, r3
 8000b14:	f004 ff58 	bl	80059c8 <memcpy>
 8000b18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b1c:	f7ff fc9d 	bl	800045a <DSP_SumPolynom>
		for (int8_t i = 0 ; i < ContTF.denom.degree + 1 ; i++)
 8000b20:	f997 3306 	ldrsb.w	r3, [r7, #774]	; 0x306
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
 8000b2e:	f897 3380 	ldrb.w	r3, [r7, #896]	; 0x380
 8000b32:	461a      	mov	r2, r3
 8000b34:	f997 3306 	ldrsb.w	r3, [r7, #774]	; 0x306
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f6bf af5d 	bge.w	80009f8 <DSP_C2D+0x1d0>
		DSP_PolynomInit(&InterPolynom5);
 8000b3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fc62 	bl	800040c <DSP_PolynomInit>
		DSP_PolynomInit(&InterPolynom6);
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fc5e 	bl	800040c <DSP_PolynomInit>
		if (ContTF.num.degree > ContTF.denom.degree)
 8000b50:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 8000b54:	f897 3380 	ldrb.w	r3, [r7, #896]	; 0x380
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d944      	bls.n	8000be6 <DSP_C2D+0x3be>
			DSP_PowPolynom(TustinDenom, ContTF.num.degree-ContTF.denom.degree, &InterPolynom5);
 8000b5c:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 8000b60:	f897 3380 	ldrb.w	r3, [r7, #896]	; 0x380
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000b6c:	9215      	str	r2, [sp, #84]	; 0x54
 8000b6e:	9314      	str	r3, [sp, #80]	; 0x50
 8000b70:	4668      	mov	r0, sp
 8000b72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000b76:	2250      	movs	r2, #80	; 0x50
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f004 ff25 	bl	80059c8 <memcpy>
 8000b7e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b84:	f7ff fdb0 	bl	80006e8 <DSP_PowPolynom>
			DSP_MulPolynom(DiscTF->denom, InterPolynom5, &InterPolynom6);
 8000b88:	f8d7 4488 	ldr.w	r4, [r7, #1160]	; 0x488
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	932c      	str	r3, [sp, #176]	; 0xb0
 8000b90:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000b94:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8000b98:	ab14      	add	r3, sp, #80	; 0x50
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	2260      	movs	r2, #96	; 0x60
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 ff12 	bl	80059c8 <memcpy>
 8000ba4:	4668      	mov	r0, sp
 8000ba6:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8000baa:	2250      	movs	r2, #80	; 0x50
 8000bac:	4619      	mov	r1, r3
 8000bae:	f004 ff0b 	bl	80059c8 <memcpy>
 8000bb2:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8000bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb8:	f7ff fcbf 	bl	800053a <DSP_MulPolynom>
			DSP_CpyPolynom(&DiscTF->denom, InterPolynom6);
 8000bbc:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000bc0:	f103 0560 	add.w	r5, r3, #96	; 0x60
 8000bc4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000bc8:	f5a3 7442 	sub.w	r4, r3, #776	; 0x308
 8000bcc:	4668      	mov	r0, sp
 8000bce:	f104 0308 	add.w	r3, r4, #8
 8000bd2:	2258      	movs	r2, #88	; 0x58
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f004 fef7 	bl	80059c8 <memcpy>
 8000bda:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000bde:	4628      	mov	r0, r5
 8000be0:	f7ff fdec 	bl	80007bc <DSP_CpyPolynom>
 8000be4:	e046      	b.n	8000c74 <DSP_C2D+0x44c>
		else if (ContTF.num.degree < ContTF.denom.degree)
 8000be6:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 8000bea:	f897 3380 	ldrb.w	r3, [r7, #896]	; 0x380
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d240      	bcs.n	8000c74 <DSP_C2D+0x44c>
			DSP_PowPolynom(TustinDenom, ContTF.denom.degree-ContTF.num.degree, &InterPolynom5);
 8000bf2:	f897 2380 	ldrb.w	r2, [r7, #896]	; 0x380
 8000bf6:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000c02:	9215      	str	r2, [sp, #84]	; 0x54
 8000c04:	9314      	str	r3, [sp, #80]	; 0x50
 8000c06:	4668      	mov	r0, sp
 8000c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8000c0c:	2250      	movs	r2, #80	; 0x50
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f004 feda 	bl	80059c8 <memcpy>
 8000c14:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1a:	f7ff fd65 	bl	80006e8 <DSP_PowPolynom>
			DSP_MulPolynom(DiscTF->num, InterPolynom5, &InterPolynom6);
 8000c1e:	f8d7 4488 	ldr.w	r4, [r7, #1160]	; 0x488
 8000c22:	463b      	mov	r3, r7
 8000c24:	932c      	str	r3, [sp, #176]	; 0xb0
 8000c26:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000c2a:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8000c2e:	ab14      	add	r3, sp, #80	; 0x50
 8000c30:	4611      	mov	r1, r2
 8000c32:	2260      	movs	r2, #96	; 0x60
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 fec7 	bl	80059c8 <memcpy>
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	f104 0310 	add.w	r3, r4, #16
 8000c40:	2250      	movs	r2, #80	; 0x50
 8000c42:	4619      	mov	r1, r3
 8000c44:	f004 fec0 	bl	80059c8 <memcpy>
 8000c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c4c:	f7ff fc75 	bl	800053a <DSP_MulPolynom>
			DSP_CpyPolynom(&DiscTF->num, InterPolynom6);
 8000c50:	f8d7 5488 	ldr.w	r5, [r7, #1160]	; 0x488
 8000c54:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000c58:	f5a3 7442 	sub.w	r4, r3, #776	; 0x308
 8000c5c:	4668      	mov	r0, sp
 8000c5e:	f104 0308 	add.w	r3, r4, #8
 8000c62:	2258      	movs	r2, #88	; 0x58
 8000c64:	4619      	mov	r1, r3
 8000c66:	f004 feaf 	bl	80059c8 <memcpy>
 8000c6a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f7ff fda4 	bl	80007bc <DSP_CpyPolynom>
		DSP_DevideScalarPolynom(DiscTF->denom.coef[0], DiscTF->num, &DiscTF->num);
 8000c74:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000c78:	ed93 8b1a 	vldr	d8, [r3, #104]	; 0x68
 8000c7c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000c80:	f8d7 4488 	ldr.w	r4, [r7, #1160]	; 0x488
 8000c84:	9314      	str	r3, [sp, #80]	; 0x50
 8000c86:	4668      	mov	r0, sp
 8000c88:	f104 0310 	add.w	r3, r4, #16
 8000c8c:	2250      	movs	r2, #80	; 0x50
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f004 fe9a 	bl	80059c8 <memcpy>
 8000c94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c98:	eeb0 0b48 	vmov.f64	d0, d8
 8000c9c:	f7ff fceb 	bl	8000676 <DSP_DevideScalarPolynom>
		DSP_DevideScalarPolynom(DiscTF->denom.coef[0], DiscTF->denom, &DiscTF->denom);
 8000ca0:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000ca4:	ed93 8b1a 	vldr	d8, [r3, #104]	; 0x68
 8000ca8:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000cac:	3360      	adds	r3, #96	; 0x60
 8000cae:	f8d7 4488 	ldr.w	r4, [r7, #1160]	; 0x488
 8000cb2:	9314      	str	r3, [sp, #80]	; 0x50
 8000cb4:	4668      	mov	r0, sp
 8000cb6:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8000cba:	2250      	movs	r2, #80	; 0x50
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f004 fe83 	bl	80059c8 <memcpy>
 8000cc2:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8000cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc8:	eeb0 0b48 	vmov.f64	d0, d8
 8000ccc:	f7ff fcd3 	bl	8000676 <DSP_DevideScalarPolynom>
	}break;
 8000cd0:	bf00      	nop
	default:
	{

	}
	}
	return Return;
 8000cd2:	f897 3305 	ldrb.w	r3, [r7, #773]	; 0x305

}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f507 7742 	add.w	r7, r7, #776	; 0x308
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	ecbd 8b02 	vpop	{d8}
 8000ce2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <DSP_vGenerateSignal>:



void DSP_vGenerateSignal(DSP_TF_tst* tf)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if (tf->num.degree > tf->denom.degree)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d905      	bls.n	8000d0e <DSP_vGenerateSignal+0x22>
	{
		tf->k = tf->num.degree;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8000d0c:	e013      	b.n	8000d36 <DSP_vGenerateSignal+0x4a>
	}
	else if (tf->num.degree < tf->denom.degree)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d206      	bcs.n	8000d2a <DSP_vGenerateSignal+0x3e>
	{
		tf->k = tf->denom.degree;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8000d28:	e005      	b.n	8000d36 <DSP_vGenerateSignal+0x4a>
	}
	else
	{
		tf->k = tf->denom.degree;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	}

	tf->U[tf->k] = 0.0;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	3323      	adds	r3, #35	; 0x23
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	18d1      	adds	r1, r2, r3
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e9c1 2300 	strd	r2, r3, [r1]
	tf->Y[tf->k-1] = 0.0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8000d56:	3b01      	subs	r3, #1
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	3319      	adds	r3, #25
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	18d1      	adds	r1, r2, r3
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e9c1 2300 	strd	r2, r3, [r1]
	//HAL_TIM_Base_Start_IT(&htim6);
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DSP_vSetInput>:

void DSP_vSetInput(DSP_TF_tst* tf , float input)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	ed87 0a00 	vstr	s0, [r7]
	tf->U[tf->k]= input;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8000d8a:	edd7 7a00 	vldr	s15, [r7]
 8000d8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	3323      	adds	r3, #35	; 0x23
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4413      	add	r3, r2
 8000d9a:	ed83 7b00 	vstr	d7, [r3]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	0000      	movs	r0, r0
 8000dac:	0000      	movs	r0, r0
	...

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b0d9      	sub	sp, #356	; 0x164
 8000db4:	af58      	add	r7, sp, #352	; 0x160

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f000 fb3b 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f8c5 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM7_Init();
 8000dbe:	f000 f941 	bl	8001044 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	/*Sine wave*/

  DSP_ContinuousTFSine2_st.num.degree = 2;
 8000dc2:	4b51      	ldr	r3, [pc, #324]	; (8000f08 <main+0x158>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	701a      	strb	r2, [r3, #0]
  DSP_ContinuousTFSine2_st.num.coef[0] = 0.0;
 8000dc8:	494f      	ldr	r1, [pc, #316]	; (8000f08 <main+0x158>)
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  DSP_ContinuousTFSine2_st.num.coef[1] = 0.0;
 8000dd6:	494c      	ldr	r1, [pc, #304]	; (8000f08 <main+0x158>)
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c1 2304 	strd	r2, r3, [r1, #16]
  DSP_ContinuousTFSine2_st.num.coef[2] = -1.0;
 8000de4:	4948      	ldr	r1, [pc, #288]	; (8000f08 <main+0x158>)
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <main+0x15c>)
 8000dec:	e9c1 2306 	strd	r2, r3, [r1, #24]

  DSP_ContinuousTFSine2_st.denom.degree = 2;
 8000df0:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <main+0x158>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  DSP_ContinuousTFSine2_st.denom.coef[0] = (double)(16.0)*M_PI*M_PI;//157.9;
 8000df8:	4943      	ldr	r1, [pc, #268]	; (8000f08 <main+0x158>)
 8000dfa:	a33f      	add	r3, pc, #252	; (adr r3, 8000ef8 <main+0x148>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  DSP_ContinuousTFSine2_st.denom.coef[1] = 0.0;
 8000e04:	4940      	ldr	r1, [pc, #256]	; (8000f08 <main+0x158>)
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  DSP_ContinuousTFSine2_st.denom.coef[2] = 1.0;
 8000e12:	493d      	ldr	r1, [pc, #244]	; (8000f08 <main+0x158>)
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <main+0x160>)
 8000e1a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  Return = DSP_C2D(DSP_ContinuousTFSine2_st, &DSP_DiscreteTFSine2_st, DSP_Tustin);
 8000e1e:	4c3a      	ldr	r4, [pc, #232]	; (8000f08 <main+0x158>)
 8000e20:	2300      	movs	r3, #0
 8000e22:	9357      	str	r3, [sp, #348]	; 0x15c
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <main+0x164>)
 8000e26:	9356      	str	r3, [sp, #344]	; 0x158
 8000e28:	4668      	mov	r0, sp
 8000e2a:	f104 0310 	add.w	r3, r4, #16
 8000e2e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000e32:	4619      	mov	r1, r3
 8000e34:	f004 fdc8 	bl	80059c8 <memcpy>
 8000e38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e3c:	f7ff fcf4 	bl	8000828 <DSP_C2D>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <main+0x168>)
 8000e46:	701a      	strb	r2, [r3, #0]
	DSP_vGenerateSignal(&DSP_DiscreteTFSine2_st);
 8000e48:	4832      	ldr	r0, [pc, #200]	; (8000f14 <main+0x164>)
 8000e4a:	f7ff ff4f 	bl	8000cec <DSP_vGenerateSignal>
	DSP_vSetInput(&DSP_DiscreteTFSine2_st, 1.0);
 8000e4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e52:	4830      	ldr	r0, [pc, #192]	; (8000f14 <main+0x164>)
 8000e54:	f7ff ff90 	bl	8000d78 <DSP_vSetInput>


	/*Low pass filte*/
  DSP_LPFilterP_st.num.degree = 0;
 8000e58:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <main+0x16c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
  DSP_LPFilterP_st.num.coef[0] = 1.0;
 8000e5e:	492f      	ldr	r1, [pc, #188]	; (8000f1c <main+0x16c>)
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <main+0x160>)
 8000e66:	e9c1 2302 	strd	r2, r3, [r1, #8]

  DSP_LPFilterP_st.denom.degree = 1;
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <main+0x16c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  DSP_LPFilterP_st.denom.coef[0] = 1.0;
 8000e72:	492a      	ldr	r1, [pc, #168]	; (8000f1c <main+0x16c>)
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <main+0x160>)
 8000e7a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  DSP_LPFilterP_st.denom.coef[1] = 0.032;
 8000e7e:	4927      	ldr	r1, [pc, #156]	; (8000f1c <main+0x16c>)
 8000e80:	a31f      	add	r3, pc, #124	; (adr r3, 8000f00 <main+0x150>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

  Return = DSP_C2D(DSP_LPFilterP_st, &DSP_LPFilterZ_st, DSP_Tustin);
 8000e8a:	4c24      	ldr	r4, [pc, #144]	; (8000f1c <main+0x16c>)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9357      	str	r3, [sp, #348]	; 0x15c
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <main+0x170>)
 8000e92:	9356      	str	r3, [sp, #344]	; 0x158
 8000e94:	4668      	mov	r0, sp
 8000e96:	f104 0310 	add.w	r3, r4, #16
 8000e9a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f004 fd92 	bl	80059c8 <memcpy>
 8000ea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ea8:	f7ff fcbe 	bl	8000828 <DSP_C2D>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <main+0x168>)
 8000eb2:	701a      	strb	r2, [r3, #0]
	DSP_vGenerateSignal(&DSP_LPFilterZ_st);
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <main+0x170>)
 8000eb6:	f7ff ff19 	bl	8000cec <DSP_vGenerateSignal>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eba:	f001 ffe3 	bl	8002e84 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sine2 */
  Sine2Handle = osThreadNew(Sine2Function, NULL, &Sine2_attributes);
 8000ebe:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <main+0x174>)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4819      	ldr	r0, [pc, #100]	; (8000f28 <main+0x178>)
 8000ec4:	f002 f828 	bl	8002f18 <osThreadNew>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <main+0x17c>)
 8000ecc:	6013      	str	r3, [r2, #0]

  /* creation of Sine10 */
  Sine10Handle = osThreadNew(Sine10Function, NULL, &Sine10_attributes);
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <main+0x180>)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <main+0x184>)
 8000ed4:	f002 f820 	bl	8002f18 <osThreadNew>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <main+0x188>)
 8000edc:	6013      	str	r3, [r2, #0]

  /* creation of Sum */
  SumHandle = osThreadNew(SumFunction, NULL, &Sum_attributes);
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <main+0x18c>)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4817      	ldr	r0, [pc, #92]	; (8000f40 <main+0x190>)
 8000ee4:	f002 f818 	bl	8002f18 <osThreadNew>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <main+0x194>)
 8000eec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000eee:	f001 ffed 	bl	8002ecc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <main+0x142>
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	c9be45de 	.word	0xc9be45de
 8000efc:	4063bd3c 	.word	0x4063bd3c
 8000f00:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f04:	3fa0624d 	.word	0x3fa0624d
 8000f08:	240000f0 	.word	0x240000f0
 8000f0c:	bff00000 	.word	0xbff00000
 8000f10:	3ff00000 	.word	0x3ff00000
 8000f14:	24000258 	.word	0x24000258
 8000f18:	2400069c 	.word	0x2400069c
 8000f1c:	240003c0 	.word	0x240003c0
 8000f20:	24000528 	.word	0x24000528
 8000f24:	080067bc 	.word	0x080067bc
 8000f28:	080010b1 	.word	0x080010b1
 8000f2c:	240000e0 	.word	0x240000e0
 8000f30:	080067e0 	.word	0x080067e0
 8000f34:	08001131 	.word	0x08001131
 8000f38:	240000e4 	.word	0x240000e4
 8000f3c:	08006804 	.word	0x08006804
 8000f40:	080011ad 	.word	0x080011ad
 8000f44:	240000e8 	.word	0x240000e8

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09c      	sub	sp, #112	; 0x70
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	224c      	movs	r2, #76	; 0x4c
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fd44 	bl	80059e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2220      	movs	r2, #32
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 fd3e 	bl	80059e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f000 fba9 	bl	80016c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <SystemClock_Config+0xf4>)
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	4a31      	ldr	r2, [pc, #196]	; (800103c <SystemClock_Config+0xf4>)
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <SystemClock_Config+0xf4>)
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <SystemClock_Config+0xf8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f90:	4a2b      	ldr	r2, [pc, #172]	; (8001040 <SystemClock_Config+0xf8>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <SystemClock_Config+0xf8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fa4:	bf00      	nop
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <SystemClock_Config+0xf8>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb2:	d1f8      	bne.n	8000fa6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2340      	movs	r3, #64	; 0x40
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fdc:	230c      	movs	r3, #12
 8000fde:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fbc0 	bl	8001774 <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ffa:	f000 f90d 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	233f      	movs	r3, #63	; 0x3f
 8001000:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2303      	movs	r3, #3
 8001004:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2102      	movs	r1, #2
 8001022:	4618      	mov	r0, r3
 8001024:	f000 ffd4 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800102e:	f000 f8f3 	bl	8001218 <Error_Handler>
  }
}
 8001032:	bf00      	nop
 8001034:	3770      	adds	r7, #112	; 0x70
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	58000400 	.word	0x58000400
 8001040:	58024800 	.word	0x58024800

08001044 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_TIM7_Init+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_TIM7_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 639;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001068:	f240 227f 	movw	r2, #639	; 0x27f
 800106c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001076:	f001 fb63 	bl	8002740 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001080:	f000 f8ca 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001092:	f001 fe07 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800109c:	f000 f8bc 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	24000094 	.word	0x24000094
 80010ac:	40001400 	.word	0x40001400

080010b0 <Sine2Function>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Sine2Function */
void Sine2Function(void *argument)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	float t = 0.0;
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		outputSine21 = sin(2*M_PI*2*t - M_PI/2.0);
 80010be:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001110 <Sine2Function+0x60>
 80010ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ce:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001118 <Sine2Function+0x68>
 80010d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010d6:	eeb0 0b47 	vmov.f64	d0, d7
 80010da:	f004 fd4d 	bl	8005b78 <sin>
 80010de:	eeb0 7b40 	vmov.f64	d7, d0
 80010e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <Sine2Function+0x78>)
 80010e8:	edc3 7a00 	vstr	s15, [r3]
		//outputSine22 = DSP_fRecurringEquationRoutine(&DSP_DiscreteTFSine2_st);
		t = t + 0.001;
 80010ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001120 <Sine2Function+0x70>
 80010f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001100:	edc7 7a03 	vstr	s15, [r7, #12]
		osDelay(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f001 ff99 	bl	800303c <osDelay>
		outputSine21 = sin(2*M_PI*2*t - M_PI/2.0);
 800110a:	e7d8      	b.n	80010be <Sine2Function+0xe>
 800110c:	f3af 8000 	nop.w
 8001110:	54442d18 	.word	0x54442d18
 8001114:	402921fb 	.word	0x402921fb
 8001118:	54442d18 	.word	0x54442d18
 800111c:	3ff921fb 	.word	0x3ff921fb
 8001120:	d2f1a9fc 	.word	0xd2f1a9fc
 8001124:	3f50624d 	.word	0x3f50624d
 8001128:	24000690 	.word	0x24000690
 800112c:	00000000 	.word	0x00000000

08001130 <Sine10Function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Sine10Function */
void Sine10Function(void *argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sine10Function */
	float t = 0.0;
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for(;;)
	{
		outputSine101 = sin(2*M_PI*50*t- M_PI/2.0);
 800113e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001142:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001146:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001190 <Sine10Function+0x60>
 800114a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800114e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001198 <Sine10Function+0x68>
 8001152:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001156:	eeb0 0b47 	vmov.f64	d0, d7
 800115a:	f004 fd0d 	bl	8005b78 <sin>
 800115e:	eeb0 7b40 	vmov.f64	d7, d0
 8001162:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <Sine10Function+0x78>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
		//outputSine102 = DSP_fRecurringEquationRoutine(&DSP_DiscreteTFSine10_st);
		t = t + 0.001;
 800116c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001174:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80011a0 <Sine10Function+0x70>
 8001178:	ee37 7b06 	vadd.f64	d7, d7, d6
 800117c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001180:	edc7 7a03 	vstr	s15, [r7, #12]

		osDelay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f001 ff59 	bl	800303c <osDelay>
		outputSine101 = sin(2*M_PI*50*t- M_PI/2.0);
 800118a:	e7d8      	b.n	800113e <Sine10Function+0xe>
 800118c:	f3af 8000 	nop.w
 8001190:	59d5433b 	.word	0x59d5433b
 8001194:	4073a28c 	.word	0x4073a28c
 8001198:	54442d18 	.word	0x54442d18
 800119c:	3ff921fb 	.word	0x3ff921fb
 80011a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011a4:	3f50624d 	.word	0x3f50624d
 80011a8:	24000694 	.word	0x24000694

080011ac <SumFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SumFunction */
void SumFunction(void *argument)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SumFunction */
	/* Infinite loop */
	for(;;)
	{
		outputSum1 = outputSine21 + outputSine101;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <SumFunction+0x38>)
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <SumFunction+0x3c>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <SumFunction+0x40>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
		//outputSum2 = outputSine22 + outputSine102;
		DSP_vSetInput(&DSP_LPFilterZ_st, outputSum1);
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <SumFunction+0x40>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <SumFunction+0x44>)
 80011d6:	f7ff fdcf 	bl	8000d78 <DSP_vSetInput>

		osDelay(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f001 ff2e 	bl	800303c <osDelay>
		outputSum1 = outputSine21 + outputSine101;
 80011e0:	e7e8      	b.n	80011b4 <SumFunction+0x8>
 80011e2:	bf00      	nop
 80011e4:	24000690 	.word	0x24000690
 80011e8:	24000694 	.word	0x24000694
 80011ec:	24000698 	.word	0x24000698
 80011f0:	24000528 	.word	0x24000528

080011f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001206:	f000 f94f 	bl	80014a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40001000 	.word	0x40001000

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001220:	e7fe      	b.n	8001220 <Error_Handler+0x8>
	...

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x38>)
 800122c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_MspInit+0x38>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_MspInit+0x38>)
 800123c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	210f      	movs	r1, #15
 800124c:	f06f 0001 	mvn.w	r0, #1
 8001250:	f000 fa0e 	bl	8001670 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	58024400 	.word	0x58024400

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_TIM_Base_MspInit+0x48>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d116      	bne.n	80012a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_TIM_Base_MspInit+0x4c>)
 8001274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <HAL_TIM_Base_MspInit+0x4c>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_TIM_Base_MspInit+0x4c>)
 8001284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	2037      	movs	r0, #55	; 0x37
 8001296:	f000 f9eb 	bl	8001670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800129a:	2037      	movs	r0, #55	; 0x37
 800129c:	f000 fa02 	bl	80016a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40001400 	.word	0x40001400
 80012ac:	58024400 	.word	0x58024400

080012b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b090      	sub	sp, #64	; 0x40
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	d827      	bhi.n	800130e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80012be:	2200      	movs	r2, #0
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	2036      	movs	r0, #54	; 0x36
 80012c4:	f000 f9d4 	bl	8001670 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012c8:	2036      	movs	r0, #54	; 0x36
 80012ca:	f000 f9eb 	bl	80016a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80012ce:	4a29      	ldr	r2, [pc, #164]	; (8001374 <HAL_InitTick+0xc4>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <HAL_InitTick+0xc8>)
 80012d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012da:	4a27      	ldr	r2, [pc, #156]	; (8001378 <HAL_InitTick+0xc8>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_InitTick+0xc8>)
 80012e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012f2:	f107 0210 	add.w	r2, r7, #16
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 f9dd 	bl	80026bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001308:	2b00      	cmp	r3, #0
 800130a:	d106      	bne.n	800131a <HAL_InitTick+0x6a>
 800130c:	e001      	b.n	8001312 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e02b      	b.n	800136a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001312:	f001 f9bd 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8001316:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001318:	e004      	b.n	8001324 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800131a:	f001 f9b9 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 800131e:	4603      	mov	r3, r0
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001326:	4a15      	ldr	r2, [pc, #84]	; (800137c <HAL_InitTick+0xcc>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	0c9b      	lsrs	r3, r3, #18
 800132e:	3b01      	subs	r3, #1
 8001330:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_InitTick+0xd0>)
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_InitTick+0xd4>)
 8001336:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_InitTick+0xd0>)
 800133a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800133e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001340:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_InitTick+0xd0>)
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_InitTick+0xd0>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_InitTick+0xd0>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001352:	480b      	ldr	r0, [pc, #44]	; (8001380 <HAL_InitTick+0xd0>)
 8001354:	f001 f9f4 	bl	8002740 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <HAL_InitTick+0xd0>)
 8001360:	f001 fa46 	bl	80027f0 <HAL_TIM_Base_Start_IT>
 8001364:	4603      	mov	r3, r0
 8001366:	e000      	b.n	800136a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	3740      	adds	r7, #64	; 0x40
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24000008 	.word	0x24000008
 8001378:	58024400 	.word	0x58024400
 800137c:	431bde83 	.word	0x431bde83
 8001380:	240006a0 	.word	0x240006a0
 8001384:	40001000 	.word	0x40001000

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800138c:	e7fe      	b.n	800138c <NMI_Handler+0x4>

0800138e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <MemManage_Handler+0x4>

0800139a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM6_DAC_IRQHandler+0x10>)
 80013ba:	f001 fa91 	bl	80028e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	240006a0 	.word	0x240006a0

080013c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM7_IRQHandler+0x10>)
 80013ce:	f001 fa87 	bl	80028e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	24000094 	.word	0x24000094

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e0:	f7fe ff7e 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	; (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140a:	f004 fab7 	bl	800597c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff fccf 	bl	8000db0 <main>
  bx  lr
 8001412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001418:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800141c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001420:	08006a68 	.word	0x08006a68
  ldr r2, =_sbss
 8001424:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001428:	24005108 	.word	0x24005108

0800142c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC3_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001436:	2003      	movs	r0, #3
 8001438:	f000 f90f 	bl	800165a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800143c:	f000 ff7e 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_Init+0x68>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	4913      	ldr	r1, [pc, #76]	; (800149c <HAL_Init+0x6c>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_Init+0x68>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_Init+0x6c>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_Init+0x70>)
 8001472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_Init+0x74>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147a:	200f      	movs	r0, #15
 800147c:	f7ff ff18 	bl	80012b0 <HAL_InitTick>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e002      	b.n	8001490 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800148a:	f7ff fecb 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	58024400 	.word	0x58024400
 800149c:	080067ac 	.word	0x080067ac
 80014a0:	24000004 	.word	0x24000004
 80014a4:	24000000 	.word	0x24000000

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2400000c 	.word	0x2400000c
 80014cc:	240006ec 	.word	0x240006ec

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	240006ec 	.word	0x240006ec

080014e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetREVID+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0c1b      	lsrs	r3, r3, #16
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	5c001000 	.word	0x5c001000

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	05fa0000 	.word	0x05fa0000

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff4c 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800167e:	f7ff ff63 	bl	8001548 <__NVIC_GetPriorityGrouping>
 8001682:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	6978      	ldr	r0, [r7, #20]
 800168a:	f7ff ffb3 	bl	80015f4 <NVIC_EncodePriority>
 800168e:	4602      	mov	r2, r0
 8001690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff82 	bl	80015a0 <__NVIC_SetPriority>
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff56 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d00a      	beq.n	80016ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e040      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e03e      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80016f2:	491f      	ldr	r1, [pc, #124]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016fa:	f7ff fee9 	bl	80014d0 <HAL_GetTick>
 80016fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001700:	e009      	b.n	8001716 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001702:	f7ff fee5 	bl	80014d0 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001710:	d901      	bls.n	8001716 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e028      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001722:	d1ee      	bne.n	8001702 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b1e      	cmp	r3, #30
 8001728:	d008      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b2e      	cmp	r3, #46	; 0x2e
 800172e:	d005      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b1d      	cmp	r3, #29
 8001734:	d002      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b2d      	cmp	r3, #45	; 0x2d
 800173a:	d114      	bne.n	8001766 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800173c:	f7ff fec8 	bl	80014d0 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001742:	e009      	b.n	8001758 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001744:	f7ff fec4 	bl	80014d0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001752:	d901      	bls.n	8001758 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e007      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001764:	d1ee      	bne.n	8001744 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	58024800 	.word	0x58024800

08001774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f000 bc1d 	b.w	8001fc2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8087 	beq.w	80018a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001796:	4b99      	ldr	r3, [pc, #612]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017a0:	4b96      	ldr	r3, [pc, #600]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d007      	beq.n	80017bc <HAL_RCC_OscConfig+0x48>
 80017ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ae:	2b18      	cmp	r3, #24
 80017b0:	d110      	bne.n	80017d4 <HAL_RCC_OscConfig+0x60>
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d10b      	bne.n	80017d4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	4b8f      	ldr	r3, [pc, #572]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d06c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x12e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d168      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e3f6      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017dc:	d106      	bne.n	80017ec <HAL_RCC_OscConfig+0x78>
 80017de:	4b87      	ldr	r3, [pc, #540]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a86      	ldr	r2, [pc, #536]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e02e      	b.n	800184a <HAL_RCC_OscConfig+0xd6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10c      	bne.n	800180e <HAL_RCC_OscConfig+0x9a>
 80017f4:	4b81      	ldr	r3, [pc, #516]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a80      	ldr	r2, [pc, #512]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b7e      	ldr	r3, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a7d      	ldr	r2, [pc, #500]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e01d      	b.n	800184a <HAL_RCC_OscConfig+0xd6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001816:	d10c      	bne.n	8001832 <HAL_RCC_OscConfig+0xbe>
 8001818:	4b78      	ldr	r3, [pc, #480]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a77      	ldr	r2, [pc, #476]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800181e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e00b      	b.n	800184a <HAL_RCC_OscConfig+0xd6>
 8001832:	4b72      	ldr	r3, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a71      	ldr	r2, [pc, #452]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d013      	beq.n	800187a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff fe3d 	bl	80014d0 <HAL_GetTick>
 8001856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185a:	f7ff fe39 	bl	80014d0 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e3aa      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186c:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0xe6>
 8001878:	e014      	b.n	80018a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fe29 	bl	80014d0 <HAL_GetTick>
 800187e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001882:	f7ff fe25 	bl	80014d0 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b64      	cmp	r3, #100	; 0x64
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e396      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x10e>
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80cb 	beq.w	8001a48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b2:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_RCC_OscConfig+0x164>
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	2b18      	cmp	r3, #24
 80018cc:	d156      	bne.n	800197c <HAL_RCC_OscConfig+0x208>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d151      	bne.n	800197c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d8:	4b48      	ldr	r3, [pc, #288]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x17c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e368      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 0219 	bic.w	r2, r3, #25
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	493f      	ldr	r1, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001902:	f7ff fde5 	bl	80014d0 <HAL_GetTick>
 8001906:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fde1 	bl	80014d0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e352      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	f7ff fdde 	bl	80014e8 <HAL_GetREVID>
 800192c:	4603      	mov	r3, r0
 800192e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001932:	4293      	cmp	r3, r2
 8001934:	d817      	bhi.n	8001966 <HAL_RCC_OscConfig+0x1f2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b40      	cmp	r3, #64	; 0x40
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x1dc>
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001946:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194e:	e07b      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	031b      	lsls	r3, r3, #12
 800195e:	4927      	ldr	r1, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	e070      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197a:	e065      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d048      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 0219 	bic.w	r2, r3, #25
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	491a      	ldr	r1, [pc, #104]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff fd9b 	bl	80014d0 <HAL_GetTick>
 800199a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fd97 	bl	80014d0 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e308      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	f7ff fd94 	bl	80014e8 <HAL_GetREVID>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d81a      	bhi.n	8001a00 <HAL_RCC_OscConfig+0x28c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b40      	cmp	r3, #64	; 0x40
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0x270>
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	6053      	str	r3, [r2, #4]
 80019e2:	e031      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	031b      	lsls	r3, r3, #12
 80019f2:	4902      	ldr	r1, [pc, #8]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
 80019f8:	e026      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
 80019fa:	bf00      	nop
 80019fc:	58024400 	.word	0x58024400
 8001a00:	4b9a      	ldr	r3, [pc, #616]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	4997      	ldr	r1, [pc, #604]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e018      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b95      	ldr	r3, [pc, #596]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a94      	ldr	r2, [pc, #592]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fd55 	bl	80014d0 <HAL_GetTick>
 8001a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fd51 	bl	80014d0 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e2c2      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3c:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a9 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a56:	4b85      	ldr	r3, [pc, #532]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a60:	4b82      	ldr	r3, [pc, #520]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d007      	beq.n	8001a7c <HAL_RCC_OscConfig+0x308>
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b18      	cmp	r3, #24
 8001a70:	d13a      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x374>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d135      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a7c:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x320>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b80      	cmp	r3, #128	; 0x80
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e296      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a94:	f7ff fd28 	bl	80014e8 <HAL_GetREVID>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d817      	bhi.n	8001ad2 <HAL_RCC_OscConfig+0x35e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_OscConfig+0x348>
 8001aaa:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ab8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aba:	e075      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	069b      	lsls	r3, r3, #26
 8001aca:	4968      	ldr	r1, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ad0:	e06a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ad2:	4b66      	ldr	r3, [pc, #408]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	4962      	ldr	r1, [pc, #392]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae6:	e05f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d042      	beq.n	8001b76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001af0:	4b5e      	ldr	r3, [pc, #376]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5d      	ldr	r2, [pc, #372]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fce8 	bl	80014d0 <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b04:	f7ff fce4 	bl	80014d0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e255      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b16:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b22:	f7ff fce1 	bl	80014e8 <HAL_GetREVID>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d817      	bhi.n	8001b60 <HAL_RCC_OscConfig+0x3ec>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d108      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3d6>
 8001b38:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b46:	6053      	str	r3, [r2, #4]
 8001b48:	e02e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
 8001b4a:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	069b      	lsls	r3, r3, #26
 8001b58:	4944      	ldr	r1, [pc, #272]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	e023      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
 8001b60:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	493f      	ldr	r1, [pc, #252]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
 8001b74:	e018      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a3c      	ldr	r2, [pc, #240]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fca5 	bl	80014d0 <HAL_GetTick>
 8001b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fca1 	bl	80014d0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e212      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b9c:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d036      	beq.n	8001c22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d019      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fc82 	bl	80014d0 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fc7e 	bl	80014d0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1ef      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x45c>
 8001bee:	e018      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fc68 	bl	80014d0 <HAL_GetTick>
 8001c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc64 	bl	80014d0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1d5      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d039      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fc45 	bl	80014d0 <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c4a:	f7ff fc41 	bl	80014d0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1b2      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4d6>
 8001c68:	e01b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x52e>
 8001c6a:	bf00      	nop
 8001c6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c70:	4b9b      	ldr	r3, [pc, #620]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a9a      	ldr	r2, [pc, #616]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fc28 	bl	80014d0 <HAL_GetTick>
 8001c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c84:	f7ff fc24 	bl	80014d0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e195      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c96:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8081 	beq.w	8001db2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cb0:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a8b      	ldr	r2, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff fc08 	bl	80014d0 <HAL_GetTick>
 8001cc0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7ff fc04 	bl	80014d0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e175      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd6:	4b83      	ldr	r3, [pc, #524]	; (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x584>
 8001cea:	4b7d      	ldr	r3, [pc, #500]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a7c      	ldr	r2, [pc, #496]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	e02d      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5a6>
 8001d00:	4b77      	ldr	r3, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	4a76      	ldr	r2, [pc, #472]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0c:	4b74      	ldr	r3, [pc, #464]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a73      	ldr	r2, [pc, #460]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c8>
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a6b      	ldr	r2, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a67      	ldr	r2, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a64      	ldr	r2, [pc, #400]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d015      	beq.n	8001d88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fbb8 	bl	80014d0 <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff fbb4 	bl	80014d0 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e123      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d7a:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0ee      	beq.n	8001d64 <HAL_RCC_OscConfig+0x5f0>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff fba2 	bl	80014d0 <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff fb9e 	bl	80014d0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e10d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da6:	4b4e      	ldr	r3, [pc, #312]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ee      	bne.n	8001d90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8102 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dbc:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dc4:	2b18      	cmp	r3, #24
 8001dc6:	f000 80bd 	beq.w	8001f44 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	f040 809e 	bne.w	8001f10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a41      	ldr	r2, [pc, #260]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fb76 	bl	80014d0 <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff fb72 	bl	80014d0 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0e3      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCC_OscConfig+0x774>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	4931      	ldr	r1, [pc, #196]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	628b      	str	r3, [r1, #40]	; 0x28
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	3b01      	subs	r3, #1
 8001e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	061b      	lsls	r3, r3, #24
 8001e4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e50:	4923      	ldr	r1, [pc, #140]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_RCC_OscConfig+0x778>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e6e:	00d2      	lsls	r2, r2, #3
 8001e70:	491b      	ldr	r1, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f023 020c 	bic.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4917      	ldr	r1, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	f023 0202 	bic.w	r2, r3, #2
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	4912      	ldr	r1, [pc, #72]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fafb 	bl	80014d0 <HAL_GetTick>
 8001eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001edc:	e011      	b.n	8001f02 <HAL_RCC_OscConfig+0x78e>
 8001ede:	bf00      	nop
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58024800 	.word	0x58024800
 8001ee8:	fffffc0c 	.word	0xfffffc0c
 8001eec:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff faee 	bl	80014d0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e05f      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x77c>
 8001f0e:	e057      	b.n	8001fc0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fad8 	bl	80014d0 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff fad4 	bl	80014d0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e045      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x7b0>
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCC_OscConfig+0x858>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d031      	beq.n	8001fbc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d12a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d122      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0a5b      	lsrs	r3, r3, #9
 8001f8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	0e1b      	lsrs	r3, r3, #24
 8001fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3730      	adds	r7, #48	; 0x30
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	58024400 	.word	0x58024400

08001fd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e19c      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d910      	bls.n	8002014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b87      	ldr	r3, [pc, #540]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 020f 	bic.w	r2, r3, #15
 8001ffa:	4985      	ldr	r1, [pc, #532]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b83      	ldr	r3, [pc, #524]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e184      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	4b7b      	ldr	r3, [pc, #492]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800202c:	429a      	cmp	r2, r3
 800202e:	d908      	bls.n	8002042 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002030:	4b78      	ldr	r3, [pc, #480]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	4975      	ldr	r1, [pc, #468]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800203e:	4313      	orrs	r3, r2
 8002040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800205a:	429a      	cmp	r2, r3
 800205c:	d908      	bls.n	8002070 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800205e:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	496a      	ldr	r1, [pc, #424]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800206c:	4313      	orrs	r3, r2
 800206e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	4b64      	ldr	r3, [pc, #400]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002088:	429a      	cmp	r2, r3
 800208a:	d908      	bls.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800208c:	4b61      	ldr	r3, [pc, #388]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	495e      	ldr	r1, [pc, #376]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800209a:	4313      	orrs	r3, r2
 800209c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	4b59      	ldr	r3, [pc, #356]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020ba:	4b56      	ldr	r3, [pc, #344]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4953      	ldr	r1, [pc, #332]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d908      	bls.n	80020fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f023 020f 	bic.w	r2, r3, #15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4947      	ldr	r1, [pc, #284]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d055      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002106:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4940      	ldr	r1, [pc, #256]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002114:	4313      	orrs	r3, r2
 8002116:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002120:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d121      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0f6      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d115      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0ea      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0de      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0d6      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f023 0207 	bic.w	r2, r3, #7
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4925      	ldr	r1, [pc, #148]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800217e:	4313      	orrs	r3, r2
 8002180:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff f9a5 	bl	80014d0 <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7ff f9a1 	bl	80014d0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0be      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d1eb      	bne.n	800218a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d208      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	490e      	ldr	r1, [pc, #56]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d214      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 020f 	bic.w	r2, r3, #15
 80021f6:	4906      	ldr	r1, [pc, #24]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e086      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
 8002210:	52002000 	.word	0x52002000
 8002214:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002230:	429a      	cmp	r2, r3
 8002232:	d208      	bcs.n	8002246 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002234:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4939      	ldr	r1, [pc, #228]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002242:	4313      	orrs	r3, r2
 8002244:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800225e:	429a      	cmp	r2, r3
 8002260:	d208      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	492e      	ldr	r1, [pc, #184]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002270:	4313      	orrs	r3, r2
 8002272:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800228c:	429a      	cmp	r2, r3
 800228e:	d208      	bcs.n	80022a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d010      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d208      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4917      	ldr	r1, [pc, #92]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022d0:	f000 f834 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	4912      	ldr	r1, [pc, #72]	; (800232c <HAL_RCC_ClockConfig+0x35c>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_RCC_ClockConfig+0x35c>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x360>)
 8002306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x364>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x368>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe ffcc 	bl	80012b0 <HAL_InitTick>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	58024400 	.word	0x58024400
 800232c:	080067ac 	.word	0x080067ac
 8002330:	24000004 	.word	0x24000004
 8002334:	24000000 	.word	0x24000000
 8002338:	24000008 	.word	0x24000008

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002342:	4bb3      	ldr	r3, [pc, #716]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800234a:	2b18      	cmp	r3, #24
 800234c:	f200 8155 	bhi.w	80025fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	080023bd 	.word	0x080023bd
 800235c:	080025fb 	.word	0x080025fb
 8002360:	080025fb 	.word	0x080025fb
 8002364:	080025fb 	.word	0x080025fb
 8002368:	080025fb 	.word	0x080025fb
 800236c:	080025fb 	.word	0x080025fb
 8002370:	080025fb 	.word	0x080025fb
 8002374:	080025fb 	.word	0x080025fb
 8002378:	080023e3 	.word	0x080023e3
 800237c:	080025fb 	.word	0x080025fb
 8002380:	080025fb 	.word	0x080025fb
 8002384:	080025fb 	.word	0x080025fb
 8002388:	080025fb 	.word	0x080025fb
 800238c:	080025fb 	.word	0x080025fb
 8002390:	080025fb 	.word	0x080025fb
 8002394:	080025fb 	.word	0x080025fb
 8002398:	080023e9 	.word	0x080023e9
 800239c:	080025fb 	.word	0x080025fb
 80023a0:	080025fb 	.word	0x080025fb
 80023a4:	080025fb 	.word	0x080025fb
 80023a8:	080025fb 	.word	0x080025fb
 80023ac:	080025fb 	.word	0x080025fb
 80023b0:	080025fb 	.word	0x080025fb
 80023b4:	080025fb 	.word	0x080025fb
 80023b8:	080023ef 	.word	0x080023ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023bc:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023c8:	4b91      	ldr	r3, [pc, #580]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	4a90      	ldr	r2, [pc, #576]	; (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023da:	e111      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023dc:	4b8d      	ldr	r3, [pc, #564]	; (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023de:	61bb      	str	r3, [r7, #24]
    break;
 80023e0:	e10e      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023e2:	4b8d      	ldr	r3, [pc, #564]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023e4:	61bb      	str	r3, [r7, #24]
    break;
 80023e6:	e10b      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023e8:	4b8c      	ldr	r3, [pc, #560]	; (800261c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023ea:	61bb      	str	r3, [r7, #24]
    break;
 80023ec:	e108      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023f8:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002402:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002404:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800240e:	4b80      	ldr	r3, [pc, #512]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80e1 	beq.w	80025f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b02      	cmp	r3, #2
 8002436:	f000 8083 	beq.w	8002540 <HAL_RCC_GetSysClockFreq+0x204>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b02      	cmp	r3, #2
 800243e:	f200 80a1 	bhi.w	8002584 <HAL_RCC_GetSysClockFreq+0x248>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x114>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d056      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800244e:	e099      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002450:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02d      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800245c:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	4a6b      	ldr	r2, [pc, #428]	; (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b62      	ldr	r3, [pc, #392]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a02 	vldr	s12, [r7, #8]
 800249a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024b6:	e087      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002624 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024da:	ed97 6a02 	vldr	s12, [r7, #8]
 80024de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024fa:	e065      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2ec>
 800250a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250e:	4b40      	ldr	r3, [pc, #256]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002522:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800252a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800253e:	e043      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800262c <HAL_RCC_GetSysClockFreq+0x2f0>
 800254e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002562:	ed97 6a02 	vldr	s12, [r7, #8]
 8002566:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800256a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800256e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800257a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002582:	e021      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	0a5b      	lsrs	r3, r3, #9
 80025ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d2:	3301      	adds	r3, #1
 80025d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
 80025f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025f2:	e005      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
    break;
 80025f8:	e002      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025fc:	61bb      	str	r3, [r7, #24]
    break;
 80025fe:	bf00      	nop
  }

  return sysclockfreq;
 8002600:	69bb      	ldr	r3, [r7, #24]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	58024400 	.word	0x58024400
 8002614:	03d09000 	.word	0x03d09000
 8002618:	003d0900 	.word	0x003d0900
 800261c:	017d7840 	.word	0x017d7840
 8002620:	46000000 	.word	0x46000000
 8002624:	4c742400 	.word	0x4c742400
 8002628:	4a742400 	.word	0x4a742400
 800262c:	4bbebc20 	.word	0x4bbebc20

08002630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002636:	f7ff fe81 	bl	800233c <HAL_RCC_GetSysClockFreq>
 800263a:	4602      	mov	r2, r0
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_GetHCLKFreq+0x50>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	490f      	ldr	r1, [pc, #60]	; (8002684 <HAL_RCC_GetHCLKFreq+0x54>)
 8002648:	5ccb      	ldrb	r3, [r1, r3]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_GetHCLKFreq+0x50>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_RCC_GetHCLKFreq+0x54>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_RCC_GetHCLKFreq+0x58>)
 800266c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCC_GetHCLKFreq+0x58>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	58024400 	.word	0x58024400
 8002684:	080067ac 	.word	0x080067ac
 8002688:	24000004 	.word	0x24000004
 800268c:	24000000 	.word	0x24000000

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002694:	f7ff ffcc 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4904      	ldr	r1, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	080067ac 	.word	0x080067ac

080026bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	223f      	movs	r2, #63	; 0x3f
 80026ca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCC_GetClockConfig+0x7c>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0207 	and.w	r2, r3, #7
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_RCC_GetClockConfig+0x7c>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_RCC_GetClockConfig+0x7c>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 020f 	and.w	r2, r3, #15
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_RCC_GetClockConfig+0x7c>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <HAL_RCC_GetClockConfig+0x7c>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_GetClockConfig+0x7c>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_RCC_GetClockConfig+0x7c>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_GetClockConfig+0x80>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	58024400 	.word	0x58024400
 800273c:	52002000 	.word	0x52002000

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e049      	b.n	80027e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fd7a 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 f9f6 	bl	8002b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d001      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e054      	b.n	80028b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a26      	ldr	r2, [pc, #152]	; (80028c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d022      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x80>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002832:	d01d      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x80>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d018      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x80>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d013      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x80>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <HAL_TIM_Base_Start_IT+0xdc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x80>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x80>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x80>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d115      	bne.n	800289c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_TIM_Base_Start_IT+0xec>)
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d015      	beq.n	80028ae <HAL_TIM_Base_Start_IT+0xbe>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002888:	d011      	beq.n	80028ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289a:	e008      	b.n	80028ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e000      	b.n	80028b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40010400 	.word	0x40010400
 80028d4:	40001800 	.word	0x40001800
 80028d8:	40014000 	.word	0x40014000
 80028dc:	00010007 	.word	0x00010007

080028e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0202 	mvn.w	r2, #2
 800290c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f905 	bl	8002b32 <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8f7 	bl	8002b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f908 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0204 	mvn.w	r2, #4
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8db 	bl	8002b32 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8cd 	bl	8002b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8de 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0208 	mvn.w	r2, #8
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2204      	movs	r2, #4
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8b1 	bl	8002b32 <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8a3 	bl	8002b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f8b4 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0210 	mvn.w	r2, #16
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f887 	bl	8002b32 <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f879 	bl	8002b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f88a 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0201 	mvn.w	r2, #1
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fbc8 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6e:	2b80      	cmp	r3, #128	; 0x80
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d107      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f9a2 	bl	8002dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d10e      	bne.n	8002abe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b80      	cmp	r3, #128	; 0x80
 8002aac:	d107      	bne.n	8002abe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f995 	bl	8002de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d10e      	bne.n	8002aea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f838 	bl	8002b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d10e      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d107      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f06f 0220 	mvn.w	r2, #32
 8002b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f955 	bl	8002dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a40      	ldr	r2, [pc, #256]	; (8002c84 <TIM_Base_SetConfig+0x114>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8e:	d00f      	beq.n	8002bb0 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3d      	ldr	r2, [pc, #244]	; (8002c88 <TIM_Base_SetConfig+0x118>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00b      	beq.n	8002bb0 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3c      	ldr	r2, [pc, #240]	; (8002c8c <TIM_Base_SetConfig+0x11c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3b      	ldr	r2, [pc, #236]	; (8002c90 <TIM_Base_SetConfig+0x120>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3a      	ldr	r2, [pc, #232]	; (8002c94 <TIM_Base_SetConfig+0x124>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <TIM_Base_SetConfig+0x114>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <TIM_Base_SetConfig+0x9a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d01b      	beq.n	8002c0a <TIM_Base_SetConfig+0x9a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	; (8002c88 <TIM_Base_SetConfig+0x118>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d017      	beq.n	8002c0a <TIM_Base_SetConfig+0x9a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2b      	ldr	r2, [pc, #172]	; (8002c8c <TIM_Base_SetConfig+0x11c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <TIM_Base_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2a      	ldr	r2, [pc, #168]	; (8002c90 <TIM_Base_SetConfig+0x120>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00f      	beq.n	8002c0a <TIM_Base_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a29      	ldr	r2, [pc, #164]	; (8002c94 <TIM_Base_SetConfig+0x124>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <TIM_Base_SetConfig+0x9a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a28      	ldr	r2, [pc, #160]	; (8002c98 <TIM_Base_SetConfig+0x128>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_Base_SetConfig+0x9a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <TIM_Base_SetConfig+0x12c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_Base_SetConfig+0x9a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <TIM_Base_SetConfig+0x130>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <TIM_Base_SetConfig+0x114>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00f      	beq.n	8002c68 <TIM_Base_SetConfig+0xf8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <TIM_Base_SetConfig+0x124>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <TIM_Base_SetConfig+0xf8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <TIM_Base_SetConfig+0x128>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <TIM_Base_SetConfig+0xf8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <TIM_Base_SetConfig+0x12c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <TIM_Base_SetConfig+0xf8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <TIM_Base_SetConfig+0x130>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d103      	bne.n	8002c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	615a      	str	r2, [r3, #20]
}
 8002c76:	bf00      	nop
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40000800 	.word	0x40000800
 8002c90:	40000c00 	.word	0x40000c00
 8002c94:	40010400 	.word	0x40010400
 8002c98:	40014000 	.word	0x40014000
 8002c9c:	40014400 	.word	0x40014400
 8002ca0:	40014800 	.word	0x40014800

08002ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e06d      	b.n	8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a30      	ldr	r2, [pc, #192]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d022      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d01d      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d018      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d10c      	bne.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40010400 	.word	0x40010400
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40001800 	.word	0x40001800
 8002dbc:	40014000 	.word	0x40014000

08002dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <__NVIC_SetPriority>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	; (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <SysTick_Handler+0x1c>)
 8002e56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e58:	f002 f962 	bl	8005120 <xTaskGetSchedulerState>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e62:	f000 fd99 	bl	8003998 <xPortSysTickHandler>
  }
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000e010 	.word	0xe000e010

08002e70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e74:	2100      	movs	r1, #0
 8002e76:	f06f 0004 	mvn.w	r0, #4
 8002e7a:	f7ff ffbf 	bl	8002dfc <__NVIC_SetPriority>
#endif
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e8a:	f3ef 8305 	mrs	r3, IPSR
 8002e8e:	603b      	str	r3, [r7, #0]
  return(result);
 8002e90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e96:	f06f 0305 	mvn.w	r3, #5
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	e00c      	b.n	8002eb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <osKernelInitialize+0x44>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <osKernelInitialize+0x44>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	e002      	b.n	8002eb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002eb8:	687b      	ldr	r3, [r7, #4]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	240006f0 	.word	0x240006f0

08002ecc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ed2:	f3ef 8305 	mrs	r3, IPSR
 8002ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ede:	f06f 0305 	mvn.w	r3, #5
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e010      	b.n	8002f08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <osKernelStart+0x48>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d109      	bne.n	8002f02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002eee:	f7ff ffbf 	bl	8002e70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <osKernelStart+0x48>)
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002ef8:	f001 fcb6 	bl	8004868 <vTaskStartScheduler>
      stat = osOK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	e002      	b.n	8002f08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f08:	687b      	ldr	r3, [r7, #4]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	240006f0 	.word	0x240006f0

08002f18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08e      	sub	sp, #56	; 0x38
 8002f1c:	af04      	add	r7, sp, #16
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f28:	f3ef 8305 	mrs	r3, IPSR
 8002f2c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d17e      	bne.n	8003032 <osThreadNew+0x11a>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d07b      	beq.n	8003032 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f3e:	2318      	movs	r3, #24
 8002f40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d045      	beq.n	8002fde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <osThreadNew+0x48>
        name = attr->name;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <osThreadNew+0x6e>
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b38      	cmp	r3, #56	; 0x38
 8002f78:	d805      	bhi.n	8002f86 <osThreadNew+0x6e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <osThreadNew+0x72>
        return (NULL);
 8002f86:	2300      	movs	r3, #0
 8002f88:	e054      	b.n	8003034 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00e      	beq.n	8002fc0 <osThreadNew+0xa8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2bbb      	cmp	r3, #187	; 0xbb
 8002fa8:	d90a      	bls.n	8002fc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <osThreadNew+0xa8>
        mem = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	e010      	b.n	8002fe2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10c      	bne.n	8002fe2 <osThreadNew+0xca>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <osThreadNew+0xca>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d104      	bne.n	8002fe2 <osThreadNew+0xca>
          mem = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	e001      	b.n	8002fe2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d110      	bne.n	800300a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ff0:	9202      	str	r2, [sp, #8]
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6a3a      	ldr	r2, [r7, #32]
 8002ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f001 fa46 	bl	8004490 <xTaskCreateStatic>
 8003004:	4603      	mov	r3, r0
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	e013      	b.n	8003032 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d110      	bne.n	8003032 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	b29a      	uxth	r2, r3
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f001 fa91 	bl	800454a <xTaskCreate>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <osThreadNew+0x11a>
            hTask = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003032:	693b      	ldr	r3, [r7, #16]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003044:	f3ef 8305 	mrs	r3, IPSR
 8003048:	60bb      	str	r3, [r7, #8]
  return(result);
 800304a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <osDelay+0x1c>
    stat = osErrorISR;
 8003050:	f06f 0305 	mvn.w	r3, #5
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e007      	b.n	8003068 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 fbcc 	bl	8004800 <vTaskDelay>
    }
  }

  return (stat);
 8003068:	68fb      	ldr	r3, [r7, #12]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003084:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <vApplicationGetIdleTaskMemory+0x30>)
 800308a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	601a      	str	r2, [r3, #0]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	240006f4 	.word	0x240006f4
 80030a4:	240007b0 	.word	0x240007b0

080030a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80030b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <vApplicationGetTimerTaskMemory+0x30>)
 80030be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c6:	601a      	str	r2, [r3, #0]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	240009b0 	.word	0x240009b0
 80030d8:	24000a6c 	.word	0x24000a6c

080030dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80030e8:	f001 fc2e 	bl	8004948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80030ec:	4b5b      	ldr	r3, [pc, #364]	; (800325c <pvPortMalloc+0x180>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80030f4:	f000 f920 	bl	8003338 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <pvPortMalloc+0x184>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 8093 	bne.w	800322c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01d      	beq.n	8003148 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800310c:	2208      	movs	r2, #8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	2b00      	cmp	r3, #0
 800311c:	d014      	beq.n	8003148 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f023 0307 	bic.w	r3, r3, #7
 8003124:	3308      	adds	r3, #8
 8003126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d06e      	beq.n	800322c <pvPortMalloc+0x150>
 800314e:	4b45      	ldr	r3, [pc, #276]	; (8003264 <pvPortMalloc+0x188>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d869      	bhi.n	800322c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003158:	4b43      	ldr	r3, [pc, #268]	; (8003268 <pvPortMalloc+0x18c>)
 800315a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800315c:	4b42      	ldr	r3, [pc, #264]	; (8003268 <pvPortMalloc+0x18c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003162:	e004      	b.n	800316e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d903      	bls.n	8003180 <pvPortMalloc+0xa4>
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f1      	bne.n	8003164 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003180:	4b36      	ldr	r3, [pc, #216]	; (800325c <pvPortMalloc+0x180>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	429a      	cmp	r2, r3
 8003188:	d050      	beq.n	800322c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2208      	movs	r2, #8
 8003190:	4413      	add	r3, r2
 8003192:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	2308      	movs	r3, #8
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d91f      	bls.n	80031ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <pvPortMalloc+0xf8>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	613b      	str	r3, [r7, #16]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031e6:	69b8      	ldr	r0, [r7, #24]
 80031e8:	f000 f908 	bl	80033fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <pvPortMalloc+0x188>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <pvPortMalloc+0x188>)
 80031f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031fa:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <pvPortMalloc+0x188>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <pvPortMalloc+0x190>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d203      	bcs.n	800320e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <pvPortMalloc+0x188>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <pvPortMalloc+0x190>)
 800320c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	4b13      	ldr	r3, [pc, #76]	; (8003260 <pvPortMalloc+0x184>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	431a      	orrs	r2, r3
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <pvPortMalloc+0x194>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	4a11      	ldr	r2, [pc, #68]	; (8003270 <pvPortMalloc+0x194>)
 800322a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800322c:	f001 fb9a 	bl	8004964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <pvPortMalloc+0x174>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	60fb      	str	r3, [r7, #12]
}
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <pvPortMalloc+0x172>
	return pvReturn;
 8003250:	69fb      	ldr	r3, [r7, #28]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3728      	adds	r7, #40	; 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	24004a74 	.word	0x24004a74
 8003260:	24004a88 	.word	0x24004a88
 8003264:	24004a78 	.word	0x24004a78
 8003268:	24004a6c 	.word	0x24004a6c
 800326c:	24004a7c 	.word	0x24004a7c
 8003270:	24004a80 	.word	0x24004a80

08003274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04d      	beq.n	8003322 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003286:	2308      	movs	r3, #8
 8003288:	425b      	negs	r3, r3
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4413      	add	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <vPortFree+0xb8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <vPortFree+0x44>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	60fb      	str	r3, [r7, #12]
}
 80032b4:	bf00      	nop
 80032b6:	e7fe      	b.n	80032b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <vPortFree+0x62>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	60bb      	str	r3, [r7, #8]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <vPortFree+0xb8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01e      	beq.n	8003322 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d11a      	bne.n	8003322 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <vPortFree+0xb8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032fc:	f001 fb24 	bl	8004948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <vPortFree+0xbc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4413      	add	r3, r2
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <vPortFree+0xbc>)
 800330c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800330e:	6938      	ldr	r0, [r7, #16]
 8003310:	f000 f874 	bl	80033fc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <vPortFree+0xc0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a06      	ldr	r2, [pc, #24]	; (8003334 <vPortFree+0xc0>)
 800331c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800331e:	f001 fb21 	bl	8004964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	24004a88 	.word	0x24004a88
 8003330:	24004a78 	.word	0x24004a78
 8003334:	24004a84 	.word	0x24004a84

08003338 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800333e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003342:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <prvHeapInit+0xac>)
 8003346:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00c      	beq.n	800336c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3307      	adds	r3, #7
 8003356:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <prvHeapInit+0xac>)
 8003368:	4413      	add	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <prvHeapInit+0xb0>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <prvHeapInit+0xb0>)
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4413      	add	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003384:	2208      	movs	r2, #8
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a15      	ldr	r2, [pc, #84]	; (80033ec <prvHeapInit+0xb4>)
 8003398:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <prvHeapInit+0xb4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <prvHeapInit+0xb4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	1ad2      	subs	r2, r2, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <prvHeapInit+0xb4>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <prvHeapInit+0xb8>)
 80033c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <prvHeapInit+0xbc>)
 80033ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <prvHeapInit+0xc0>)
 80033d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033d6:	601a      	str	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	24000e6c 	.word	0x24000e6c
 80033e8:	24004a6c 	.word	0x24004a6c
 80033ec:	24004a74 	.word	0x24004a74
 80033f0:	24004a7c 	.word	0x24004a7c
 80033f4:	24004a78 	.word	0x24004a78
 80033f8:	24004a88 	.word	0x24004a88

080033fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003404:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <prvInsertBlockIntoFreeList+0xac>)
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e002      	b.n	8003410 <prvInsertBlockIntoFreeList+0x14>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d8f7      	bhi.n	800340a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4413      	add	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d108      	bne.n	800343e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	441a      	add	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d118      	bne.n	8003484 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <prvInsertBlockIntoFreeList+0xb0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d00d      	beq.n	800347a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e008      	b.n	800348c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <prvInsertBlockIntoFreeList+0xb0>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e003      	b.n	800348c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d002      	beq.n	800349a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	24004a6c 	.word	0x24004a6c
 80034ac:	24004a74 	.word	0x24004a74

080034b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 0208 	add.w	r2, r3, #8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295
 80034c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f103 0208 	add.w	r2, r3, #8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f103 0208 	add.w	r2, r3, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d103      	bne.n	8003572 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e00c      	b.n	800358c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3308      	adds	r3, #8
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e002      	b.n	8003580 <vListInsert+0x2e>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	d2f6      	bcs.n	800357a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6852      	ldr	r2, [r2, #4]
 80035e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d103      	bne.n	80035f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3b04      	subs	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3b04      	subs	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3b04      	subs	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003648:	4a0c      	ldr	r2, [pc, #48]	; (800367c <pxPortInitialiseStack+0x64>)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3b14      	subs	r3, #20
 8003652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b04      	subs	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f06f 0202 	mvn.w	r2, #2
 8003666:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3b20      	subs	r3, #32
 800366c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800366e:	68fb      	ldr	r3, [r7, #12]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	08003681 	.word	0x08003681

08003680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <prvTaskExitError+0x54>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d00a      	beq.n	80036aa <prvTaskExitError+0x2a>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60fb      	str	r3, [r7, #12]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <prvTaskExitError+0x28>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60bb      	str	r3, [r7, #8]
}
 80036bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036be:	bf00      	nop
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0fc      	beq.n	80036c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	24000010 	.word	0x24000010
	...

080036e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <pxCurrentTCBConst2>)
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ea:	f380 8809 	msr	PSP, r0
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f380 8811 	msr	BASEPRI, r0
 80036fa:	4770      	bx	lr
 80036fc:	f3af 8000 	nop.w

08003700 <pxCurrentTCBConst2>:
 8003700:	24004ad4 	.word	0x24004ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003708:	4808      	ldr	r0, [pc, #32]	; (800372c <prvPortStartFirstTask+0x24>)
 800370a:	6800      	ldr	r0, [r0, #0]
 800370c:	6800      	ldr	r0, [r0, #0]
 800370e:	f380 8808 	msr	MSP, r0
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8814 	msr	CONTROL, r0
 800371a:	b662      	cpsie	i
 800371c:	b661      	cpsie	f
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	df00      	svc	0
 8003728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800372a:	bf00      	nop
 800372c:	e000ed08 	.word	0xe000ed08

08003730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003736:	4b46      	ldr	r3, [pc, #280]	; (8003850 <xPortStartScheduler+0x120>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a46      	ldr	r2, [pc, #280]	; (8003854 <xPortStartScheduler+0x124>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10a      	bne.n	8003756 <xPortStartScheduler+0x26>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	613b      	str	r3, [r7, #16]
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <xPortStartScheduler+0x120>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3f      	ldr	r2, [pc, #252]	; (8003858 <xPortStartScheduler+0x128>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10a      	bne.n	8003776 <xPortStartScheduler+0x46>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	60fb      	str	r3, [r7, #12]
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <xPortStartScheduler+0x12c>)
 8003778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <xPortStartScheduler+0x130>)
 800379c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <xPortStartScheduler+0x134>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037a4:	e009      	b.n	80037ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80037a6:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <xPortStartScheduler+0x134>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <xPortStartScheduler+0x134>)
 80037ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d0ef      	beq.n	80037a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <xPortStartScheduler+0x134>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1c3 0307 	rsb	r3, r3, #7
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00a      	beq.n	80037e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037e8:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <xPortStartScheduler+0x134>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <xPortStartScheduler+0x134>)
 80037f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <xPortStartScheduler+0x134>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <xPortStartScheduler+0x134>)
 80037fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <xPortStartScheduler+0x138>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a17      	ldr	r2, [pc, #92]	; (8003868 <xPortStartScheduler+0x138>)
 800380c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <xPortStartScheduler+0x138>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <xPortStartScheduler+0x138>)
 8003818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800381c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800381e:	f000 f8dd 	bl	80039dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <xPortStartScheduler+0x13c>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003828:	f000 f8fc 	bl	8003a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <xPortStartScheduler+0x140>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <xPortStartScheduler+0x140>)
 8003832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003838:	f7ff ff66 	bl	8003708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800383c:	f001 f9fa 	bl	8004c34 <vTaskSwitchContext>
	prvTaskExitError();
 8003840:	f7ff ff1e 	bl	8003680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	e000ed00 	.word	0xe000ed00
 8003854:	410fc271 	.word	0x410fc271
 8003858:	410fc270 	.word	0x410fc270
 800385c:	e000e400 	.word	0xe000e400
 8003860:	24004a8c 	.word	0x24004a8c
 8003864:	24004a90 	.word	0x24004a90
 8003868:	e000ed20 	.word	0xe000ed20
 800386c:	24000010 	.word	0x24000010
 8003870:	e000ef34 	.word	0xe000ef34

08003874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	607b      	str	r3, [r7, #4]
}
 800388c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <vPortEnterCritical+0x58>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <vPortEnterCritical+0x58>)
 8003896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <vPortEnterCritical+0x58>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10f      	bne.n	80038c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <vPortEnterCritical+0x5c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	603b      	str	r3, [r7, #0]
}
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <vPortEnterCritical+0x4a>
	}
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	24000010 	.word	0x24000010
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <vPortExitCritical+0x50>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <vPortExitCritical+0x24>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	607b      	str	r3, [r7, #4]
}
 80038f4:	bf00      	nop
 80038f6:	e7fe      	b.n	80038f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <vPortExitCritical+0x50>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <vPortExitCritical+0x50>)
 8003900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <vPortExitCritical+0x50>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <vPortExitCritical+0x42>
 800390a:	2300      	movs	r3, #0
 800390c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	24000010 	.word	0x24000010
	...

08003930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003930:	f3ef 8009 	mrs	r0, PSP
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <pxCurrentTCBConst>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	f01e 0f10 	tst.w	lr, #16
 8003940:	bf08      	it	eq
 8003942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394a:	6010      	str	r0, [r2, #0]
 800394c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003954:	f380 8811 	msr	BASEPRI, r0
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f001 f968 	bl	8004c34 <vTaskSwitchContext>
 8003964:	f04f 0000 	mov.w	r0, #0
 8003968:	f380 8811 	msr	BASEPRI, r0
 800396c:	bc09      	pop	{r0, r3}
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	6808      	ldr	r0, [r1, #0]
 8003972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003976:	f01e 0f10 	tst.w	lr, #16
 800397a:	bf08      	it	eq
 800397c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003980:	f380 8809 	msr	PSP, r0
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	f3af 8000 	nop.w

08003990 <pxCurrentTCBConst>:
 8003990:	24004ad4 	.word	0x24004ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop

08003998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	607b      	str	r3, [r7, #4]
}
 80039b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039b2:	f001 f885 	bl	8004ac0 <xTaskIncrementTick>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <xPortSysTickHandler+0x40>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f383 8811 	msr	BASEPRI, r3
}
 80039ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <vPortSetupTimerInterrupt+0x34>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <vPortSetupTimerInterrupt+0x38>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <vPortSetupTimerInterrupt+0x3c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <vPortSetupTimerInterrupt+0x40>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <vPortSetupTimerInterrupt+0x44>)
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039fe:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <vPortSetupTimerInterrupt+0x34>)
 8003a00:	2207      	movs	r2, #7
 8003a02:	601a      	str	r2, [r3, #0]
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000e010 	.word	0xe000e010
 8003a14:	e000e018 	.word	0xe000e018
 8003a18:	24000000 	.word	0x24000000
 8003a1c:	10624dd3 	.word	0x10624dd3
 8003a20:	e000e014 	.word	0xe000e014

08003a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a34 <vPortEnableVFP+0x10>
 8003a28:	6801      	ldr	r1, [r0, #0]
 8003a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a2e:	6001      	str	r1, [r0, #0]
 8003a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a32:	bf00      	nop
 8003a34:	e000ed88 	.word	0xe000ed88

08003a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003a3e:	f3ef 8305 	mrs	r3, IPSR
 8003a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b0f      	cmp	r3, #15
 8003a48:	d914      	bls.n	8003a74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a4a:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <vPortValidateInterruptPriority+0x70>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <vPortValidateInterruptPriority+0x74>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	7afa      	ldrb	r2, [r7, #11]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d20a      	bcs.n	8003a74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	607b      	str	r3, [r7, #4]
}
 8003a70:	bf00      	nop
 8003a72:	e7fe      	b.n	8003a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <vPortValidateInterruptPriority+0x78>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a7c:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <vPortValidateInterruptPriority+0x7c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d90a      	bls.n	8003a9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	603b      	str	r3, [r7, #0]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <vPortValidateInterruptPriority+0x60>
	}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	e000e3f0 	.word	0xe000e3f0
 8003aac:	24004a8c 	.word	0x24004a8c
 8003ab0:	e000ed0c 	.word	0xe000ed0c
 8003ab4:	24004a90 	.word	0x24004a90

08003ab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xQueueGenericReset+0x2a>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60bb      	str	r3, [r7, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ae2:	f7ff fec7 	bl	8003874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	68f9      	ldr	r1, [r7, #12]
 8003af0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	441a      	add	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	3b01      	subs	r3, #1
 8003b14:	68f9      	ldr	r1, [r7, #12]
 8003b16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	441a      	add	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	22ff      	movs	r2, #255	; 0xff
 8003b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	22ff      	movs	r2, #255	; 0xff
 8003b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d114      	bne.n	8003b62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01a      	beq.n	8003b76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3310      	adds	r3, #16
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f929 	bl	8004d9c <xTaskRemoveFromEventList>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <xQueueGenericReset+0xcc>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	e009      	b.n	8003b76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3310      	adds	r3, #16
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fca2 	bl	80034b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3324      	adds	r3, #36	; 0x24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fc9d 	bl	80034b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f7ff fead 	bl	80038d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08e      	sub	sp, #56	; 0x38
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <xQueueGenericCreateStatic+0x52>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <xQueueGenericCreateStatic+0x56>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xQueueGenericCreateStatic+0x58>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	623b      	str	r3, [r7, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <xQueueGenericCreateStatic+0x7e>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <xQueueGenericCreateStatic+0x82>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <xQueueGenericCreateStatic+0x84>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	61fb      	str	r3, [r7, #28]
}
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c26:	2350      	movs	r3, #80	; 0x50
 8003c28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b50      	cmp	r3, #80	; 0x50
 8003c2e:	d00a      	beq.n	8003c46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	61bb      	str	r3, [r7, #24]
}
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00d      	beq.n	8003c6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f805 	bl	8003c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3730      	adds	r7, #48	; 0x30
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e002      	b.n	8003c9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	69b8      	ldr	r0, [r7, #24]
 8003caa:	f7ff ff05 	bl	8003ab8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08e      	sub	sp, #56	; 0x38
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xQueueGenericSend+0x32>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <xQueueGenericSend+0x40>
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <xQueueGenericSend+0x44>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <xQueueGenericSend+0x46>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <xQueueGenericSend+0x60>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d103      	bne.n	8003d2e <xQueueGenericSend+0x6e>
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <xQueueGenericSend+0x72>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <xQueueGenericSend+0x74>
 8003d32:	2300      	movs	r3, #0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <xQueueGenericSend+0x8e>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	623b      	str	r3, [r7, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d4e:	f001 f9e7 	bl	8005120 <xTaskGetSchedulerState>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <xQueueGenericSend+0x9e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <xQueueGenericSend+0xa2>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <xQueueGenericSend+0xa4>
 8003d62:	2300      	movs	r3, #0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <xQueueGenericSend+0xbe>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	61fb      	str	r3, [r7, #28]
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d7e:	f7ff fd79 	bl	8003874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <xQueueGenericSend+0xd4>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d129      	bne.n	8003de8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d9a:	f000 fa0b 	bl	80041b4 <prvCopyDataToQueue>
 8003d9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d010      	beq.n	8003dca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fff5 	bl	8004d9c <xTaskRemoveFromEventList>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <xQueueGenericSend+0x1f8>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	e00a      	b.n	8003de0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003dd0:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <xQueueGenericSend+0x1f8>)
 8003dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003de0:	f7ff fd78 	bl	80038d4 <vPortExitCritical>
				return pdPASS;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e063      	b.n	8003eb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dee:	f7ff fd71 	bl	80038d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e05c      	b.n	8003eb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 f82f 	bl	8004e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e06:	2301      	movs	r3, #1
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e0a:	f7ff fd63 	bl	80038d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e0e:	f000 fd9b 	bl	8004948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e12:	f7ff fd2f 	bl	8003874 <vPortEnterCritical>
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d103      	bne.n	8003e2c <xQueueGenericSend+0x16c>
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e32:	b25b      	sxtb	r3, r3
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d103      	bne.n	8003e42 <xQueueGenericSend+0x182>
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e42:	f7ff fd47 	bl	80038d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e46:	1d3a      	adds	r2, r7, #4
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 f81e 	bl	8004e90 <xTaskCheckForTimeOut>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d124      	bne.n	8003ea4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e5c:	f000 faa2 	bl	80043a4 <prvIsQueueFull>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d018      	beq.n	8003e98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	3310      	adds	r3, #16
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 ff44 	bl	8004cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e76:	f000 fa2d 	bl	80042d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e7a:	f000 fd73 	bl	8004964 <xTaskResumeAll>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f af7c 	bne.w	8003d7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <xQueueGenericSend+0x1f8>)
 8003e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	e772      	b.n	8003d7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e9a:	f000 fa1b 	bl	80042d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e9e:	f000 fd61 	bl	8004964 <xTaskResumeAll>
 8003ea2:	e76c      	b.n	8003d7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea6:	f000 fa15 	bl	80042d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eaa:	f000 fd5b 	bl	8004964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003eae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3738      	adds	r7, #56	; 0x38
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	e000ed04 	.word	0xe000ed04

08003ebc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b090      	sub	sp, #64	; 0x40
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <xQueueGenericSendFromISR+0x3c>
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <xQueueGenericSendFromISR+0x40>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <xQueueGenericSendFromISR+0x42>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d103      	bne.n	8003f26 <xQueueGenericSendFromISR+0x6a>
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <xQueueGenericSendFromISR+0x6e>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <xQueueGenericSendFromISR+0x70>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	623b      	str	r3, [r7, #32]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f46:	f7ff fd77 	bl	8003a38 <vPortValidateInterruptPriority>
	__asm volatile
 8003f4a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61fa      	str	r2, [r7, #28]
 8003f60:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003f62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <xQueueGenericSendFromISR+0xbc>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d12f      	bne.n	8003fd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f8e:	f000 f911 	bl	80041b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d112      	bne.n	8003fc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	3324      	adds	r3, #36	; 0x24
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fef7 	bl	8004d9c <xTaskRemoveFromEventList>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00e      	beq.n	8003fd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	e007      	b.n	8003fd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	b25a      	sxtb	r2, r3
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003fd6:	e001      	b.n	8003fdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fde:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f383 8811 	msr	BASEPRI, r3
}
 8003fe6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3740      	adds	r7, #64	; 0x40
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	; 0x30
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004000:	2300      	movs	r3, #0
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <xQueueReceive+0x30>
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	623b      	str	r3, [r7, #32]
}
 8004020:	bf00      	nop
 8004022:	e7fe      	b.n	8004022 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <xQueueReceive+0x3e>
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <xQueueReceive+0x42>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <xQueueReceive+0x44>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xQueueReceive+0x5e>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61fb      	str	r3, [r7, #28]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004052:	f001 f865 	bl	8005120 <xTaskGetSchedulerState>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <xQueueReceive+0x6e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <xQueueReceive+0x72>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueReceive+0x74>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueReceive+0x8e>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61bb      	str	r3, [r7, #24]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004082:	f7ff fbf7 	bl	8003874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01f      	beq.n	80040d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004096:	f000 f8f7 	bl	8004288 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1e5a      	subs	r2, r3, #1
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00f      	beq.n	80040ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	3310      	adds	r3, #16
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fe74 	bl	8004d9c <xTaskRemoveFromEventList>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <xQueueReceive+0x1bc>)
 80040bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040ca:	f7ff fc03 	bl	80038d4 <vPortExitCritical>
				return pdPASS;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e069      	b.n	80041a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d103      	bne.n	80040e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040d8:	f7ff fbfc 	bl	80038d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040dc:	2300      	movs	r3, #0
 80040de:	e062      	b.n	80041a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040e6:	f107 0310 	add.w	r3, r7, #16
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 feba 	bl	8004e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040f4:	f7ff fbee 	bl	80038d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040f8:	f000 fc26 	bl	8004948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040fc:	f7ff fbba 	bl	8003874 <vPortEnterCritical>
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004106:	b25b      	sxtb	r3, r3
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d103      	bne.n	8004116 <xQueueReceive+0x122>
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411c:	b25b      	sxtb	r3, r3
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d103      	bne.n	800412c <xQueueReceive+0x138>
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800412c:	f7ff fbd2 	bl	80038d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004130:	1d3a      	adds	r2, r7, #4
 8004132:	f107 0310 	add.w	r3, r7, #16
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fea9 	bl	8004e90 <xTaskCheckForTimeOut>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d123      	bne.n	800418c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004146:	f000 f917 	bl	8004378 <prvIsQueueEmpty>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d017      	beq.n	8004180 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	3324      	adds	r3, #36	; 0x24
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fdcf 	bl	8004cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800415e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004160:	f000 f8b8 	bl	80042d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004164:	f000 fbfe 	bl	8004964 <xTaskResumeAll>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d189      	bne.n	8004082 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <xQueueReceive+0x1bc>)
 8004170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	e780      	b.n	8004082 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004182:	f000 f8a7 	bl	80042d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004186:	f000 fbed 	bl	8004964 <xTaskResumeAll>
 800418a:	e77a      	b.n	8004082 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800418c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800418e:	f000 f8a1 	bl	80042d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004192:	f000 fbe7 	bl	8004964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004198:	f000 f8ee 	bl	8004378 <prvIsQueueEmpty>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f43f af6f 	beq.w	8004082 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3730      	adds	r7, #48	; 0x30
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d14d      	bne.n	8004276 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 ffbc 	bl	800515c <xTaskPriorityDisinherit>
 80041e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	e043      	b.n	8004276 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d119      	bne.n	8004228 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6858      	ldr	r0, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	461a      	mov	r2, r3
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	f001 fbe2 	bl	80059c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	441a      	add	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d32b      	bcc.n	8004276 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	e026      	b.n	8004276 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68d8      	ldr	r0, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	461a      	mov	r2, r3
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	f001 fbc8 	bl	80059c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	425b      	negs	r3, r3
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d207      	bcs.n	8004264 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	425b      	negs	r3, r3
 800425e:	441a      	add	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d105      	bne.n	8004276 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3b01      	subs	r3, #1
 8004274:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800427e:	697b      	ldr	r3, [r7, #20]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d018      	beq.n	80042cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	441a      	add	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d303      	bcc.n	80042bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68d9      	ldr	r1, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	461a      	mov	r2, r3
 80042c6:	6838      	ldr	r0, [r7, #0]
 80042c8:	f001 fb7e 	bl	80059c8 <memcpy>
	}
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042dc:	f7ff faca 	bl	8003874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042e8:	e011      	b.n	800430e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d012      	beq.n	8004318 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3324      	adds	r3, #36	; 0x24
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fd50 	bl	8004d9c <xTaskRemoveFromEventList>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004302:	f000 fe27 	bl	8004f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	3b01      	subs	r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800430e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	dce9      	bgt.n	80042ea <prvUnlockQueue+0x16>
 8004316:	e000      	b.n	800431a <prvUnlockQueue+0x46>
					break;
 8004318:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	22ff      	movs	r2, #255	; 0xff
 800431e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004322:	f7ff fad7 	bl	80038d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004326:	f7ff faa5 	bl	8003874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004330:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004332:	e011      	b.n	8004358 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3310      	adds	r3, #16
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd2b 	bl	8004d9c <xTaskRemoveFromEventList>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800434c:	f000 fe02 	bl	8004f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004350:	7bbb      	ldrb	r3, [r7, #14]
 8004352:	3b01      	subs	r3, #1
 8004354:	b2db      	uxtb	r3, r3
 8004356:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800435c:	2b00      	cmp	r3, #0
 800435e:	dce9      	bgt.n	8004334 <prvUnlockQueue+0x60>
 8004360:	e000      	b.n	8004364 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004362:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	22ff      	movs	r2, #255	; 0xff
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800436c:	f7ff fab2 	bl	80038d4 <vPortExitCritical>
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004380:	f7ff fa78 	bl	8003874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e001      	b.n	8004396 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004396:	f7ff fa9d 	bl	80038d4 <vPortExitCritical>

	return xReturn;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043ac:	f7ff fa62 	bl	8003874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d102      	bne.n	80043c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e001      	b.n	80043c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043c6:	f7ff fa85 	bl	80038d4 <vPortExitCritical>

	return xReturn;
 80043ca:	68fb      	ldr	r3, [r7, #12]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e014      	b.n	800440e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043f0:	490c      	ldr	r1, [pc, #48]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <vQueueAddToRegistry+0x50>)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004406:	e006      	b.n	8004416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b07      	cmp	r3, #7
 8004412:	d9e7      	bls.n	80043e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	24004a94 	.word	0x24004a94

08004428 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004438:	f7ff fa1c 	bl	8003874 <vPortEnterCritical>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004442:	b25b      	sxtb	r3, r3
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d103      	bne.n	8004452 <vQueueWaitForMessageRestricted+0x2a>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004458:	b25b      	sxtb	r3, r3
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d103      	bne.n	8004468 <vQueueWaitForMessageRestricted+0x40>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004468:	f7ff fa34 	bl	80038d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3324      	adds	r3, #36	; 0x24
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fc61 	bl	8004d44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff26 	bl	80042d4 <prvUnlockQueue>
	}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08e      	sub	sp, #56	; 0x38
 8004494:	af04      	add	r7, sp, #16
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800449e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	623b      	str	r3, [r7, #32]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	61fb      	str	r3, [r7, #28]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044d6:	23bc      	movs	r3, #188	; 0xbc
 80044d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2bbc      	cmp	r3, #188	; 0xbc
 80044de:	d00a      	beq.n	80044f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61bb      	str	r3, [r7, #24]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01e      	beq.n	800453c <xTaskCreateStatic+0xac>
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800450c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2202      	movs	r2, #2
 8004512:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004516:	2300      	movs	r3, #0
 8004518:	9303      	str	r3, [sp, #12]
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	9302      	str	r3, [sp, #8]
 800451e:	f107 0314 	add.w	r3, r7, #20
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f850 	bl	80045d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004536:	f000 f8f3 	bl	8004720 <prvAddNewTaskToReadyList>
 800453a:	e001      	b.n	8004540 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004540:	697b      	ldr	r3, [r7, #20]
	}
 8004542:	4618      	mov	r0, r3
 8004544:	3728      	adds	r7, #40	; 0x28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800454a:	b580      	push	{r7, lr}
 800454c:	b08c      	sub	sp, #48	; 0x30
 800454e:	af04      	add	r7, sp, #16
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fdbc 	bl	80030dc <pvPortMalloc>
 8004564:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00e      	beq.n	800458a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800456c:	20bc      	movs	r0, #188	; 0xbc
 800456e:	f7fe fdb5 	bl	80030dc <pvPortMalloc>
 8004572:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
 8004580:	e005      	b.n	800458e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004582:	6978      	ldr	r0, [r7, #20]
 8004584:	f7fe fe76 	bl	8003274 <vPortFree>
 8004588:	e001      	b.n	800458e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d017      	beq.n	80045c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	2300      	movs	r3, #0
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	9302      	str	r3, [sp, #8]
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f80e 	bl	80045d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b8:	69f8      	ldr	r0, [r7, #28]
 80045ba:	f000 f8b1 	bl	8004720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045be:	2301      	movs	r3, #1
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e002      	b.n	80045ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295
 80045c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045ca:	69bb      	ldr	r3, [r7, #24]
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	461a      	mov	r2, r3
 80045ec:	21a5      	movs	r1, #165	; 0xa5
 80045ee:	f001 f9f9 	bl	80059e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80045fc:	440b      	add	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	617b      	str	r3, [r7, #20]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01f      	beq.n	8004672 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e012      	b.n	800465e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	7819      	ldrb	r1, [r3, #0]
 8004640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	3334      	adds	r3, #52	; 0x34
 8004648:	460a      	mov	r2, r1
 800464a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b0f      	cmp	r3, #15
 8004662:	d9e9      	bls.n	8004638 <prvInitialiseNewTask+0x64>
 8004664:	e000      	b.n	8004668 <prvInitialiseNewTask+0x94>
			{
				break;
 8004666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004670:	e003      	b.n	800467a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	2b37      	cmp	r3, #55	; 0x37
 800467e:	d901      	bls.n	8004684 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004680:	2337      	movs	r3, #55	; 0x37
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	2200      	movs	r2, #0
 8004694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	3304      	adds	r3, #4
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe ff28 	bl	80034f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	3318      	adds	r3, #24
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fe ff23 	bl	80034f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	3354      	adds	r3, #84	; 0x54
 80046d4:	2260      	movs	r2, #96	; 0x60
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 f983 	bl	80059e4 <memset>
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <prvInitialiseNewTask+0x140>)
 80046e2:	659a      	str	r2, [r3, #88]	; 0x58
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <prvInitialiseNewTask+0x144>)
 80046e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	4a0b      	ldr	r2, [pc, #44]	; (800471c <prvInitialiseNewTask+0x148>)
 80046ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	69b8      	ldr	r0, [r7, #24]
 80046f6:	f7fe ff8f 	bl	8003618 <pxPortInitialiseStack>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800470c:	bf00      	nop
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08006848 	.word	0x08006848
 8004718:	08006868 	.word	0x08006868
 800471c:	08006828 	.word	0x08006828

08004720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004728:	f7ff f8a4 	bl	8003874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800472c:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <prvAddNewTaskToReadyList+0xc4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	4a2c      	ldr	r2, [pc, #176]	; (80047e4 <prvAddNewTaskToReadyList+0xc4>)
 8004734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800473e:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <prvAddNewTaskToReadyList+0xc4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d110      	bne.n	800476e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800474c:	f000 fc26 	bl	8004f9c <prvInitialiseTaskLists>
 8004750:	e00d      	b.n	800476e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <prvAddNewTaskToReadyList+0xcc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800475a:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	429a      	cmp	r2, r3
 8004766:	d802      	bhi.n	800476e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004768:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <prvAddNewTaskToReadyList+0xd0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <prvAddNewTaskToReadyList+0xd0>)
 8004776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <prvAddNewTaskToReadyList+0xd0>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <prvAddNewTaskToReadyList+0xd4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d903      	bls.n	8004794 <prvAddNewTaskToReadyList+0x74>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <prvAddNewTaskToReadyList+0xd4>)
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <prvAddNewTaskToReadyList+0xd8>)
 80047a2:	441a      	add	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f7fe fead 	bl	800350a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047b0:	f7ff f890 	bl	80038d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <prvAddNewTaskToReadyList+0xcc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00e      	beq.n	80047da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <prvAddNewTaskToReadyList+0xc8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d207      	bcs.n	80047da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <prvAddNewTaskToReadyList+0xdc>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	24004fa8 	.word	0x24004fa8
 80047e8:	24004ad4 	.word	0x24004ad4
 80047ec:	24004fb4 	.word	0x24004fb4
 80047f0:	24004fc4 	.word	0x24004fc4
 80047f4:	24004fb0 	.word	0x24004fb0
 80047f8:	24004ad8 	.word	0x24004ad8
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d017      	beq.n	8004842 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <vTaskDelay+0x60>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <vTaskDelay+0x30>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	60bb      	str	r3, [r7, #8]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004830:	f000 f88a 	bl	8004948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004834:	2100      	movs	r1, #0
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fcfe 	bl	8005238 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800483c:	f000 f892 	bl	8004964 <xTaskResumeAll>
 8004840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d107      	bne.n	8004858 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <vTaskDelay+0x64>)
 800484a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	24004fd0 	.word	0x24004fd0
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004876:	463a      	mov	r2, r7
 8004878:	1d39      	adds	r1, r7, #4
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fbf8 	bl	8003074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	9202      	str	r2, [sp, #8]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	2300      	movs	r3, #0
 8004894:	460a      	mov	r2, r1
 8004896:	4924      	ldr	r1, [pc, #144]	; (8004928 <vTaskStartScheduler+0xc0>)
 8004898:	4824      	ldr	r0, [pc, #144]	; (800492c <vTaskStartScheduler+0xc4>)
 800489a:	f7ff fdf9 	bl	8004490 <xTaskCreateStatic>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a23      	ldr	r2, [pc, #140]	; (8004930 <vTaskStartScheduler+0xc8>)
 80048a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <vTaskStartScheduler+0xc8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048ac:	2301      	movs	r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e001      	b.n	80048b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d102      	bne.n	80048c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80048bc:	f000 fd10 	bl	80052e0 <xTimerCreateTimerTask>
 80048c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d11b      	bne.n	8004900 <vTaskStartScheduler+0x98>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	613b      	str	r3, [r7, #16]
}
 80048da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048dc:	4b15      	ldr	r3, [pc, #84]	; (8004934 <vTaskStartScheduler+0xcc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3354      	adds	r3, #84	; 0x54
 80048e2:	4a15      	ldr	r2, [pc, #84]	; (8004938 <vTaskStartScheduler+0xd0>)
 80048e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <vTaskStartScheduler+0xd4>)
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <vTaskStartScheduler+0xd8>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <vTaskStartScheduler+0xdc>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048fa:	f7fe ff19 	bl	8003730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048fe:	e00e      	b.n	800491e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d10a      	bne.n	800491e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <vTaskStartScheduler+0xb4>
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	08006794 	.word	0x08006794
 800492c:	08004f6d 	.word	0x08004f6d
 8004930:	24004fcc 	.word	0x24004fcc
 8004934:	24004ad4 	.word	0x24004ad4
 8004938:	24000014 	.word	0x24000014
 800493c:	24004fc8 	.word	0x24004fc8
 8004940:	24004fb4 	.word	0x24004fb4
 8004944:	24004fac 	.word	0x24004fac

08004948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <vTaskSuspendAll+0x18>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	4a03      	ldr	r2, [pc, #12]	; (8004960 <vTaskSuspendAll+0x18>)
 8004954:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	24004fd0 	.word	0x24004fd0

08004964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004972:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <xTaskResumeAll+0x118>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <xTaskResumeAll+0x2c>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	603b      	str	r3, [r7, #0]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004990:	f7fe ff70 	bl	8003874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004994:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <xTaskResumeAll+0x118>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3b01      	subs	r3, #1
 800499a:	4a38      	ldr	r2, [pc, #224]	; (8004a7c <xTaskResumeAll+0x118>)
 800499c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <xTaskResumeAll+0x118>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d162      	bne.n	8004a6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049a6:	4b36      	ldr	r3, [pc, #216]	; (8004a80 <xTaskResumeAll+0x11c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d05e      	beq.n	8004a6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ae:	e02f      	b.n	8004a10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b0:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <xTaskResumeAll+0x120>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3318      	adds	r3, #24
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fe01 	bl	80035c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fdfc 	bl	80035c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d0:	4b2d      	ldr	r3, [pc, #180]	; (8004a88 <xTaskResumeAll+0x124>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d903      	bls.n	80049e0 <xTaskResumeAll+0x7c>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	4a2a      	ldr	r2, [pc, #168]	; (8004a88 <xTaskResumeAll+0x124>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <xTaskResumeAll+0x128>)
 80049ee:	441a      	add	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7fe fd87 	bl	800350a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <xTaskResumeAll+0x12c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a0a:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <xTaskResumeAll+0x130>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a10:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <xTaskResumeAll+0x120>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1cb      	bne.n	80049b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a1e:	f000 fb5f 	bl	80050e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <xTaskResumeAll+0x134>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d010      	beq.n	8004a50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a2e:	f000 f847 	bl	8004ac0 <xTaskIncrementTick>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a38:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <xTaskResumeAll+0x130>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f1      	bne.n	8004a2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a4a:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <xTaskResumeAll+0x134>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <xTaskResumeAll+0x130>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <xTaskResumeAll+0x138>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a6c:	f7fe ff32 	bl	80038d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004a70:	68bb      	ldr	r3, [r7, #8]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	24004fd0 	.word	0x24004fd0
 8004a80:	24004fa8 	.word	0x24004fa8
 8004a84:	24004f68 	.word	0x24004f68
 8004a88:	24004fb0 	.word	0x24004fb0
 8004a8c:	24004ad8 	.word	0x24004ad8
 8004a90:	24004ad4 	.word	0x24004ad4
 8004a94:	24004fbc 	.word	0x24004fbc
 8004a98:	24004fb8 	.word	0x24004fb8
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <xTaskGetTickCount+0x1c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004aac:	687b      	ldr	r3, [r7, #4]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	24004fac 	.word	0x24004fac

08004ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aca:	4b4f      	ldr	r3, [pc, #316]	; (8004c08 <xTaskIncrementTick+0x148>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 808f 	bne.w	8004bf2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ad4:	4b4d      	ldr	r3, [pc, #308]	; (8004c0c <xTaskIncrementTick+0x14c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004adc:	4a4b      	ldr	r2, [pc, #300]	; (8004c0c <xTaskIncrementTick+0x14c>)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d120      	bne.n	8004b2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ae8:	4b49      	ldr	r3, [pc, #292]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <xTaskIncrementTick+0x48>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	603b      	str	r3, [r7, #0]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <xTaskIncrementTick+0x46>
 8004b08:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b41      	ldr	r3, [pc, #260]	; (8004c14 <xTaskIncrementTick+0x154>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3f      	ldr	r2, [pc, #252]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4a3f      	ldr	r2, [pc, #252]	; (8004c14 <xTaskIncrementTick+0x154>)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <xTaskIncrementTick+0x158>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3301      	adds	r3, #1
 8004b22:	4a3d      	ldr	r2, [pc, #244]	; (8004c18 <xTaskIncrementTick+0x158>)
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	f000 fadb 	bl	80050e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b2a:	4b3c      	ldr	r3, [pc, #240]	; (8004c1c <xTaskIncrementTick+0x15c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d349      	bcc.n	8004bc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b34:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <xTaskIncrementTick+0x15c>)
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	601a      	str	r2, [r3, #0]
					break;
 8004b46:	e03f      	b.n	8004bc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b48:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <xTaskIncrementTick+0x150>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d203      	bcs.n	8004b68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b60:	4a2e      	ldr	r2, [pc, #184]	; (8004c1c <xTaskIncrementTick+0x15c>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b66:	e02f      	b.n	8004bc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fd29 	bl	80035c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d004      	beq.n	8004b84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fd20 	bl	80035c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <xTaskIncrementTick+0x160>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d903      	bls.n	8004b98 <xTaskIncrementTick+0xd8>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4a22      	ldr	r2, [pc, #136]	; (8004c20 <xTaskIncrementTick+0x160>)
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <xTaskIncrementTick+0x164>)
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7fe fcab 	bl	800350a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <xTaskIncrementTick+0x168>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d3b8      	bcc.n	8004b34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bc6:	e7b5      	b.n	8004b34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bc8:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <xTaskIncrementTick+0x168>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	4915      	ldr	r1, [pc, #84]	; (8004c24 <xTaskIncrementTick+0x164>)
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d901      	bls.n	8004be4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004be4:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <xTaskIncrementTick+0x16c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e004      	b.n	8004bfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bf2:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <xTaskIncrementTick+0x170>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <xTaskIncrementTick+0x170>)
 8004bfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bfc:	697b      	ldr	r3, [r7, #20]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	24004fd0 	.word	0x24004fd0
 8004c0c:	24004fac 	.word	0x24004fac
 8004c10:	24004f60 	.word	0x24004f60
 8004c14:	24004f64 	.word	0x24004f64
 8004c18:	24004fc0 	.word	0x24004fc0
 8004c1c:	24004fc8 	.word	0x24004fc8
 8004c20:	24004fb0 	.word	0x24004fb0
 8004c24:	24004ad8 	.word	0x24004ad8
 8004c28:	24004ad4 	.word	0x24004ad4
 8004c2c:	24004fbc 	.word	0x24004fbc
 8004c30:	24004fb8 	.word	0x24004fb8

08004c34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <vTaskSwitchContext+0xb0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c42:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <vTaskSwitchContext+0xb4>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c48:	e046      	b.n	8004cd8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <vTaskSwitchContext+0xb4>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c50:	4b26      	ldr	r3, [pc, #152]	; (8004cec <vTaskSwitchContext+0xb8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e010      	b.n	8004c7a <vTaskSwitchContext+0x46>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <vTaskSwitchContext+0x40>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	607b      	str	r3, [r7, #4]
}
 8004c70:	bf00      	nop
 8004c72:	e7fe      	b.n	8004c72 <vTaskSwitchContext+0x3e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	491d      	ldr	r1, [pc, #116]	; (8004cf0 <vTaskSwitchContext+0xbc>)
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0e4      	beq.n	8004c58 <vTaskSwitchContext+0x24>
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <vTaskSwitchContext+0xbc>)
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d104      	bne.n	8004cbe <vTaskSwitchContext+0x8a>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <vTaskSwitchContext+0xc0>)
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <vTaskSwitchContext+0xb8>)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <vTaskSwitchContext+0xc0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3354      	adds	r3, #84	; 0x54
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <vTaskSwitchContext+0xc4>)
 8004cd6:	6013      	str	r3, [r2, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	24004fd0 	.word	0x24004fd0
 8004ce8:	24004fbc 	.word	0x24004fbc
 8004cec:	24004fb0 	.word	0x24004fb0
 8004cf0:	24004ad8 	.word	0x24004ad8
 8004cf4:	24004ad4 	.word	0x24004ad4
 8004cf8:	24000014 	.word	0x24000014

08004cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	60fb      	str	r3, [r7, #12]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <vTaskPlaceOnEventList+0x44>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3318      	adds	r3, #24
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fe fc11 	bl	8003552 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d30:	2101      	movs	r1, #1
 8004d32:	6838      	ldr	r0, [r7, #0]
 8004d34:	f000 fa80 	bl	8005238 <prvAddCurrentTaskToDelayedList>
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	24004ad4 	.word	0x24004ad4

08004d44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	617b      	str	r3, [r7, #20]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3318      	adds	r3, #24
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7fe fbc8 	bl	800350a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
 8004d84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	68b8      	ldr	r0, [r7, #8]
 8004d8a:	f000 fa55 	bl	8005238 <prvAddCurrentTaskToDelayedList>
	}
 8004d8e:	bf00      	nop
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	24004ad4 	.word	0x24004ad4

08004d9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60fb      	str	r3, [r7, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	3318      	adds	r3, #24
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fbf9 	bl	80035c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <xTaskRemoveFromEventList+0xb0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d11d      	bne.n	8004e16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fbf0 	bl	80035c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <xTaskRemoveFromEventList+0xb4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d903      	bls.n	8004df8 <xTaskRemoveFromEventList+0x5c>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <xTaskRemoveFromEventList+0xb4>)
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <xTaskRemoveFromEventList+0xb8>)
 8004e06:	441a      	add	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fe fb7b 	bl	800350a <vListInsertEnd>
 8004e14:	e005      	b.n	8004e22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3318      	adds	r3, #24
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	480e      	ldr	r0, [pc, #56]	; (8004e58 <xTaskRemoveFromEventList+0xbc>)
 8004e1e:	f7fe fb74 	bl	800350a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <xTaskRemoveFromEventList+0xc0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d905      	bls.n	8004e3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <xTaskRemoveFromEventList+0xc4>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e001      	b.n	8004e40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e40:	697b      	ldr	r3, [r7, #20]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	24004fd0 	.word	0x24004fd0
 8004e50:	24004fb0 	.word	0x24004fb0
 8004e54:	24004ad8 	.word	0x24004ad8
 8004e58:	24004f68 	.word	0x24004f68
 8004e5c:	24004ad4 	.word	0x24004ad4
 8004e60:	24004fbc 	.word	0x24004fbc

08004e64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <vTaskInternalSetTimeOutState+0x24>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <vTaskInternalSetTimeOutState+0x28>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	605a      	str	r2, [r3, #4]
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	24004fc0 	.word	0x24004fc0
 8004e8c:	24004fac 	.word	0x24004fac

08004e90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	60fb      	str	r3, [r7, #12]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ed2:	f7fe fccf 	bl	8003874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <xTaskCheckForTimeOut+0xbc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d102      	bne.n	8004ef6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e023      	b.n	8004f3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <xTaskCheckForTimeOut+0xc0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d007      	beq.n	8004f12 <xTaskCheckForTimeOut+0x82>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	e015      	b.n	8004f3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d20b      	bcs.n	8004f34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ff9b 	bl	8004e64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e004      	b.n	8004f3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f3e:	f7fe fcc9 	bl	80038d4 <vPortExitCritical>

	return xReturn;
 8004f42:	69fb      	ldr	r3, [r7, #28]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	24004fac 	.word	0x24004fac
 8004f50:	24004fc0 	.word	0x24004fc0

08004f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <vTaskMissedYield+0x14>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	24004fbc 	.word	0x24004fbc

08004f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f74:	f000 f852 	bl	800501c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <prvIdleTask+0x28>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d9f9      	bls.n	8004f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <prvIdleTask+0x2c>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f90:	e7f0      	b.n	8004f74 <prvIdleTask+0x8>
 8004f92:	bf00      	nop
 8004f94:	24004ad8 	.word	0x24004ad8
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	e00c      	b.n	8004fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <prvInitialiseTaskLists+0x60>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fa7a 	bl	80034b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b37      	cmp	r3, #55	; 0x37
 8004fc6:	d9ef      	bls.n	8004fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fc8:	480d      	ldr	r0, [pc, #52]	; (8005000 <prvInitialiseTaskLists+0x64>)
 8004fca:	f7fe fa71 	bl	80034b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fce:	480d      	ldr	r0, [pc, #52]	; (8005004 <prvInitialiseTaskLists+0x68>)
 8004fd0:	f7fe fa6e 	bl	80034b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fd4:	480c      	ldr	r0, [pc, #48]	; (8005008 <prvInitialiseTaskLists+0x6c>)
 8004fd6:	f7fe fa6b 	bl	80034b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fda:	480c      	ldr	r0, [pc, #48]	; (800500c <prvInitialiseTaskLists+0x70>)
 8004fdc:	f7fe fa68 	bl	80034b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fe0:	480b      	ldr	r0, [pc, #44]	; (8005010 <prvInitialiseTaskLists+0x74>)
 8004fe2:	f7fe fa65 	bl	80034b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <prvInitialiseTaskLists+0x78>)
 8004fe8:	4a05      	ldr	r2, [pc, #20]	; (8005000 <prvInitialiseTaskLists+0x64>)
 8004fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <prvInitialiseTaskLists+0x7c>)
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <prvInitialiseTaskLists+0x68>)
 8004ff0:	601a      	str	r2, [r3, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	24004ad8 	.word	0x24004ad8
 8005000:	24004f38 	.word	0x24004f38
 8005004:	24004f4c 	.word	0x24004f4c
 8005008:	24004f68 	.word	0x24004f68
 800500c:	24004f7c 	.word	0x24004f7c
 8005010:	24004f94 	.word	0x24004f94
 8005014:	24004f60 	.word	0x24004f60
 8005018:	24004f64 	.word	0x24004f64

0800501c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005022:	e019      	b.n	8005058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005024:	f7fe fc26 	bl	8003874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005028:	4b10      	ldr	r3, [pc, #64]	; (800506c <prvCheckTasksWaitingTermination+0x50>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fac5 	bl	80035c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <prvCheckTasksWaitingTermination+0x54>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3b01      	subs	r3, #1
 8005040:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <prvCheckTasksWaitingTermination+0x54>)
 8005042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <prvCheckTasksWaitingTermination+0x58>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3b01      	subs	r3, #1
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <prvCheckTasksWaitingTermination+0x58>)
 800504c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800504e:	f7fe fc41 	bl	80038d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f810 	bl	8005078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005058:	4b06      	ldr	r3, [pc, #24]	; (8005074 <prvCheckTasksWaitingTermination+0x58>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e1      	bne.n	8005024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	24004f7c 	.word	0x24004f7c
 8005070:	24004fa8 	.word	0x24004fa8
 8005074:	24004f90 	.word	0x24004f90

08005078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3354      	adds	r3, #84	; 0x54
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fcc3 	bl	8005a10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005090:	2b00      	cmp	r3, #0
 8005092:	d108      	bne.n	80050a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe f8eb 	bl	8003274 <vPortFree>
				vPortFree( pxTCB );
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fe f8e8 	bl	8003274 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050a4:	e018      	b.n	80050d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d103      	bne.n	80050b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fe f8df 	bl	8003274 <vPortFree>
	}
 80050b6:	e00f      	b.n	80050d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d00a      	beq.n	80050d8 <prvDeleteTCB+0x60>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60fb      	str	r3, [r7, #12]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <prvDeleteTCB+0x5e>
	}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <prvResetNextTaskUnblockTime+0x38>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <prvResetNextTaskUnblockTime+0x3c>)
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295
 80050f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050f8:	e008      	b.n	800510c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <prvResetNextTaskUnblockTime+0x38>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a04      	ldr	r2, [pc, #16]	; (800511c <prvResetNextTaskUnblockTime+0x3c>)
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	24004f60 	.word	0x24004f60
 800511c:	24004fc8 	.word	0x24004fc8

08005120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <xTaskGetSchedulerState+0x34>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d102      	bne.n	8005134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800512e:	2301      	movs	r3, #1
 8005130:	607b      	str	r3, [r7, #4]
 8005132:	e008      	b.n	8005146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005134:	4b08      	ldr	r3, [pc, #32]	; (8005158 <xTaskGetSchedulerState+0x38>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d102      	bne.n	8005142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800513c:	2302      	movs	r3, #2
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	e001      	b.n	8005146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005142:	2300      	movs	r3, #0
 8005144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005146:	687b      	ldr	r3, [r7, #4]
	}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	24004fb4 	.word	0x24004fb4
 8005158:	24004fd0 	.word	0x24004fd0

0800515c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d056      	beq.n	8005220 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005172:	4b2e      	ldr	r3, [pc, #184]	; (800522c <xTaskPriorityDisinherit+0xd0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	429a      	cmp	r2, r3
 800517a:	d00a      	beq.n	8005192 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	60fb      	str	r3, [r7, #12]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	60bb      	str	r3, [r7, #8]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	1e5a      	subs	r2, r3, #1
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d02c      	beq.n	8005220 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d128      	bne.n	8005220 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe f9f6 	bl	80035c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <xTaskPriorityDisinherit+0xd4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d903      	bls.n	8005200 <xTaskPriorityDisinherit+0xa4>
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <xTaskPriorityDisinherit+0xd4>)
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <xTaskPriorityDisinherit+0xd8>)
 800520e:	441a      	add	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f7fe f977 	bl	800350a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800521c:	2301      	movs	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005220:	697b      	ldr	r3, [r7, #20]
	}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	24004ad4 	.word	0x24004ad4
 8005230:	24004fb0 	.word	0x24004fb0
 8005234:	24004ad8 	.word	0x24004ad8

08005238 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005242:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005248:	4b20      	ldr	r3, [pc, #128]	; (80052cc <prvAddCurrentTaskToDelayedList+0x94>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3304      	adds	r3, #4
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe f9b8 	bl	80035c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	d10a      	bne.n	8005272 <prvAddCurrentTaskToDelayedList+0x3a>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005262:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <prvAddCurrentTaskToDelayedList+0x94>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3304      	adds	r3, #4
 8005268:	4619      	mov	r1, r3
 800526a:	4819      	ldr	r0, [pc, #100]	; (80052d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800526c:	f7fe f94d 	bl	800350a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005270:	e026      	b.n	80052c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4413      	add	r3, r2
 8005278:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800527a:	4b14      	ldr	r3, [pc, #80]	; (80052cc <prvAddCurrentTaskToDelayedList+0x94>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	429a      	cmp	r2, r3
 8005288:	d209      	bcs.n	800529e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <prvAddCurrentTaskToDelayedList+0x94>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3304      	adds	r3, #4
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f7fe f95b 	bl	8003552 <vListInsert>
}
 800529c:	e010      	b.n	80052c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800529e:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <prvAddCurrentTaskToDelayedList+0x94>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7fe f951 	bl	8003552 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d202      	bcs.n	80052c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052ba:	4a08      	ldr	r2, [pc, #32]	; (80052dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	6013      	str	r3, [r2, #0]
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	24004fac 	.word	0x24004fac
 80052cc:	24004ad4 	.word	0x24004ad4
 80052d0:	24004f94 	.word	0x24004f94
 80052d4:	24004f64 	.word	0x24004f64
 80052d8:	24004f60 	.word	0x24004f60
 80052dc:	24004fc8 	.word	0x24004fc8

080052e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052ea:	f000 fb07 	bl	80058fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052ee:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <xTimerCreateTimerTask+0x80>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052fe:	1d3a      	adds	r2, r7, #4
 8005300:	f107 0108 	add.w	r1, r7, #8
 8005304:	f107 030c 	add.w	r3, r7, #12
 8005308:	4618      	mov	r0, r3
 800530a:	f7fd fecd 	bl	80030a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	9202      	str	r2, [sp, #8]
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	2302      	movs	r3, #2
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	2300      	movs	r3, #0
 800531e:	460a      	mov	r2, r1
 8005320:	4910      	ldr	r1, [pc, #64]	; (8005364 <xTimerCreateTimerTask+0x84>)
 8005322:	4811      	ldr	r0, [pc, #68]	; (8005368 <xTimerCreateTimerTask+0x88>)
 8005324:	f7ff f8b4 	bl	8004490 <xTaskCreateStatic>
 8005328:	4603      	mov	r3, r0
 800532a:	4a10      	ldr	r2, [pc, #64]	; (800536c <xTimerCreateTimerTask+0x8c>)
 800532c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <xTimerCreateTimerTask+0x8c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005336:	2301      	movs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	613b      	str	r3, [r7, #16]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005356:	697b      	ldr	r3, [r7, #20]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	24005004 	.word	0x24005004
 8005364:	0800679c 	.word	0x0800679c
 8005368:	080054a5 	.word	0x080054a5
 800536c:	24005008 	.word	0x24005008

08005370 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	623b      	str	r3, [r7, #32]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <xTimerGenericCommand+0x98>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d02a      	beq.n	80053fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b05      	cmp	r3, #5
 80053b6:	dc18      	bgt.n	80053ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053b8:	f7ff feb2 	bl	8005120 <xTaskGetSchedulerState>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d109      	bne.n	80053d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053c2:	4b11      	ldr	r3, [pc, #68]	; (8005408 <xTimerGenericCommand+0x98>)
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	f107 0110 	add.w	r1, r7, #16
 80053ca:	2300      	movs	r3, #0
 80053cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ce:	f7fe fc77 	bl	8003cc0 <xQueueGenericSend>
 80053d2:	6278      	str	r0, [r7, #36]	; 0x24
 80053d4:	e012      	b.n	80053fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <xTimerGenericCommand+0x98>)
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	f107 0110 	add.w	r1, r7, #16
 80053de:	2300      	movs	r3, #0
 80053e0:	2200      	movs	r2, #0
 80053e2:	f7fe fc6d 	bl	8003cc0 <xQueueGenericSend>
 80053e6:	6278      	str	r0, [r7, #36]	; 0x24
 80053e8:	e008      	b.n	80053fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <xTimerGenericCommand+0x98>)
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	f107 0110 	add.w	r1, r7, #16
 80053f2:	2300      	movs	r3, #0
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	f7fe fd61 	bl	8003ebc <xQueueGenericSendFromISR>
 80053fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3728      	adds	r7, #40	; 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	24005004 	.word	0x24005004

0800540c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005416:	4b22      	ldr	r3, [pc, #136]	; (80054a0 <prvProcessExpiredTimer+0x94>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3304      	adds	r3, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe f8cd 	bl	80035c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d022      	beq.n	800547e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	699a      	ldr	r2, [r3, #24]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	18d1      	adds	r1, r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	6978      	ldr	r0, [r7, #20]
 8005446:	f000 f8d1 	bl	80055ec <prvInsertTimerInActiveList>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01f      	beq.n	8005490 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005450:	2300      	movs	r3, #0
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	2300      	movs	r3, #0
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	2100      	movs	r1, #0
 800545a:	6978      	ldr	r0, [r7, #20]
 800545c:	f7ff ff88 	bl	8005370 <xTimerGenericCommand>
 8005460:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d113      	bne.n	8005490 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60fb      	str	r3, [r7, #12]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	b2da      	uxtb	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	6978      	ldr	r0, [r7, #20]
 8005496:	4798      	blx	r3
}
 8005498:	bf00      	nop
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	24004ffc 	.word	0x24004ffc

080054a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054ac:	f107 0308 	add.w	r3, r7, #8
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 f857 	bl	8005564 <prvGetNextExpireTime>
 80054b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4619      	mov	r1, r3
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f803 	bl	80054c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054c2:	f000 f8d5 	bl	8005670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054c6:	e7f1      	b.n	80054ac <prvTimerTask+0x8>

080054c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054d2:	f7ff fa39 	bl	8004948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054d6:	f107 0308 	add.w	r3, r7, #8
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f866 	bl	80055ac <prvSampleTimeNow>
 80054e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d130      	bne.n	800554a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <prvProcessTimerOrBlockTask+0x3c>
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d806      	bhi.n	8005504 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054f6:	f7ff fa35 	bl	8004964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff85 	bl	800540c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005502:	e024      	b.n	800554e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800550a:	4b13      	ldr	r3, [pc, #76]	; (8005558 <prvProcessTimerOrBlockTask+0x90>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <prvProcessTimerOrBlockTask+0x50>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <prvProcessTimerOrBlockTask+0x52>
 8005518:	2300      	movs	r3, #0
 800551a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <prvProcessTimerOrBlockTask+0x94>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	4619      	mov	r1, r3
 800552a:	f7fe ff7d 	bl	8004428 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800552e:	f7ff fa19 	bl	8004964 <xTaskResumeAll>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <prvProcessTimerOrBlockTask+0x98>)
 800553a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	f3bf 8f6f 	isb	sy
}
 8005548:	e001      	b.n	800554e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800554a:	f7ff fa0b 	bl	8004964 <xTaskResumeAll>
}
 800554e:	bf00      	nop
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	24005000 	.word	0x24005000
 800555c:	24005004 	.word	0x24005004
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <prvGetNextExpireTime+0x44>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <prvGetNextExpireTime+0x16>
 8005576:	2201      	movs	r2, #1
 8005578:	e000      	b.n	800557c <prvGetNextExpireTime+0x18>
 800557a:	2200      	movs	r2, #0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d105      	bne.n	8005594 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005588:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <prvGetNextExpireTime+0x44>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e001      	b.n	8005598 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005598:	68fb      	ldr	r3, [r7, #12]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	24004ffc 	.word	0x24004ffc

080055ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055b4:	f7ff fa74 	bl	8004aa0 <xTaskGetTickCount>
 80055b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <prvSampleTimeNow+0x3c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d205      	bcs.n	80055d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055c4:	f000 f936 	bl	8005834 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e002      	b.n	80055d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055d6:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <prvSampleTimeNow+0x3c>)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055dc:	68fb      	ldr	r3, [r7, #12]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	2400500c 	.word	0x2400500c

080055ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	d812      	bhi.n	8005638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad2      	subs	r2, r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	429a      	cmp	r2, r3
 800561e:	d302      	bcc.n	8005626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005620:	2301      	movs	r3, #1
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e01b      	b.n	800565e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005626:	4b10      	ldr	r3, [pc, #64]	; (8005668 <prvInsertTimerInActiveList+0x7c>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3304      	adds	r3, #4
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f7fd ff8e 	bl	8003552 <vListInsert>
 8005636:	e012      	b.n	800565e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d206      	bcs.n	800564e <prvInsertTimerInActiveList+0x62>
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	e007      	b.n	800565e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800564e:	4b07      	ldr	r3, [pc, #28]	; (800566c <prvInsertTimerInActiveList+0x80>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3304      	adds	r3, #4
 8005656:	4619      	mov	r1, r3
 8005658:	4610      	mov	r0, r2
 800565a:	f7fd ff7a 	bl	8003552 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800565e:	697b      	ldr	r3, [r7, #20]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	24005000 	.word	0x24005000
 800566c:	24004ffc 	.word	0x24004ffc

08005670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005676:	e0ca      	b.n	800580e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	da18      	bge.n	80056b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	3304      	adds	r3, #4
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	61fb      	str	r3, [r7, #28]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a6:	6850      	ldr	r0, [r2, #4]
 80056a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056aa:	6892      	ldr	r2, [r2, #8]
 80056ac:	4611      	mov	r1, r2
 80056ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f2c0 80aa 	blt.w	800580c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	3304      	adds	r3, #4
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd ff7b 	bl	80035c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ce:	463b      	mov	r3, r7
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff ff6b 	bl	80055ac <prvSampleTimeNow>
 80056d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b09      	cmp	r3, #9
 80056dc:	f200 8097 	bhi.w	800580e <prvProcessReceivedCommands+0x19e>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <prvProcessReceivedCommands+0x78>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005711 	.word	0x08005711
 80056f0:	08005711 	.word	0x08005711
 80056f4:	08005785 	.word	0x08005785
 80056f8:	08005799 	.word	0x08005799
 80056fc:	080057e3 	.word	0x080057e3
 8005700:	08005711 	.word	0x08005711
 8005704:	08005711 	.word	0x08005711
 8005708:	08005785 	.word	0x08005785
 800570c:	08005799 	.word	0x08005799
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	18d1      	adds	r1, r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005730:	f7ff ff5c 	bl	80055ec <prvInsertTimerInActiveList>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d069      	beq.n	800580e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005740:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05e      	beq.n	800580e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	441a      	add	r2, r3
 8005758:	2300      	movs	r3, #0
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	2300      	movs	r3, #0
 800575e:	2100      	movs	r1, #0
 8005760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005762:	f7ff fe05 	bl	8005370 <xTimerGenericCommand>
 8005766:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d14f      	bne.n	800580e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	61bb      	str	r3, [r7, #24]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	b2da      	uxtb	r2, r3
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005796:	e03a      	b.n	800580e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	617b      	str	r3, [r7, #20]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	18d1      	adds	r1, r2, r3
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057dc:	f7ff ff06 	bl	80055ec <prvInsertTimerInActiveList>
					break;
 80057e0:	e015      	b.n	800580e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d103      	bne.n	80057f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80057f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f2:	f7fd fd3f 	bl	8003274 <vPortFree>
 80057f6:	e00a      	b.n	800580e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	b2da      	uxtb	r2, r3
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800580a:	e000      	b.n	800580e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800580c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800580e:	4b08      	ldr	r3, [pc, #32]	; (8005830 <prvProcessReceivedCommands+0x1c0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	1d39      	adds	r1, r7, #4
 8005814:	2200      	movs	r2, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fbec 	bl	8003ff4 <xQueueReceive>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	f47f af2a 	bne.w	8005678 <prvProcessReceivedCommands+0x8>
	}
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	3730      	adds	r7, #48	; 0x30
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	24005004 	.word	0x24005004

08005834 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800583a:	e048      	b.n	80058ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800583c:	4b2d      	ldr	r3, [pc, #180]	; (80058f4 <prvSwitchTimerLists+0xc0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005846:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <prvSwitchTimerLists+0xc0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fd feb5 	bl	80035c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d02e      	beq.n	80058ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	429a      	cmp	r2, r3
 8005880:	d90e      	bls.n	80058a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800588e:	4b19      	ldr	r3, [pc, #100]	; (80058f4 <prvSwitchTimerLists+0xc0>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3304      	adds	r3, #4
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f7fd fe5a 	bl	8003552 <vListInsert>
 800589e:	e016      	b.n	80058ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058a0:	2300      	movs	r3, #0
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	2100      	movs	r1, #0
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff fd60 	bl	8005370 <xTimerGenericCommand>
 80058b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	603b      	str	r3, [r7, #0]
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <prvSwitchTimerLists+0xc0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1b1      	bne.n	800583c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <prvSwitchTimerLists+0xc0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <prvSwitchTimerLists+0xc4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <prvSwitchTimerLists+0xc0>)
 80058e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058e6:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <prvSwitchTimerLists+0xc4>)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	6013      	str	r3, [r2, #0]
}
 80058ec:	bf00      	nop
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	24004ffc 	.word	0x24004ffc
 80058f8:	24005000 	.word	0x24005000

080058fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005902:	f7fd ffb7 	bl	8003874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <prvCheckForValidListAndQueue+0x60>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d120      	bne.n	8005950 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800590e:	4814      	ldr	r0, [pc, #80]	; (8005960 <prvCheckForValidListAndQueue+0x64>)
 8005910:	f7fd fdce 	bl	80034b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005914:	4813      	ldr	r0, [pc, #76]	; (8005964 <prvCheckForValidListAndQueue+0x68>)
 8005916:	f7fd fdcb 	bl	80034b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <prvCheckForValidListAndQueue+0x6c>)
 800591c:	4a10      	ldr	r2, [pc, #64]	; (8005960 <prvCheckForValidListAndQueue+0x64>)
 800591e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005920:	4b12      	ldr	r3, [pc, #72]	; (800596c <prvCheckForValidListAndQueue+0x70>)
 8005922:	4a10      	ldr	r2, [pc, #64]	; (8005964 <prvCheckForValidListAndQueue+0x68>)
 8005924:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005926:	2300      	movs	r3, #0
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	4b11      	ldr	r3, [pc, #68]	; (8005970 <prvCheckForValidListAndQueue+0x74>)
 800592c:	4a11      	ldr	r2, [pc, #68]	; (8005974 <prvCheckForValidListAndQueue+0x78>)
 800592e:	2110      	movs	r1, #16
 8005930:	200a      	movs	r0, #10
 8005932:	f7fe f929 	bl	8003b88 <xQueueGenericCreateStatic>
 8005936:	4603      	mov	r3, r0
 8005938:	4a08      	ldr	r2, [pc, #32]	; (800595c <prvCheckForValidListAndQueue+0x60>)
 800593a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <prvCheckForValidListAndQueue+0x60>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <prvCheckForValidListAndQueue+0x60>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	490b      	ldr	r1, [pc, #44]	; (8005978 <prvCheckForValidListAndQueue+0x7c>)
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fd42 	bl	80043d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005950:	f7fd ffc0 	bl	80038d4 <vPortExitCritical>
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	24005004 	.word	0x24005004
 8005960:	24004fd4 	.word	0x24004fd4
 8005964:	24004fe8 	.word	0x24004fe8
 8005968:	24004ffc 	.word	0x24004ffc
 800596c:	24005000 	.word	0x24005000
 8005970:	240050b0 	.word	0x240050b0
 8005974:	24005010 	.word	0x24005010
 8005978:	080067a4 	.word	0x080067a4

0800597c <__libc_init_array>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	4d0d      	ldr	r5, [pc, #52]	; (80059b4 <__libc_init_array+0x38>)
 8005980:	4c0d      	ldr	r4, [pc, #52]	; (80059b8 <__libc_init_array+0x3c>)
 8005982:	1b64      	subs	r4, r4, r5
 8005984:	10a4      	asrs	r4, r4, #2
 8005986:	2600      	movs	r6, #0
 8005988:	42a6      	cmp	r6, r4
 800598a:	d109      	bne.n	80059a0 <__libc_init_array+0x24>
 800598c:	4d0b      	ldr	r5, [pc, #44]	; (80059bc <__libc_init_array+0x40>)
 800598e:	4c0c      	ldr	r4, [pc, #48]	; (80059c0 <__libc_init_array+0x44>)
 8005990:	f000 fee8 	bl	8006764 <_init>
 8005994:	1b64      	subs	r4, r4, r5
 8005996:	10a4      	asrs	r4, r4, #2
 8005998:	2600      	movs	r6, #0
 800599a:	42a6      	cmp	r6, r4
 800599c:	d105      	bne.n	80059aa <__libc_init_array+0x2e>
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a4:	4798      	blx	r3
 80059a6:	3601      	adds	r6, #1
 80059a8:	e7ee      	b.n	8005988 <__libc_init_array+0xc>
 80059aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ae:	4798      	blx	r3
 80059b0:	3601      	adds	r6, #1
 80059b2:	e7f2      	b.n	800599a <__libc_init_array+0x1e>
 80059b4:	08006a60 	.word	0x08006a60
 80059b8:	08006a60 	.word	0x08006a60
 80059bc:	08006a60 	.word	0x08006a60
 80059c0:	08006a64 	.word	0x08006a64

080059c4 <__retarget_lock_acquire_recursive>:
 80059c4:	4770      	bx	lr

080059c6 <__retarget_lock_release_recursive>:
 80059c6:	4770      	bx	lr

080059c8 <memcpy>:
 80059c8:	440a      	add	r2, r1
 80059ca:	4291      	cmp	r1, r2
 80059cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80059d0:	d100      	bne.n	80059d4 <memcpy+0xc>
 80059d2:	4770      	bx	lr
 80059d4:	b510      	push	{r4, lr}
 80059d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059de:	4291      	cmp	r1, r2
 80059e0:	d1f9      	bne.n	80059d6 <memcpy+0xe>
 80059e2:	bd10      	pop	{r4, pc}

080059e4 <memset>:
 80059e4:	4402      	add	r2, r0
 80059e6:	4603      	mov	r3, r0
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d100      	bne.n	80059ee <memset+0xa>
 80059ec:	4770      	bx	lr
 80059ee:	f803 1b01 	strb.w	r1, [r3], #1
 80059f2:	e7f9      	b.n	80059e8 <memset+0x4>

080059f4 <cleanup_glue>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	460c      	mov	r4, r1
 80059f8:	6809      	ldr	r1, [r1, #0]
 80059fa:	4605      	mov	r5, r0
 80059fc:	b109      	cbz	r1, 8005a02 <cleanup_glue+0xe>
 80059fe:	f7ff fff9 	bl	80059f4 <cleanup_glue>
 8005a02:	4621      	mov	r1, r4
 8005a04:	4628      	mov	r0, r5
 8005a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a0a:	f000 b869 	b.w	8005ae0 <_free_r>
	...

08005a10 <_reclaim_reent>:
 8005a10:	4b2c      	ldr	r3, [pc, #176]	; (8005ac4 <_reclaim_reent+0xb4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4283      	cmp	r3, r0
 8005a16:	b570      	push	{r4, r5, r6, lr}
 8005a18:	4604      	mov	r4, r0
 8005a1a:	d051      	beq.n	8005ac0 <_reclaim_reent+0xb0>
 8005a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a1e:	b143      	cbz	r3, 8005a32 <_reclaim_reent+0x22>
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d14a      	bne.n	8005abc <_reclaim_reent+0xac>
 8005a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a28:	6819      	ldr	r1, [r3, #0]
 8005a2a:	b111      	cbz	r1, 8005a32 <_reclaim_reent+0x22>
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 f857 	bl	8005ae0 <_free_r>
 8005a32:	6961      	ldr	r1, [r4, #20]
 8005a34:	b111      	cbz	r1, 8005a3c <_reclaim_reent+0x2c>
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 f852 	bl	8005ae0 <_free_r>
 8005a3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a3e:	b111      	cbz	r1, 8005a46 <_reclaim_reent+0x36>
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 f84d 	bl	8005ae0 <_free_r>
 8005a46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a48:	b111      	cbz	r1, 8005a50 <_reclaim_reent+0x40>
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 f848 	bl	8005ae0 <_free_r>
 8005a50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005a52:	b111      	cbz	r1, 8005a5a <_reclaim_reent+0x4a>
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 f843 	bl	8005ae0 <_free_r>
 8005a5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005a5c:	b111      	cbz	r1, 8005a64 <_reclaim_reent+0x54>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 f83e 	bl	8005ae0 <_free_r>
 8005a64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005a66:	b111      	cbz	r1, 8005a6e <_reclaim_reent+0x5e>
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 f839 	bl	8005ae0 <_free_r>
 8005a6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005a70:	b111      	cbz	r1, 8005a78 <_reclaim_reent+0x68>
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 f834 	bl	8005ae0 <_free_r>
 8005a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7a:	b111      	cbz	r1, 8005a82 <_reclaim_reent+0x72>
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 f82f 	bl	8005ae0 <_free_r>
 8005a82:	69a3      	ldr	r3, [r4, #24]
 8005a84:	b1e3      	cbz	r3, 8005ac0 <_reclaim_reent+0xb0>
 8005a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a88:	4620      	mov	r0, r4
 8005a8a:	4798      	blx	r3
 8005a8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005a8e:	b1b9      	cbz	r1, 8005ac0 <_reclaim_reent+0xb0>
 8005a90:	4620      	mov	r0, r4
 8005a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a96:	f7ff bfad 	b.w	80059f4 <cleanup_glue>
 8005a9a:	5949      	ldr	r1, [r1, r5]
 8005a9c:	b941      	cbnz	r1, 8005ab0 <_reclaim_reent+0xa0>
 8005a9e:	3504      	adds	r5, #4
 8005aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa2:	2d80      	cmp	r5, #128	; 0x80
 8005aa4:	68d9      	ldr	r1, [r3, #12]
 8005aa6:	d1f8      	bne.n	8005a9a <_reclaim_reent+0x8a>
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 f819 	bl	8005ae0 <_free_r>
 8005aae:	e7ba      	b.n	8005a26 <_reclaim_reent+0x16>
 8005ab0:	680e      	ldr	r6, [r1, #0]
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f814 	bl	8005ae0 <_free_r>
 8005ab8:	4631      	mov	r1, r6
 8005aba:	e7ef      	b.n	8005a9c <_reclaim_reent+0x8c>
 8005abc:	2500      	movs	r5, #0
 8005abe:	e7ef      	b.n	8005aa0 <_reclaim_reent+0x90>
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	bf00      	nop
 8005ac4:	24000014 	.word	0x24000014

08005ac8 <__malloc_lock>:
 8005ac8:	4801      	ldr	r0, [pc, #4]	; (8005ad0 <__malloc_lock+0x8>)
 8005aca:	f7ff bf7b 	b.w	80059c4 <__retarget_lock_acquire_recursive>
 8005ace:	bf00      	nop
 8005ad0:	24005100 	.word	0x24005100

08005ad4 <__malloc_unlock>:
 8005ad4:	4801      	ldr	r0, [pc, #4]	; (8005adc <__malloc_unlock+0x8>)
 8005ad6:	f7ff bf76 	b.w	80059c6 <__retarget_lock_release_recursive>
 8005ada:	bf00      	nop
 8005adc:	24005100 	.word	0x24005100

08005ae0 <_free_r>:
 8005ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ae2:	2900      	cmp	r1, #0
 8005ae4:	d044      	beq.n	8005b70 <_free_r+0x90>
 8005ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aea:	9001      	str	r0, [sp, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f1a1 0404 	sub.w	r4, r1, #4
 8005af2:	bfb8      	it	lt
 8005af4:	18e4      	addlt	r4, r4, r3
 8005af6:	f7ff ffe7 	bl	8005ac8 <__malloc_lock>
 8005afa:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <_free_r+0x94>)
 8005afc:	9801      	ldr	r0, [sp, #4]
 8005afe:	6813      	ldr	r3, [r2, #0]
 8005b00:	b933      	cbnz	r3, 8005b10 <_free_r+0x30>
 8005b02:	6063      	str	r3, [r4, #4]
 8005b04:	6014      	str	r4, [r2, #0]
 8005b06:	b003      	add	sp, #12
 8005b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b0c:	f7ff bfe2 	b.w	8005ad4 <__malloc_unlock>
 8005b10:	42a3      	cmp	r3, r4
 8005b12:	d908      	bls.n	8005b26 <_free_r+0x46>
 8005b14:	6825      	ldr	r5, [r4, #0]
 8005b16:	1961      	adds	r1, r4, r5
 8005b18:	428b      	cmp	r3, r1
 8005b1a:	bf01      	itttt	eq
 8005b1c:	6819      	ldreq	r1, [r3, #0]
 8005b1e:	685b      	ldreq	r3, [r3, #4]
 8005b20:	1949      	addeq	r1, r1, r5
 8005b22:	6021      	streq	r1, [r4, #0]
 8005b24:	e7ed      	b.n	8005b02 <_free_r+0x22>
 8005b26:	461a      	mov	r2, r3
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	b10b      	cbz	r3, 8005b30 <_free_r+0x50>
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	d9fa      	bls.n	8005b26 <_free_r+0x46>
 8005b30:	6811      	ldr	r1, [r2, #0]
 8005b32:	1855      	adds	r5, r2, r1
 8005b34:	42a5      	cmp	r5, r4
 8005b36:	d10b      	bne.n	8005b50 <_free_r+0x70>
 8005b38:	6824      	ldr	r4, [r4, #0]
 8005b3a:	4421      	add	r1, r4
 8005b3c:	1854      	adds	r4, r2, r1
 8005b3e:	42a3      	cmp	r3, r4
 8005b40:	6011      	str	r1, [r2, #0]
 8005b42:	d1e0      	bne.n	8005b06 <_free_r+0x26>
 8005b44:	681c      	ldr	r4, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	6053      	str	r3, [r2, #4]
 8005b4a:	4421      	add	r1, r4
 8005b4c:	6011      	str	r1, [r2, #0]
 8005b4e:	e7da      	b.n	8005b06 <_free_r+0x26>
 8005b50:	d902      	bls.n	8005b58 <_free_r+0x78>
 8005b52:	230c      	movs	r3, #12
 8005b54:	6003      	str	r3, [r0, #0]
 8005b56:	e7d6      	b.n	8005b06 <_free_r+0x26>
 8005b58:	6825      	ldr	r5, [r4, #0]
 8005b5a:	1961      	adds	r1, r4, r5
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	bf04      	itt	eq
 8005b60:	6819      	ldreq	r1, [r3, #0]
 8005b62:	685b      	ldreq	r3, [r3, #4]
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	bf04      	itt	eq
 8005b68:	1949      	addeq	r1, r1, r5
 8005b6a:	6021      	streq	r1, [r4, #0]
 8005b6c:	6054      	str	r4, [r2, #4]
 8005b6e:	e7ca      	b.n	8005b06 <_free_r+0x26>
 8005b70:	b003      	add	sp, #12
 8005b72:	bd30      	pop	{r4, r5, pc}
 8005b74:	24005104 	.word	0x24005104

08005b78 <sin>:
 8005b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b7a:	eeb0 7b40 	vmov.f64	d7, d0
 8005b7e:	ee17 3a90 	vmov	r3, s15
 8005b82:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <sin+0x90>)
 8005b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	dc07      	bgt.n	8005b9c <sin+0x24>
 8005b8c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8005c00 <sin+0x88>
 8005b90:	2000      	movs	r0, #0
 8005b92:	b005      	add	sp, #20
 8005b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b98:	f000 bc82 	b.w	80064a0 <__kernel_sin>
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <sin+0x94>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	dd04      	ble.n	8005bac <sin+0x34>
 8005ba2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8005ba6:	b005      	add	sp, #20
 8005ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bac:	4668      	mov	r0, sp
 8005bae:	f000 f82f 	bl	8005c10 <__ieee754_rem_pio2>
 8005bb2:	f000 0003 	and.w	r0, r0, #3
 8005bb6:	2801      	cmp	r0, #1
 8005bb8:	d00a      	beq.n	8005bd0 <sin+0x58>
 8005bba:	2802      	cmp	r0, #2
 8005bbc:	d00f      	beq.n	8005bde <sin+0x66>
 8005bbe:	b9c0      	cbnz	r0, 8005bf2 <sin+0x7a>
 8005bc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005bc4:	ed9d 0b00 	vldr	d0, [sp]
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f000 fc69 	bl	80064a0 <__kernel_sin>
 8005bce:	e7ea      	b.n	8005ba6 <sin+0x2e>
 8005bd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005bd4:	ed9d 0b00 	vldr	d0, [sp]
 8005bd8:	f000 f95e 	bl	8005e98 <__kernel_cos>
 8005bdc:	e7e3      	b.n	8005ba6 <sin+0x2e>
 8005bde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005be2:	ed9d 0b00 	vldr	d0, [sp]
 8005be6:	2001      	movs	r0, #1
 8005be8:	f000 fc5a 	bl	80064a0 <__kernel_sin>
 8005bec:	eeb1 0b40 	vneg.f64	d0, d0
 8005bf0:	e7d9      	b.n	8005ba6 <sin+0x2e>
 8005bf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005bf6:	ed9d 0b00 	vldr	d0, [sp]
 8005bfa:	f000 f94d 	bl	8005e98 <__kernel_cos>
 8005bfe:	e7f5      	b.n	8005bec <sin+0x74>
	...
 8005c08:	3fe921fb 	.word	0x3fe921fb
 8005c0c:	7fefffff 	.word	0x7fefffff

08005c10 <__ieee754_rem_pio2>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	eeb0 7b40 	vmov.f64	d7, d0
 8005c16:	ee17 5a90 	vmov	r5, s15
 8005c1a:	4b99      	ldr	r3, [pc, #612]	; (8005e80 <__ieee754_rem_pio2+0x270>)
 8005c1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005c20:	429e      	cmp	r6, r3
 8005c22:	b088      	sub	sp, #32
 8005c24:	4604      	mov	r4, r0
 8005c26:	dc07      	bgt.n	8005c38 <__ieee754_rem_pio2+0x28>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	ed84 0b00 	vstr	d0, [r4]
 8005c30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005c34:	2000      	movs	r0, #0
 8005c36:	e01b      	b.n	8005c70 <__ieee754_rem_pio2+0x60>
 8005c38:	4b92      	ldr	r3, [pc, #584]	; (8005e84 <__ieee754_rem_pio2+0x274>)
 8005c3a:	429e      	cmp	r6, r3
 8005c3c:	dc3b      	bgt.n	8005cb6 <__ieee754_rem_pio2+0xa6>
 8005c3e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8005e40 <__ieee754_rem_pio2+0x230>
 8005c48:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8005c4c:	dd19      	ble.n	8005c82 <__ieee754_rem_pio2+0x72>
 8005c4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8005c52:	429e      	cmp	r6, r3
 8005c54:	d00e      	beq.n	8005c74 <__ieee754_rem_pio2+0x64>
 8005c56:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8005e48 <__ieee754_rem_pio2+0x238>
 8005c5a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8005c5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8005c62:	ed84 5b00 	vstr	d5, [r4]
 8005c66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c6a:	ed84 7b02 	vstr	d7, [r4, #8]
 8005c6e:	2001      	movs	r0, #1
 8005c70:	b008      	add	sp, #32
 8005c72:	bd70      	pop	{r4, r5, r6, pc}
 8005c74:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8005e50 <__ieee754_rem_pio2+0x240>
 8005c78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c7c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8005e58 <__ieee754_rem_pio2+0x248>
 8005c80:	e7eb      	b.n	8005c5a <__ieee754_rem_pio2+0x4a>
 8005c82:	429e      	cmp	r6, r3
 8005c84:	ee30 7b06 	vadd.f64	d7, d0, d6
 8005c88:	d00e      	beq.n	8005ca8 <__ieee754_rem_pio2+0x98>
 8005c8a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8005e48 <__ieee754_rem_pio2+0x238>
 8005c8e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8005c92:	ee37 7b45 	vsub.f64	d7, d7, d5
 8005c96:	ed84 5b00 	vstr	d5, [r4]
 8005c9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca2:	ed84 7b02 	vstr	d7, [r4, #8]
 8005ca6:	e7e3      	b.n	8005c70 <__ieee754_rem_pio2+0x60>
 8005ca8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005e50 <__ieee754_rem_pio2+0x240>
 8005cac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cb0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005e58 <__ieee754_rem_pio2+0x248>
 8005cb4:	e7eb      	b.n	8005c8e <__ieee754_rem_pio2+0x7e>
 8005cb6:	4b74      	ldr	r3, [pc, #464]	; (8005e88 <__ieee754_rem_pio2+0x278>)
 8005cb8:	429e      	cmp	r6, r3
 8005cba:	dc70      	bgt.n	8005d9e <__ieee754_rem_pio2+0x18e>
 8005cbc:	f000 fc48 	bl	8006550 <fabs>
 8005cc0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005cc4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005e60 <__ieee754_rem_pio2+0x250>
 8005cc8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8005ccc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005cd0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8005cd4:	ee17 0a90 	vmov	r0, s15
 8005cd8:	eeb1 4b45 	vneg.f64	d4, d5
 8005cdc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8005e40 <__ieee754_rem_pio2+0x230>
 8005ce0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8005ce4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8005e48 <__ieee754_rem_pio2+0x238>
 8005ce8:	281f      	cmp	r0, #31
 8005cea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005cee:	ee30 6b47 	vsub.f64	d6, d0, d7
 8005cf2:	dc08      	bgt.n	8005d06 <__ieee754_rem_pio2+0xf6>
 8005cf4:	4b65      	ldr	r3, [pc, #404]	; (8005e8c <__ieee754_rem_pio2+0x27c>)
 8005cf6:	1e42      	subs	r2, r0, #1
 8005cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfc:	42b3      	cmp	r3, r6
 8005cfe:	d002      	beq.n	8005d06 <__ieee754_rem_pio2+0xf6>
 8005d00:	ed84 6b00 	vstr	d6, [r4]
 8005d04:	e026      	b.n	8005d54 <__ieee754_rem_pio2+0x144>
 8005d06:	ee16 3a90 	vmov	r3, s13
 8005d0a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8005d0e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	ea4f 5226 	mov.w	r2, r6, asr #20
 8005d18:	ddf2      	ble.n	8005d00 <__ieee754_rem_pio2+0xf0>
 8005d1a:	eeb0 6b40 	vmov.f64	d6, d0
 8005d1e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8005e50 <__ieee754_rem_pio2+0x240>
 8005d22:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8005e58 <__ieee754_rem_pio2+0x248>
 8005d26:	eea4 6b07 	vfma.f64	d6, d4, d7
 8005d2a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8005d2e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8005d32:	eeb0 7b40 	vmov.f64	d7, d0
 8005d36:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8005d3a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8005d3e:	ee13 3a90 	vmov	r3, s7
 8005d42:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b31      	cmp	r3, #49	; 0x31
 8005d4a:	dc17      	bgt.n	8005d7c <__ieee754_rem_pio2+0x16c>
 8005d4c:	eeb0 0b46 	vmov.f64	d0, d6
 8005d50:	ed84 3b00 	vstr	d3, [r4]
 8005d54:	ed94 6b00 	vldr	d6, [r4]
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8005d5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8005d62:	ed84 0b02 	vstr	d0, [r4, #8]
 8005d66:	da83      	bge.n	8005c70 <__ieee754_rem_pio2+0x60>
 8005d68:	eeb1 6b46 	vneg.f64	d6, d6
 8005d6c:	eeb1 0b40 	vneg.f64	d0, d0
 8005d70:	ed84 6b00 	vstr	d6, [r4]
 8005d74:	ed84 0b02 	vstr	d0, [r4, #8]
 8005d78:	4240      	negs	r0, r0
 8005d7a:	e779      	b.n	8005c70 <__ieee754_rem_pio2+0x60>
 8005d7c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8005e68 <__ieee754_rem_pio2+0x258>
 8005d80:	eeb0 0b46 	vmov.f64	d0, d6
 8005d84:	eea4 0b03 	vfma.f64	d0, d4, d3
 8005d88:	ee36 7b40 	vsub.f64	d7, d6, d0
 8005d8c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8005e70 <__ieee754_rem_pio2+0x260>
 8005d90:	eea4 7b03 	vfma.f64	d7, d4, d3
 8005d94:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8005d98:	ee30 6b47 	vsub.f64	d6, d0, d7
 8005d9c:	e7b0      	b.n	8005d00 <__ieee754_rem_pio2+0xf0>
 8005d9e:	4b3c      	ldr	r3, [pc, #240]	; (8005e90 <__ieee754_rem_pio2+0x280>)
 8005da0:	429e      	cmp	r6, r3
 8005da2:	dd06      	ble.n	8005db2 <__ieee754_rem_pio2+0x1a2>
 8005da4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8005da8:	ed80 7b02 	vstr	d7, [r0, #8]
 8005dac:	ed80 7b00 	vstr	d7, [r0]
 8005db0:	e740      	b.n	8005c34 <__ieee754_rem_pio2+0x24>
 8005db2:	1532      	asrs	r2, r6, #20
 8005db4:	ee10 0a10 	vmov	r0, s0
 8005db8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8005dbc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8005dc0:	ec41 0b17 	vmov	d7, r0, r1
 8005dc4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8005dc8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8005e78 <__ieee754_rem_pio2+0x268>
 8005dcc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8005dd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005dd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005ddc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8005de0:	a902      	add	r1, sp, #8
 8005de2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8005de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dea:	ed8d 6b04 	vstr	d6, [sp, #16]
 8005dee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005df2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005df6:	2603      	movs	r6, #3
 8005df8:	4608      	mov	r0, r1
 8005dfa:	ed91 7b04 	vldr	d7, [r1, #16]
 8005dfe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e06:	4633      	mov	r3, r6
 8005e08:	f1a1 0108 	sub.w	r1, r1, #8
 8005e0c:	f106 36ff 	add.w	r6, r6, #4294967295
 8005e10:	d0f3      	beq.n	8005dfa <__ieee754_rem_pio2+0x1ea>
 8005e12:	4920      	ldr	r1, [pc, #128]	; (8005e94 <__ieee754_rem_pio2+0x284>)
 8005e14:	9101      	str	r1, [sp, #4]
 8005e16:	2102      	movs	r1, #2
 8005e18:	9100      	str	r1, [sp, #0]
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	f000 f8a8 	bl	8005f70 <__kernel_rem_pio2>
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	f6bf af25 	bge.w	8005c70 <__ieee754_rem_pio2+0x60>
 8005e26:	ed94 7b00 	vldr	d7, [r4]
 8005e2a:	eeb1 7b47 	vneg.f64	d7, d7
 8005e2e:	ed84 7b00 	vstr	d7, [r4]
 8005e32:	ed94 7b02 	vldr	d7, [r4, #8]
 8005e36:	eeb1 7b47 	vneg.f64	d7, d7
 8005e3a:	ed84 7b02 	vstr	d7, [r4, #8]
 8005e3e:	e79b      	b.n	8005d78 <__ieee754_rem_pio2+0x168>
 8005e40:	54400000 	.word	0x54400000
 8005e44:	3ff921fb 	.word	0x3ff921fb
 8005e48:	1a626331 	.word	0x1a626331
 8005e4c:	3dd0b461 	.word	0x3dd0b461
 8005e50:	1a600000 	.word	0x1a600000
 8005e54:	3dd0b461 	.word	0x3dd0b461
 8005e58:	2e037073 	.word	0x2e037073
 8005e5c:	3ba3198a 	.word	0x3ba3198a
 8005e60:	6dc9c883 	.word	0x6dc9c883
 8005e64:	3fe45f30 	.word	0x3fe45f30
 8005e68:	2e000000 	.word	0x2e000000
 8005e6c:	3ba3198a 	.word	0x3ba3198a
 8005e70:	252049c1 	.word	0x252049c1
 8005e74:	397b839a 	.word	0x397b839a
 8005e78:	00000000 	.word	0x00000000
 8005e7c:	41700000 	.word	0x41700000
 8005e80:	3fe921fb 	.word	0x3fe921fb
 8005e84:	4002d97b 	.word	0x4002d97b
 8005e88:	413921fb 	.word	0x413921fb
 8005e8c:	08006888 	.word	0x08006888
 8005e90:	7fefffff 	.word	0x7fefffff
 8005e94:	08006908 	.word	0x08006908

08005e98 <__kernel_cos>:
 8005e98:	ee10 1a90 	vmov	r1, s1
 8005e9c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8005ea0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005ea4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8005ea8:	da05      	bge.n	8005eb6 <__kernel_cos+0x1e>
 8005eaa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8005eae:	ee17 3a90 	vmov	r3, s15
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d03d      	beq.n	8005f32 <__kernel_cos+0x9a>
 8005eb6:	ee20 3b00 	vmul.f64	d3, d0, d0
 8005eba:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8005f38 <__kernel_cos+0xa0>
 8005ebe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005f40 <__kernel_cos+0xa8>
 8005ec2:	eea3 6b07 	vfma.f64	d6, d3, d7
 8005ec6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8005f48 <__kernel_cos+0xb0>
 8005eca:	eea6 7b03 	vfma.f64	d7, d6, d3
 8005ece:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005f50 <__kernel_cos+0xb8>
 8005ed2:	eea7 6b03 	vfma.f64	d6, d7, d3
 8005ed6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8005f58 <__kernel_cos+0xc0>
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <__kernel_cos+0xd0>)
 8005edc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8005ee0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8005f60 <__kernel_cos+0xc8>
 8005ee4:	4299      	cmp	r1, r3
 8005ee6:	eea7 6b03 	vfma.f64	d6, d7, d3
 8005eea:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005eee:	ee26 5b03 	vmul.f64	d5, d6, d3
 8005ef2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8005ef6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8005efa:	eea3 6b05 	vfma.f64	d6, d3, d5
 8005efe:	dc04      	bgt.n	8005f0a <__kernel_cos+0x72>
 8005f00:	ee37 6b46 	vsub.f64	d6, d7, d6
 8005f04:	ee34 0b46 	vsub.f64	d0, d4, d6
 8005f08:	4770      	bx	lr
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <__kernel_cos+0xd4>)
 8005f0c:	4299      	cmp	r1, r3
 8005f0e:	dc0d      	bgt.n	8005f2c <__kernel_cos+0x94>
 8005f10:	2200      	movs	r2, #0
 8005f12:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8005f16:	ec43 2b15 	vmov	d5, r2, r3
 8005f1a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8005f1e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8005f22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f26:	ee30 0b47 	vsub.f64	d0, d0, d7
 8005f2a:	4770      	bx	lr
 8005f2c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8005f30:	e7f3      	b.n	8005f1a <__kernel_cos+0x82>
 8005f32:	eeb0 0b44 	vmov.f64	d0, d4
 8005f36:	4770      	bx	lr
 8005f38:	be8838d4 	.word	0xbe8838d4
 8005f3c:	bda8fae9 	.word	0xbda8fae9
 8005f40:	bdb4b1c4 	.word	0xbdb4b1c4
 8005f44:	3e21ee9e 	.word	0x3e21ee9e
 8005f48:	809c52ad 	.word	0x809c52ad
 8005f4c:	be927e4f 	.word	0xbe927e4f
 8005f50:	19cb1590 	.word	0x19cb1590
 8005f54:	3efa01a0 	.word	0x3efa01a0
 8005f58:	16c15177 	.word	0x16c15177
 8005f5c:	bf56c16c 	.word	0xbf56c16c
 8005f60:	5555554c 	.word	0x5555554c
 8005f64:	3fa55555 	.word	0x3fa55555
 8005f68:	3fd33332 	.word	0x3fd33332
 8005f6c:	3fe90000 	.word	0x3fe90000

08005f70 <__kernel_rem_pio2>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	ed2d 8b06 	vpush	{d8-d10}
 8005f78:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8005f7c:	460f      	mov	r7, r1
 8005f7e:	9002      	str	r0, [sp, #8]
 8005f80:	49c5      	ldr	r1, [pc, #788]	; (8006298 <__kernel_rem_pio2+0x328>)
 8005f82:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8005f84:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8005f88:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8005f8c:	9301      	str	r3, [sp, #4]
 8005f8e:	f112 0f14 	cmn.w	r2, #20
 8005f92:	bfa8      	it	ge
 8005f94:	2018      	movge	r0, #24
 8005f96:	f103 31ff 	add.w	r1, r3, #4294967295
 8005f9a:	bfb8      	it	lt
 8005f9c:	2000      	movlt	r0, #0
 8005f9e:	f06f 0417 	mvn.w	r4, #23
 8005fa2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8006280 <__kernel_rem_pio2+0x310>
 8005fa6:	bfa4      	itt	ge
 8005fa8:	f1a2 0a03 	subge.w	sl, r2, #3
 8005fac:	fb9a f0f0 	sdivge	r0, sl, r0
 8005fb0:	fb00 4404 	mla	r4, r0, r4, r4
 8005fb4:	1a46      	subs	r6, r0, r1
 8005fb6:	4414      	add	r4, r2
 8005fb8:	eb09 0c01 	add.w	ip, r9, r1
 8005fbc:	ad1a      	add	r5, sp, #104	; 0x68
 8005fbe:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4562      	cmp	r2, ip
 8005fc6:	dd10      	ble.n	8005fea <__kernel_rem_pio2+0x7a>
 8005fc8:	9a01      	ldr	r2, [sp, #4]
 8005fca:	ab1a      	add	r3, sp, #104	; 0x68
 8005fcc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005fd0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8005fd4:	f04f 0c00 	mov.w	ip, #0
 8005fd8:	45cc      	cmp	ip, r9
 8005fda:	dc26      	bgt.n	800602a <__kernel_rem_pio2+0xba>
 8005fdc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8006280 <__kernel_rem_pio2+0x310>
 8005fe0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	2500      	movs	r5, #0
 8005fe8:	e015      	b.n	8006016 <__kernel_rem_pio2+0xa6>
 8005fea:	42d6      	cmn	r6, r2
 8005fec:	d409      	bmi.n	8006002 <__kernel_rem_pio2+0x92>
 8005fee:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ffa:	eca5 7b02 	vstmia	r5!, {d7}
 8005ffe:	3201      	adds	r2, #1
 8006000:	e7e0      	b.n	8005fc4 <__kernel_rem_pio2+0x54>
 8006002:	eeb0 7b46 	vmov.f64	d7, d6
 8006006:	e7f8      	b.n	8005ffa <__kernel_rem_pio2+0x8a>
 8006008:	ecb8 5b02 	vldmia	r8!, {d5}
 800600c:	ed96 6b00 	vldr	d6, [r6]
 8006010:	3501      	adds	r5, #1
 8006012:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006016:	428d      	cmp	r5, r1
 8006018:	f1a6 0608 	sub.w	r6, r6, #8
 800601c:	ddf4      	ble.n	8006008 <__kernel_rem_pio2+0x98>
 800601e:	ecaa 7b02 	vstmia	sl!, {d7}
 8006022:	f10c 0c01 	add.w	ip, ip, #1
 8006026:	3208      	adds	r2, #8
 8006028:	e7d6      	b.n	8005fd8 <__kernel_rem_pio2+0x68>
 800602a:	ab06      	add	r3, sp, #24
 800602c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8006288 <__kernel_rem_pio2+0x318>
 8006030:	ed9f ab97 	vldr	d10, [pc, #604]	; 8006290 <__kernel_rem_pio2+0x320>
 8006034:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006038:	9303      	str	r3, [sp, #12]
 800603a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800603e:	464d      	mov	r5, r9
 8006040:	00eb      	lsls	r3, r5, #3
 8006042:	9304      	str	r3, [sp, #16]
 8006044:	ab92      	add	r3, sp, #584	; 0x248
 8006046:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800604a:	f10d 0b18 	add.w	fp, sp, #24
 800604e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8006050:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8006054:	465e      	mov	r6, fp
 8006056:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800605a:	4628      	mov	r0, r5
 800605c:	2800      	cmp	r0, #0
 800605e:	f1a2 0208 	sub.w	r2, r2, #8
 8006062:	dc4c      	bgt.n	80060fe <__kernel_rem_pio2+0x18e>
 8006064:	4620      	mov	r0, r4
 8006066:	9105      	str	r1, [sp, #20]
 8006068:	f000 faf2 	bl	8006650 <scalbn>
 800606c:	eeb0 8b40 	vmov.f64	d8, d0
 8006070:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006074:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006078:	f000 fa76 	bl	8006568 <floor>
 800607c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006080:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006084:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006088:	2c00      	cmp	r4, #0
 800608a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800608e:	ee17 8a90 	vmov	r8, s15
 8006092:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006096:	9905      	ldr	r1, [sp, #20]
 8006098:	dd43      	ble.n	8006122 <__kernel_rem_pio2+0x1b2>
 800609a:	1e68      	subs	r0, r5, #1
 800609c:	ab06      	add	r3, sp, #24
 800609e:	f1c4 0c18 	rsb	ip, r4, #24
 80060a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80060a6:	fa46 f20c 	asr.w	r2, r6, ip
 80060aa:	4490      	add	r8, r2
 80060ac:	fa02 f20c 	lsl.w	r2, r2, ip
 80060b0:	1ab6      	subs	r6, r6, r2
 80060b2:	f1c4 0217 	rsb	r2, r4, #23
 80060b6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80060ba:	4116      	asrs	r6, r2
 80060bc:	2e00      	cmp	r6, #0
 80060be:	dd3f      	ble.n	8006140 <__kernel_rem_pio2+0x1d0>
 80060c0:	f04f 0c00 	mov.w	ip, #0
 80060c4:	f108 0801 	add.w	r8, r8, #1
 80060c8:	4660      	mov	r0, ip
 80060ca:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80060ce:	4565      	cmp	r5, ip
 80060d0:	dc6e      	bgt.n	80061b0 <__kernel_rem_pio2+0x240>
 80060d2:	2c00      	cmp	r4, #0
 80060d4:	dd04      	ble.n	80060e0 <__kernel_rem_pio2+0x170>
 80060d6:	2c01      	cmp	r4, #1
 80060d8:	d07f      	beq.n	80061da <__kernel_rem_pio2+0x26a>
 80060da:	2c02      	cmp	r4, #2
 80060dc:	f000 8087 	beq.w	80061ee <__kernel_rem_pio2+0x27e>
 80060e0:	2e02      	cmp	r6, #2
 80060e2:	d12d      	bne.n	8006140 <__kernel_rem_pio2+0x1d0>
 80060e4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80060e8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80060ec:	b340      	cbz	r0, 8006140 <__kernel_rem_pio2+0x1d0>
 80060ee:	4620      	mov	r0, r4
 80060f0:	9105      	str	r1, [sp, #20]
 80060f2:	f000 faad 	bl	8006650 <scalbn>
 80060f6:	9905      	ldr	r1, [sp, #20]
 80060f8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80060fc:	e020      	b.n	8006140 <__kernel_rem_pio2+0x1d0>
 80060fe:	ee20 7b09 	vmul.f64	d7, d0, d9
 8006102:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006106:	3801      	subs	r0, #1
 8006108:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800610c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8006110:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006114:	eca6 0a01 	vstmia	r6!, {s0}
 8006118:	ed92 0b00 	vldr	d0, [r2]
 800611c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8006120:	e79c      	b.n	800605c <__kernel_rem_pio2+0xec>
 8006122:	d105      	bne.n	8006130 <__kernel_rem_pio2+0x1c0>
 8006124:	1e6a      	subs	r2, r5, #1
 8006126:	ab06      	add	r3, sp, #24
 8006128:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800612c:	15f6      	asrs	r6, r6, #23
 800612e:	e7c5      	b.n	80060bc <__kernel_rem_pio2+0x14c>
 8006130:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006134:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613c:	da36      	bge.n	80061ac <__kernel_rem_pio2+0x23c>
 800613e:	2600      	movs	r6, #0
 8006140:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006148:	f040 80aa 	bne.w	80062a0 <__kernel_rem_pio2+0x330>
 800614c:	f105 3bff 	add.w	fp, r5, #4294967295
 8006150:	4658      	mov	r0, fp
 8006152:	2200      	movs	r2, #0
 8006154:	4548      	cmp	r0, r9
 8006156:	da52      	bge.n	80061fe <__kernel_rem_pio2+0x28e>
 8006158:	2a00      	cmp	r2, #0
 800615a:	f000 8081 	beq.w	8006260 <__kernel_rem_pio2+0x2f0>
 800615e:	ab06      	add	r3, sp, #24
 8006160:	3c18      	subs	r4, #24
 8006162:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8087 	beq.w	800627a <__kernel_rem_pio2+0x30a>
 800616c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fa6d 	bl	8006650 <scalbn>
 8006176:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800617a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8006288 <__kernel_rem_pio2+0x318>
 800617e:	a96a      	add	r1, sp, #424	; 0x1a8
 8006180:	f103 0208 	add.w	r2, r3, #8
 8006184:	1888      	adds	r0, r1, r2
 8006186:	4659      	mov	r1, fp
 8006188:	2900      	cmp	r1, #0
 800618a:	f280 80b7 	bge.w	80062fc <__kernel_rem_pio2+0x38c>
 800618e:	4659      	mov	r1, fp
 8006190:	2900      	cmp	r1, #0
 8006192:	f2c0 80d5 	blt.w	8006340 <__kernel_rem_pio2+0x3d0>
 8006196:	a86a      	add	r0, sp, #424	; 0x1a8
 8006198:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800619c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8006280 <__kernel_rem_pio2+0x310>
 80061a0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800629c <__kernel_rem_pio2+0x32c>
 80061a4:	2400      	movs	r4, #0
 80061a6:	ebab 0001 	sub.w	r0, fp, r1
 80061aa:	e0be      	b.n	800632a <__kernel_rem_pio2+0x3ba>
 80061ac:	2602      	movs	r6, #2
 80061ae:	e787      	b.n	80060c0 <__kernel_rem_pio2+0x150>
 80061b0:	f8db 2000 	ldr.w	r2, [fp]
 80061b4:	b958      	cbnz	r0, 80061ce <__kernel_rem_pio2+0x25e>
 80061b6:	b122      	cbz	r2, 80061c2 <__kernel_rem_pio2+0x252>
 80061b8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80061bc:	f8cb 2000 	str.w	r2, [fp]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f10c 0c01 	add.w	ip, ip, #1
 80061c6:	f10b 0b04 	add.w	fp, fp, #4
 80061ca:	4610      	mov	r0, r2
 80061cc:	e77f      	b.n	80060ce <__kernel_rem_pio2+0x15e>
 80061ce:	ebae 0202 	sub.w	r2, lr, r2
 80061d2:	f8cb 2000 	str.w	r2, [fp]
 80061d6:	4602      	mov	r2, r0
 80061d8:	e7f3      	b.n	80061c2 <__kernel_rem_pio2+0x252>
 80061da:	f105 3cff 	add.w	ip, r5, #4294967295
 80061de:	ab06      	add	r3, sp, #24
 80061e0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80061e4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80061e8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80061ec:	e778      	b.n	80060e0 <__kernel_rem_pio2+0x170>
 80061ee:	f105 3cff 	add.w	ip, r5, #4294967295
 80061f2:	ab06      	add	r3, sp, #24
 80061f4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80061f8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80061fc:	e7f4      	b.n	80061e8 <__kernel_rem_pio2+0x278>
 80061fe:	ab06      	add	r3, sp, #24
 8006200:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006204:	3801      	subs	r0, #1
 8006206:	431a      	orrs	r2, r3
 8006208:	e7a4      	b.n	8006154 <__kernel_rem_pio2+0x1e4>
 800620a:	f10c 0c01 	add.w	ip, ip, #1
 800620e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8006212:	2800      	cmp	r0, #0
 8006214:	d0f9      	beq.n	800620a <__kernel_rem_pio2+0x29a>
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800621c:	eb0d 0203 	add.w	r2, sp, r3
 8006220:	9b01      	ldr	r3, [sp, #4]
 8006222:	18e8      	adds	r0, r5, r3
 8006224:	ab1a      	add	r3, sp, #104	; 0x68
 8006226:	1c6e      	adds	r6, r5, #1
 8006228:	3a98      	subs	r2, #152	; 0x98
 800622a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800622e:	4465      	add	r5, ip
 8006230:	42b5      	cmp	r5, r6
 8006232:	f6ff af05 	blt.w	8006040 <__kernel_rem_pio2+0xd0>
 8006236:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800623a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006246:	f04f 0c00 	mov.w	ip, #0
 800624a:	eca0 7b02 	vstmia	r0!, {d7}
 800624e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8006280 <__kernel_rem_pio2+0x310>
 8006252:	4680      	mov	r8, r0
 8006254:	458c      	cmp	ip, r1
 8006256:	dd07      	ble.n	8006268 <__kernel_rem_pio2+0x2f8>
 8006258:	eca2 7b02 	vstmia	r2!, {d7}
 800625c:	3601      	adds	r6, #1
 800625e:	e7e7      	b.n	8006230 <__kernel_rem_pio2+0x2c0>
 8006260:	9a03      	ldr	r2, [sp, #12]
 8006262:	f04f 0c01 	mov.w	ip, #1
 8006266:	e7d2      	b.n	800620e <__kernel_rem_pio2+0x29e>
 8006268:	ecbe 5b02 	vldmia	lr!, {d5}
 800626c:	ed38 6b02 	vldmdb	r8!, {d6}
 8006270:	f10c 0c01 	add.w	ip, ip, #1
 8006274:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006278:	e7ec      	b.n	8006254 <__kernel_rem_pio2+0x2e4>
 800627a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800627e:	e76e      	b.n	800615e <__kernel_rem_pio2+0x1ee>
	...
 800628c:	3e700000 	.word	0x3e700000
 8006290:	00000000 	.word	0x00000000
 8006294:	41700000 	.word	0x41700000
 8006298:	08006a50 	.word	0x08006a50
 800629c:	08006a10 	.word	0x08006a10
 80062a0:	4260      	negs	r0, r4
 80062a2:	eeb0 0b48 	vmov.f64	d0, d8
 80062a6:	f000 f9d3 	bl	8006650 <scalbn>
 80062aa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006488 <__kernel_rem_pio2+0x518>
 80062ae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80062b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b6:	db18      	blt.n	80062ea <__kernel_rem_pio2+0x37a>
 80062b8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8006490 <__kernel_rem_pio2+0x520>
 80062bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80062c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80062c4:	aa06      	add	r2, sp, #24
 80062c6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80062ca:	eea5 0b46 	vfms.f64	d0, d5, d6
 80062ce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80062d2:	f105 0b01 	add.w	fp, r5, #1
 80062d6:	ee10 3a10 	vmov	r3, s0
 80062da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80062de:	ee17 3a10 	vmov	r3, s14
 80062e2:	3418      	adds	r4, #24
 80062e4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80062e8:	e740      	b.n	800616c <__kernel_rem_pio2+0x1fc>
 80062ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80062ee:	aa06      	add	r2, sp, #24
 80062f0:	ee10 3a10 	vmov	r3, s0
 80062f4:	46ab      	mov	fp, r5
 80062f6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80062fa:	e737      	b.n	800616c <__kernel_rem_pio2+0x1fc>
 80062fc:	ac06      	add	r4, sp, #24
 80062fe:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8006302:	9401      	str	r4, [sp, #4]
 8006304:	ee07 4a90 	vmov	s15, r4
 8006308:	3901      	subs	r1, #1
 800630a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800630e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8006312:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006316:	ed20 7b02 	vstmdb	r0!, {d7}
 800631a:	e735      	b.n	8006188 <__kernel_rem_pio2+0x218>
 800631c:	ecbc 5b02 	vldmia	ip!, {d5}
 8006320:	ecb5 6b02 	vldmia	r5!, {d6}
 8006324:	3401      	adds	r4, #1
 8006326:	eea5 7b06 	vfma.f64	d7, d5, d6
 800632a:	454c      	cmp	r4, r9
 800632c:	dc01      	bgt.n	8006332 <__kernel_rem_pio2+0x3c2>
 800632e:	4284      	cmp	r4, r0
 8006330:	ddf4      	ble.n	800631c <__kernel_rem_pio2+0x3ac>
 8006332:	ac42      	add	r4, sp, #264	; 0x108
 8006334:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8006338:	ed80 7b00 	vstr	d7, [r0]
 800633c:	3901      	subs	r1, #1
 800633e:	e727      	b.n	8006190 <__kernel_rem_pio2+0x220>
 8006340:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006342:	2902      	cmp	r1, #2
 8006344:	dc0a      	bgt.n	800635c <__kernel_rem_pio2+0x3ec>
 8006346:	2900      	cmp	r1, #0
 8006348:	dc2c      	bgt.n	80063a4 <__kernel_rem_pio2+0x434>
 800634a:	d045      	beq.n	80063d8 <__kernel_rem_pio2+0x468>
 800634c:	f008 0007 	and.w	r0, r8, #7
 8006350:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006354:	ecbd 8b06 	vpop	{d8-d10}
 8006358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800635e:	2a03      	cmp	r2, #3
 8006360:	d1f4      	bne.n	800634c <__kernel_rem_pio2+0x3dc>
 8006362:	aa42      	add	r2, sp, #264	; 0x108
 8006364:	4413      	add	r3, r2
 8006366:	461a      	mov	r2, r3
 8006368:	4619      	mov	r1, r3
 800636a:	4658      	mov	r0, fp
 800636c:	2800      	cmp	r0, #0
 800636e:	f1a1 0108 	sub.w	r1, r1, #8
 8006372:	dc54      	bgt.n	800641e <__kernel_rem_pio2+0x4ae>
 8006374:	4659      	mov	r1, fp
 8006376:	2901      	cmp	r1, #1
 8006378:	f1a2 0208 	sub.w	r2, r2, #8
 800637c:	dc5f      	bgt.n	800643e <__kernel_rem_pio2+0x4ce>
 800637e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8006498 <__kernel_rem_pio2+0x528>
 8006382:	3308      	adds	r3, #8
 8006384:	f1bb 0f01 	cmp.w	fp, #1
 8006388:	dc69      	bgt.n	800645e <__kernel_rem_pio2+0x4ee>
 800638a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800638e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8006392:	2e00      	cmp	r6, #0
 8006394:	d16a      	bne.n	800646c <__kernel_rem_pio2+0x4fc>
 8006396:	ed87 5b00 	vstr	d5, [r7]
 800639a:	ed87 6b02 	vstr	d6, [r7, #8]
 800639e:	ed87 7b04 	vstr	d7, [r7, #16]
 80063a2:	e7d3      	b.n	800634c <__kernel_rem_pio2+0x3dc>
 80063a4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8006498 <__kernel_rem_pio2+0x528>
 80063a8:	ab42      	add	r3, sp, #264	; 0x108
 80063aa:	441a      	add	r2, r3
 80063ac:	465b      	mov	r3, fp
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da26      	bge.n	8006400 <__kernel_rem_pio2+0x490>
 80063b2:	b35e      	cbz	r6, 800640c <__kernel_rem_pio2+0x49c>
 80063b4:	eeb1 7b46 	vneg.f64	d7, d6
 80063b8:	ed87 7b00 	vstr	d7, [r7]
 80063bc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80063c0:	aa44      	add	r2, sp, #272	; 0x110
 80063c2:	2301      	movs	r3, #1
 80063c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063c8:	459b      	cmp	fp, r3
 80063ca:	da22      	bge.n	8006412 <__kernel_rem_pio2+0x4a2>
 80063cc:	b10e      	cbz	r6, 80063d2 <__kernel_rem_pio2+0x462>
 80063ce:	eeb1 7b47 	vneg.f64	d7, d7
 80063d2:	ed87 7b02 	vstr	d7, [r7, #8]
 80063d6:	e7b9      	b.n	800634c <__kernel_rem_pio2+0x3dc>
 80063d8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006498 <__kernel_rem_pio2+0x528>
 80063dc:	ab42      	add	r3, sp, #264	; 0x108
 80063de:	441a      	add	r2, r3
 80063e0:	f1bb 0f00 	cmp.w	fp, #0
 80063e4:	da05      	bge.n	80063f2 <__kernel_rem_pio2+0x482>
 80063e6:	b10e      	cbz	r6, 80063ec <__kernel_rem_pio2+0x47c>
 80063e8:	eeb1 7b47 	vneg.f64	d7, d7
 80063ec:	ed87 7b00 	vstr	d7, [r7]
 80063f0:	e7ac      	b.n	800634c <__kernel_rem_pio2+0x3dc>
 80063f2:	ed32 6b02 	vldmdb	r2!, {d6}
 80063f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80063fe:	e7ef      	b.n	80063e0 <__kernel_rem_pio2+0x470>
 8006400:	ed32 7b02 	vldmdb	r2!, {d7}
 8006404:	3b01      	subs	r3, #1
 8006406:	ee36 6b07 	vadd.f64	d6, d6, d7
 800640a:	e7d0      	b.n	80063ae <__kernel_rem_pio2+0x43e>
 800640c:	eeb0 7b46 	vmov.f64	d7, d6
 8006410:	e7d2      	b.n	80063b8 <__kernel_rem_pio2+0x448>
 8006412:	ecb2 6b02 	vldmia	r2!, {d6}
 8006416:	3301      	adds	r3, #1
 8006418:	ee37 7b06 	vadd.f64	d7, d7, d6
 800641c:	e7d4      	b.n	80063c8 <__kernel_rem_pio2+0x458>
 800641e:	ed91 7b00 	vldr	d7, [r1]
 8006422:	ed91 5b02 	vldr	d5, [r1, #8]
 8006426:	3801      	subs	r0, #1
 8006428:	ee37 6b05 	vadd.f64	d6, d7, d5
 800642c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006430:	ed81 6b00 	vstr	d6, [r1]
 8006434:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006438:	ed81 7b02 	vstr	d7, [r1, #8]
 800643c:	e796      	b.n	800636c <__kernel_rem_pio2+0x3fc>
 800643e:	ed92 7b00 	vldr	d7, [r2]
 8006442:	ed92 5b02 	vldr	d5, [r2, #8]
 8006446:	3901      	subs	r1, #1
 8006448:	ee37 6b05 	vadd.f64	d6, d7, d5
 800644c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006450:	ed82 6b00 	vstr	d6, [r2]
 8006454:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006458:	ed82 7b02 	vstr	d7, [r2, #8]
 800645c:	e78b      	b.n	8006376 <__kernel_rem_pio2+0x406>
 800645e:	ed33 6b02 	vldmdb	r3!, {d6}
 8006462:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006466:	ee37 7b06 	vadd.f64	d7, d7, d6
 800646a:	e78b      	b.n	8006384 <__kernel_rem_pio2+0x414>
 800646c:	eeb1 5b45 	vneg.f64	d5, d5
 8006470:	eeb1 6b46 	vneg.f64	d6, d6
 8006474:	ed87 5b00 	vstr	d5, [r7]
 8006478:	eeb1 7b47 	vneg.f64	d7, d7
 800647c:	ed87 6b02 	vstr	d6, [r7, #8]
 8006480:	e78d      	b.n	800639e <__kernel_rem_pio2+0x42e>
 8006482:	bf00      	nop
 8006484:	f3af 8000 	nop.w
 8006488:	00000000 	.word	0x00000000
 800648c:	41700000 	.word	0x41700000
 8006490:	00000000 	.word	0x00000000
 8006494:	3e700000 	.word	0x3e700000
	...

080064a0 <__kernel_sin>:
 80064a0:	ee10 3a90 	vmov	r3, s1
 80064a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064a8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80064ac:	da04      	bge.n	80064b8 <__kernel_sin+0x18>
 80064ae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80064b2:	ee17 3a90 	vmov	r3, s15
 80064b6:	b35b      	cbz	r3, 8006510 <__kernel_sin+0x70>
 80064b8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80064bc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80064c0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006518 <__kernel_sin+0x78>
 80064c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006520 <__kernel_sin+0x80>
 80064c8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80064cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006528 <__kernel_sin+0x88>
 80064d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80064d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006530 <__kernel_sin+0x90>
 80064d8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80064dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006538 <__kernel_sin+0x98>
 80064e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80064e4:	b930      	cbnz	r0, 80064f4 <__kernel_sin+0x54>
 80064e6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006540 <__kernel_sin+0xa0>
 80064ea:	eea6 4b07 	vfma.f64	d4, d6, d7
 80064ee:	eea4 0b05 	vfma.f64	d0, d4, d5
 80064f2:	4770      	bx	lr
 80064f4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80064f8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80064fc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006500:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006504:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006548 <__kernel_sin+0xa8>
 8006508:	eea5 1b07 	vfma.f64	d1, d5, d7
 800650c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	f3af 8000 	nop.w
 8006518:	5acfd57c 	.word	0x5acfd57c
 800651c:	3de5d93a 	.word	0x3de5d93a
 8006520:	8a2b9ceb 	.word	0x8a2b9ceb
 8006524:	be5ae5e6 	.word	0xbe5ae5e6
 8006528:	57b1fe7d 	.word	0x57b1fe7d
 800652c:	3ec71de3 	.word	0x3ec71de3
 8006530:	19c161d5 	.word	0x19c161d5
 8006534:	bf2a01a0 	.word	0xbf2a01a0
 8006538:	1110f8a6 	.word	0x1110f8a6
 800653c:	3f811111 	.word	0x3f811111
 8006540:	55555549 	.word	0x55555549
 8006544:	bfc55555 	.word	0xbfc55555
 8006548:	55555549 	.word	0x55555549
 800654c:	3fc55555 	.word	0x3fc55555

08006550 <fabs>:
 8006550:	ec51 0b10 	vmov	r0, r1, d0
 8006554:	ee10 2a10 	vmov	r2, s0
 8006558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800655c:	ec43 2b10 	vmov	d0, r2, r3
 8006560:	4770      	bx	lr
 8006562:	0000      	movs	r0, r0
 8006564:	0000      	movs	r0, r0
	...

08006568 <floor>:
 8006568:	ee10 1a90 	vmov	r1, s1
 800656c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006570:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006574:	2b13      	cmp	r3, #19
 8006576:	b530      	push	{r4, r5, lr}
 8006578:	ee10 0a10 	vmov	r0, s0
 800657c:	ee10 5a10 	vmov	r5, s0
 8006580:	dc31      	bgt.n	80065e6 <floor+0x7e>
 8006582:	2b00      	cmp	r3, #0
 8006584:	da15      	bge.n	80065b2 <floor+0x4a>
 8006586:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006640 <floor+0xd8>
 800658a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800658e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006596:	dd07      	ble.n	80065a8 <floor+0x40>
 8006598:	2900      	cmp	r1, #0
 800659a:	da4e      	bge.n	800663a <floor+0xd2>
 800659c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065a0:	4318      	orrs	r0, r3
 80065a2:	d001      	beq.n	80065a8 <floor+0x40>
 80065a4:	4928      	ldr	r1, [pc, #160]	; (8006648 <floor+0xe0>)
 80065a6:	2000      	movs	r0, #0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4602      	mov	r2, r0
 80065ac:	ec43 2b10 	vmov	d0, r2, r3
 80065b0:	e020      	b.n	80065f4 <floor+0x8c>
 80065b2:	4a26      	ldr	r2, [pc, #152]	; (800664c <floor+0xe4>)
 80065b4:	411a      	asrs	r2, r3
 80065b6:	ea01 0402 	and.w	r4, r1, r2
 80065ba:	4304      	orrs	r4, r0
 80065bc:	d01a      	beq.n	80065f4 <floor+0x8c>
 80065be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006640 <floor+0xd8>
 80065c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80065c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80065ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ce:	ddeb      	ble.n	80065a8 <floor+0x40>
 80065d0:	2900      	cmp	r1, #0
 80065d2:	bfbe      	ittt	lt
 80065d4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80065d8:	fa40 f303 	asrlt.w	r3, r0, r3
 80065dc:	18c9      	addlt	r1, r1, r3
 80065de:	ea21 0102 	bic.w	r1, r1, r2
 80065e2:	2000      	movs	r0, #0
 80065e4:	e7e0      	b.n	80065a8 <floor+0x40>
 80065e6:	2b33      	cmp	r3, #51	; 0x33
 80065e8:	dd05      	ble.n	80065f6 <floor+0x8e>
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ee:	d101      	bne.n	80065f4 <floor+0x8c>
 80065f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80065f4:	bd30      	pop	{r4, r5, pc}
 80065f6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80065fa:	f04f 32ff 	mov.w	r2, #4294967295
 80065fe:	40e2      	lsrs	r2, r4
 8006600:	4202      	tst	r2, r0
 8006602:	d0f7      	beq.n	80065f4 <floor+0x8c>
 8006604:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006640 <floor+0xd8>
 8006608:	ee30 0b07 	vadd.f64	d0, d0, d7
 800660c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006614:	ddc8      	ble.n	80065a8 <floor+0x40>
 8006616:	2900      	cmp	r1, #0
 8006618:	da02      	bge.n	8006620 <floor+0xb8>
 800661a:	2b14      	cmp	r3, #20
 800661c:	d103      	bne.n	8006626 <floor+0xbe>
 800661e:	3101      	adds	r1, #1
 8006620:	ea20 0002 	bic.w	r0, r0, r2
 8006624:	e7c0      	b.n	80065a8 <floor+0x40>
 8006626:	2401      	movs	r4, #1
 8006628:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800662c:	fa04 f303 	lsl.w	r3, r4, r3
 8006630:	4418      	add	r0, r3
 8006632:	42a8      	cmp	r0, r5
 8006634:	bf38      	it	cc
 8006636:	1909      	addcc	r1, r1, r4
 8006638:	e7f2      	b.n	8006620 <floor+0xb8>
 800663a:	2000      	movs	r0, #0
 800663c:	4601      	mov	r1, r0
 800663e:	e7b3      	b.n	80065a8 <floor+0x40>
 8006640:	8800759c 	.word	0x8800759c
 8006644:	7e37e43c 	.word	0x7e37e43c
 8006648:	bff00000 	.word	0xbff00000
 800664c:	000fffff 	.word	0x000fffff

08006650 <scalbn>:
 8006650:	ee10 1a90 	vmov	r1, s1
 8006654:	b510      	push	{r4, lr}
 8006656:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800665a:	b98c      	cbnz	r4, 8006680 <scalbn+0x30>
 800665c:	ee10 3a10 	vmov	r3, s0
 8006660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006664:	430b      	orrs	r3, r1
 8006666:	d011      	beq.n	800668c <scalbn+0x3c>
 8006668:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8006730 <scalbn+0xe0>
 800666c:	4b3c      	ldr	r3, [pc, #240]	; (8006760 <scalbn+0x110>)
 800666e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006672:	4298      	cmp	r0, r3
 8006674:	da0b      	bge.n	800668e <scalbn+0x3e>
 8006676:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006738 <scalbn+0xe8>
 800667a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800667e:	e005      	b.n	800668c <scalbn+0x3c>
 8006680:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006684:	429c      	cmp	r4, r3
 8006686:	d107      	bne.n	8006698 <scalbn+0x48>
 8006688:	ee30 0b00 	vadd.f64	d0, d0, d0
 800668c:	bd10      	pop	{r4, pc}
 800668e:	ee10 1a90 	vmov	r1, s1
 8006692:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8006696:	3c36      	subs	r4, #54	; 0x36
 8006698:	4404      	add	r4, r0
 800669a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800669e:	429c      	cmp	r4, r3
 80066a0:	dd0d      	ble.n	80066be <scalbn+0x6e>
 80066a2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8006740 <scalbn+0xf0>
 80066a6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8006748 <scalbn+0xf8>
 80066aa:	eeb0 6b47 	vmov.f64	d6, d7
 80066ae:	ee10 3a90 	vmov	r3, s1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80066b8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80066bc:	e7e6      	b.n	800668c <scalbn+0x3c>
 80066be:	2c00      	cmp	r4, #0
 80066c0:	dd0a      	ble.n	80066d8 <scalbn+0x88>
 80066c2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80066c6:	ec53 2b10 	vmov	r2, r3, d0
 80066ca:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80066ce:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80066d2:	ec43 2b10 	vmov	d0, r2, r3
 80066d6:	e7d9      	b.n	800668c <scalbn+0x3c>
 80066d8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80066dc:	da19      	bge.n	8006712 <scalbn+0xc2>
 80066de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066e2:	4298      	cmp	r0, r3
 80066e4:	ee10 3a90 	vmov	r3, s1
 80066e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ec:	dd09      	ble.n	8006702 <scalbn+0xb2>
 80066ee:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8006740 <scalbn+0xf0>
 80066f2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8006748 <scalbn+0xf8>
 80066f6:	eeb0 7b40 	vmov.f64	d7, d0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8006700:	e7bb      	b.n	800667a <scalbn+0x2a>
 8006702:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8006738 <scalbn+0xe8>
 8006706:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8006750 <scalbn+0x100>
 800670a:	eeb0 7b40 	vmov.f64	d7, d0
 800670e:	2b00      	cmp	r3, #0
 8006710:	e7f4      	b.n	80066fc <scalbn+0xac>
 8006712:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8006716:	ec53 2b10 	vmov	r2, r3, d0
 800671a:	3436      	adds	r4, #54	; 0x36
 800671c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8006720:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8006724:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8006758 <scalbn+0x108>
 8006728:	ec43 2b10 	vmov	d0, r2, r3
 800672c:	e7a5      	b.n	800667a <scalbn+0x2a>
 800672e:	bf00      	nop
 8006730:	00000000 	.word	0x00000000
 8006734:	43500000 	.word	0x43500000
 8006738:	c2f8f359 	.word	0xc2f8f359
 800673c:	01a56e1f 	.word	0x01a56e1f
 8006740:	8800759c 	.word	0x8800759c
 8006744:	7e37e43c 	.word	0x7e37e43c
 8006748:	8800759c 	.word	0x8800759c
 800674c:	fe37e43c 	.word	0xfe37e43c
 8006750:	c2f8f359 	.word	0xc2f8f359
 8006754:	81a56e1f 	.word	0x81a56e1f
 8006758:	00000000 	.word	0x00000000
 800675c:	3c900000 	.word	0x3c900000
 8006760:	ffff3cb0 	.word	0xffff3cb0

08006764 <_init>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr

08006770 <_fini>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	bf00      	nop
 8006774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006776:	bc08      	pop	{r3}
 8006778:	469e      	mov	lr, r3
 800677a:	4770      	bx	lr
